<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Technosoftware.UaClient</name>
    </assembly>
    <members>
        <member name="T:Technosoftware.UaClient.Browser">
            <summary>
            Stores the options to use for a browse operation.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Browser.#ctor">
            <summary>
            Creates an unattached instance of a browser.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Browser.#ctor(Technosoftware.UaClient.Session)">
            <summary>
            Creates new instance of a browser and attaches it to a session.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Browser.#ctor(Technosoftware.UaClient.Browser)">
            <summary>
            Creates a copy of a browser.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Browser.Initialize">
            <summary>
            Sets all private fields to default values.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Browser.Session">
            <summary>
            The session that the browse is attached to.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Browser.View">
            <summary>
            The view to use for the browse operation.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Browser.MaxReferencesReturned">
            <summary>
            The maximum number of refrences to return in a single browse operation.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Browser.BrowseDirection">
            <summary>
            The direction to browse.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Browser.ReferenceTypeId">
            <summary>
            The reference type to follow.
            </summary>        
        </member>
        <member name="P:Technosoftware.UaClient.Browser.IncludeSubtypes">
            <summary>
            Whether subtypes of the reference type should be included.
            </summary>   
        </member>
        <member name="P:Technosoftware.UaClient.Browser.NodeClassMask">
            <summary>
            The classes of the target nodes.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Browser.ResultMask">
            <summary>
            The results to return.
            </summary>
        </member>
        <member name="E:Technosoftware.UaClient.Browser.BrowserEvent">
            <summary>
            Raised when a browse operation halted because of a continuation point.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Browser.ContinueUntilDone">
            <summary>
            Whether subsequent continuation points should be processed automatically.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Browser.Browse(Opc.Ua.NodeId)">
            <summary>
            Browses the specified node.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Browser.CheckBrowserState">
            <summary>
            Checks the state of the browser.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Browser.BrowseNext(System.Byte[]@,System.Boolean)">
            <summary>
            Fetches the next batch of references.
            </summary>
            <param name="continuationPoint">The continuation point.</param>
            <param name="cancel">if set to <c>true</c> the browse operation is cancelled.</param>
            <returns>The next batch of references</returns>
        </member>
        <member name="T:Technosoftware.UaClient.BrowserEventArgs">
            <summary>
            The event arguments provided a browse operation returns a continuation point.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.BrowserEventArgs.#ctor(Opc.Ua.ReferenceDescriptionCollection)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.BrowserEventArgs.Cancel">
            <summary>
            Whether the browse operation should be cancelled.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.BrowserEventArgs.ContinueUntilDone">
            <summary>
            Whether subsequent continuation points should be processed automatically.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.BrowserEventArgs.References">
            <summary>
            The references that have been fetched so far.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.CoreClientUtils">
            <summary>
            Defines numerous re-useable utility functions for clients.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.CoreClientUtils.DiscoverServers(Opc.Ua.ApplicationConfiguration)">
            <summary>
            Discovers the servers on the local machine.
            </summary>
            <param name="configuration">The configuration.</param>
            <returns>A list of server urls.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.CoreClientUtils.SelectEndpoint(System.String,System.Boolean,System.Int32)">
            <summary>
            Finds the endpoint that best matches the current settings.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="useSecurity">if set to <c>true</c> select an endpoint that uses security.</param>
            <param name="operationTimeout">Optional. Operation timeout in milliseconds.</param>
            <returns>The best available endpoint.</returns>
        </member>
        <member name="T:Technosoftware.UaClient.DataDictionary">
            <summary>
            A class that holds the configuration for a UA service.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.#ctor(Technosoftware.UaClient.Session)">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.Initialize">
            <summary>
            Sets private members to default values.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.DataDictionary.DictionaryId">
            <summary>
            The node id for the dictionary.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.DataDictionary.Name">
            <summary>
            The display name for the dictionary.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.DataDictionary.TypeSystemId">
            <summary>
            The node id for the type system.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.DataDictionary.TypeSystemName">
            <summary>
            The display name for the type system.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.DataDictionary.TypeDictionary">
            <summary>
            The type dictionary.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.DataDictionary.DataTypes">
            <summary>
            The data type dictionary.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.Load(Opc.Ua.ReferenceDescription)">
            <summary>
                Loads the dictionary identified by the node id.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.LoadAsync(Opc.Ua.ReferenceDescription)">
            <summary>
            Loads the dictionary identified by the node id.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.LoadAsync(Opc.Ua.NodeId,System.String)">
            <summary>
            Loads the dictionary identified by the node id.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.Contains(Opc.Ua.NodeId)">
            <summary>
            Returns true if the dictionary contains the data type description;
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.GetSchema(Opc.Ua.NodeId)">
            <summary>
            Returns the schema for the specified type (returns the entire dictionary if null).
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.GetTypeSystem(Opc.Ua.NodeId)">
            <summary>
            Retrieves the type system for the dictionary.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.ReadDataTypes(Opc.Ua.NodeId)">
            <summary>
            Retrieves the data types in the dictionary.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.ReadDictionary(Opc.Ua.NodeId)">
            <summary>
            Reads the contents of a data dictionary.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.Validate(System.Byte[])">
            <summary>
            Validates the type dictionary.
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Technosoftware.UaClient.DataDictionary.ValidateAsync(System.Byte[])">
            <summary>
            Validates the type dictionary.
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="T:Technosoftware.UaClient.Discover">
            <summary>Provides methods for discover (search) of OPC Servers.</summary>
        </member>
        <member name="P:Technosoftware.UaClient.Discover.DiscoveryTimeout">
            <summary>
                The timeout in milliseconds to use when discovering servers.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Discover.GetServerDescriptions(Opc.Ua.ApplicationConfiguration)">
            <summary>
                Returns a list of OPC servers supporting one of the specified specifications. If no specifications is given only
                OPC Unified Architecture (OPC UA) servers are returned.
            </summary>
            <param name="applicationConfiguration">The configuration for the client application.</param>
            <returns>Returns a collection of Application Descriptions for the found OPC servers.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Discover.GetServerDescriptions(Opc.Ua.ApplicationConfiguration,Opc.Ua.Specification[])">
            <summary>
                Returns a list of OPC servers supporting one of the specified specifications. If no specifications is given only
                OPC Unified Architecture (OPC UA) servers are returned.
            </summary>
            <param name="applicationConfiguration">The configuration for the client application.</param>
            <param name="specifications">The OPC specifications.</param>
            <returns>Returns a collection of Application Descriptions for the found OPC servers.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Discover.GetServerDescriptions(Opc.Ua.ApplicationConfiguration,System.String,Opc.Ua.Specification[])">
            <summary>
                Returns a list of OPC servers supporting one of the specified specifications. If no specifications is given only
                OPC Unified Architecture (OPC UA) servers are returned.
            </summary>
            <param name="applicationConfiguration">The configuration for the client application.</param>
            <param name="hostname">Host name</param>
            <param name="specifications">The OPC specifications.</param>
            <returns>Returns a collection of Application Descriptions for the found OPC servers.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Discover.GetServerDescriptions(Opc.Ua.ApplicationConfiguration,System.String)">
            <summary>
                Returns a list of OPC servers supporting one of the specified specifications. If no specifications is given only
                OPC Unified Architecture (OPC UA) servers are returned.
            </summary>
            <param name="applicationConfiguration">The configuration for the client application.</param>
            <param name="hostname">Host name</param>
            <returns>Returns a collection of Application Descriptions for the found OPC servers.</returns>
            <exception caption="" cref="T:Opc.Ua.ServiceResultException">
                Thrown when a service result error condition
                occurs.
            </exception>
        </member>
        <member name="M:Technosoftware.UaClient.Discover.GetServerDescriptions(Opc.Ua.ApplicationConfiguration,System.Uri)">
            <summary>
                Returns a list of servers.
            </summary>
            <param name="applicationConfiguration">The configuration for the client application.</param>
            <param name="uri">The URL of the Discovery Server to be used.</param>
            <returns>Returns a list of found OPC server urls.</returns>
            <exception caption="" cref="T:Opc.Ua.ServiceResultException">
                Thrown when a service result error condition
                occurs.
            </exception>
        </member>
        <member name="M:Technosoftware.UaClient.Discover.GetUaServers(Opc.Ua.ApplicationConfiguration)">
            <summary>
                Returns a list of OPC Unified Architecture (OPC UA) servers.
            </summary>
            <param name="applicationConfiguration">The configuration for the client application.</param>
            <returns>Returns a list of found OPC UA server urls.</returns>
            <exception caption="" cref="T:Opc.Ua.ServiceResultException">
                Thrown when a service result error condition
                occurs.
            </exception>
        </member>
        <member name="M:Technosoftware.UaClient.Discover.GetUaServers(Opc.Ua.ApplicationConfiguration,System.String)">
            <summary>
                Returns a list of OPC Unified Architecture (OPC UA) servers.
            </summary>
            <param name="applicationConfiguration">The configuration for the client application.</param>
            <param name="discoveryServerUrl">The URL of the Discovery Server to be used.</param>
            <returns>Returns a list of found OPC UA server urls.</returns>
            <exception caption="" cref="T:Opc.Ua.ServiceResultException">
                Thrown when a service result error condition
                occurs.
            </exception>
        </member>
        <member name="M:Technosoftware.UaClient.Discover.GetUaServers(Opc.Ua.ApplicationConfiguration,System.Uri)">
            <summary>
                Returns a list of OPC Unified Architecture (OPC UA) servers.
            </summary>
            <param name="applicationConfiguration">The configuration for the client application.</param>
            <param name="uri">The URL of the Discovery Server to be used.</param>
            <returns>Returns a list of found OPC UA server urls.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Discover.GetEndpointDescriptions(Opc.Ua.ApplicationConfiguration,System.String)">
            <summary>
                Returns a list of endpoint descriptions for the specified server.
            </summary>
            <param name="applicationConfiguration">The configuration for the client application.</param>
            <param name="discoveryUrl">
                The URL of the server as returned by the GetServerDescriptions method,
                e.g."http://localhost:55541/UA/SampleServer"
            </param>
            <returns>The available endpoint descriptions.</returns>
            <exception caption="" cref="T:Opc.Ua.ServiceResultException">
                Thrown when a service result error condition
                occurs.
            </exception>
            <exception caption="" cref="T:Opc.Ua.ServiceResultException">
                Thrown when a service result error condition
                occurs.
            </exception>
        </member>
        <member name="M:Technosoftware.UaClient.Discover.GetConfiguredEndpoint(Opc.Ua.EndpointDescription)">
            <summary>
                Returns the configured endpoint for a given endpoint description.
            </summary>
            <param name="endpointDescription">The endpoint description.</param>
            <returns>The configured endpoint.</returns>
            <exception caption="" cref="T:Opc.Ua.ServiceResultException">
                Thrown when a service result error condition
                occurs.
            </exception>
        </member>
        <member name="M:Technosoftware.UaClient.Discover.SelectEndpoint(Opc.Ua.ApplicationConfiguration,System.String,System.Boolean)">
            <summary>
                Finds the endpoint that best matches the current settings. For connecting to Classic OPC Servers this method is
                recommended.
            </summary>
            <param name="applicationConfiguration">The configuration for the client application.</param>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="useSecurity">if set to <c>true</c> select an endpoint that uses security.</param>
            <returns>The best available endpoint.</returns>
        </member>
        <member name="T:Technosoftware.UaClient.NamespaceDoc">
             <summary>
             The <b>Technosoftware.UaClient</b> namespace defines classes which can be used to implement a UA client.
             These classes manage client side state information, provide higher level abstractions for UA 
             tasks such as managing sessions/subscriptions and saving/restoring connection information for 
             later use.
             </summary>
            <exclude/>
        </member>
        <member name="T:Technosoftware.UaClient.LicenseHandler">
            <summary>
                Manages the license to enable the different product versions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.LicenseHandler.Validate(Opc.Ua.LicenseHandler.LicenseEdition,System.String)">
            <summary>
            Validate the license.
            </summary>
            <param name="productEdition">Product Edition</param>
            <param name="serialNumber">Serial Number</param>
        </member>
        <member name="T:Technosoftware.UaClient.MonitoredItem">
            <summary>
            A monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Technosoftware.UaClient.MonitoredItem"/> class.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Technosoftware.UaClient.MonitoredItem"/> class.
            </summary>
            <param name="clientHandle">The client handle. The caller must ensure it uniquely identifies the monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.#ctor(Technosoftware.UaClient.MonitoredItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Technosoftware.UaClient.MonitoredItem"/> class.
            </summary>
            <param name="template">The template used to specify the monitoring parameters.</param>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.#ctor(Technosoftware.UaClient.MonitoredItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Technosoftware.UaClient.MonitoredItem"/> class.
            </summary>
            <param name="template">The template used to specify the monitoring parameters.</param>
            <param name="copyEventHandlers">if set to <c>true</c> the event handlers are copied.</param>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.#ctor(Technosoftware.UaClient.MonitoredItem,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Technosoftware.UaClient.MonitoredItem"/> class.
            </summary>
            <param name="template">The template used to specify the monitoring parameters.</param>
            <param name="copyEventHandlers">if set to <c>true</c> the event handlers are copied.</param>
            <param name="copyClientHandle">if set to <c>true</c> the clientHandle is of the template copied.</param>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.Initialize(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by the .NET framework during deserialization.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.Initialize">
            <summary>
            Sets the private members to default values.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.DisplayName">
            <summary>
            A display name for the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.StartNodeId">
            <summary>
            The start node for the browse path that identifies the node to monitor.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.RelativePath">
            <summary>
            The relative path from the browse path to the node to monitor.
            </summary>
            <remarks>
            A null or empty string specifies that the start node id should be monitored.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.NodeClass">
            <summary>
            The node class of the node being monitored (affects the type of filter available).
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.AttributeId">
            <summary>
            The attribute to monitor.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.IndexRange">
            <summary>
            The range of array indexes to monitor.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.Encoding">
            <summary>
            The encoding to use when returning notifications.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.MonitoringMode">
            <summary>
            The monitoring mode.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.SamplingInterval">
            <summary>
            The sampling interval.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.Filter">
            <summary>
            The filter to use to select values to return.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.QueueSize">
            <summary>
            The length of the queue used to buffer values.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.DiscardOldest">
            <summary>
            Whether to discard the oldest entries in the queue when it is full.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.Subscription">
            <summary>
            The subscription that owns the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.Handle">
            <summary>
            A local handle assigned to the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.Created">
            <summary>
            Whether the item has been created on the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.ClientHandle">
            <summary>
            The identifier assigned by the client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.ResolvedNodeId">
            <summary>
            The node id to monitor after applying any relative path.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.AttributesModified">
            <summary>
            Whether the monitoring attributes have been modified since the item was created.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.Status">
            <summary>
            The status associated with the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.CacheQueueSize">
            <summary>
            Returns the queue size used by the cache.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.LastValue">
            <summary>
            The last value or event received from the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.DequeueValues">
            <summary>
            Read all values in the cache queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.DequeueEvents">
            <summary>
            Read all events in the cache queue.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItem.LastMessage">
            <summary>
            The last message containing a notification for the item.
            </summary>
        </member>
        <member name="E:Technosoftware.UaClient.MonitoredItem.MonitoredItemNotificationEvent">
            <summary>
            Raised when a new notification arrives.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.SaveValueInCache(Opc.Ua.IEncodeable)">
            <summary>
            Saves a data change or event in the cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.MemberwiseClone">
            <summary>
            Creates a deep copy of the object.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.SetError(Opc.Ua.ServiceResult)">
            <summary>
            Sets the error status for the monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.SetResolvePathResult(Opc.Ua.BrowsePathResult,System.Int32,Opc.Ua.DiagnosticInfoCollection,Opc.Ua.ResponseHeader)">
            <summary>
            Updates the object with the results of a translate browse path request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.SetCreateResult(Opc.Ua.MonitoredItemCreateRequest,Opc.Ua.MonitoredItemCreateResult,System.Int32,Opc.Ua.DiagnosticInfoCollection,Opc.Ua.ResponseHeader)">
            <summary>
            Updates the object with the results of a create monitored item request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.SetModifyResult(Opc.Ua.MonitoredItemModifyRequest,Opc.Ua.MonitoredItemModifyResult,System.Int32,Opc.Ua.DiagnosticInfoCollection,Opc.Ua.ResponseHeader)">
            <summary>
            Updates the object with the results of a modify monitored item request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.SetDeleteResult(Opc.Ua.StatusCode,System.Int32,Opc.Ua.DiagnosticInfoCollection,Opc.Ua.ResponseHeader)">
            <summary>
            Updates the object with the results of a modify monitored item request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.GetFieldName(System.Int32)">
            <summary>
            Returns the field name the specified SelectClause in the EventFilter.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.GetFieldValue(Opc.Ua.EventFieldList,Opc.Ua.NodeId,System.String,System.UInt32)">
            <summary>
            Returns value of the field name containing the event type.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.GetFieldValue(Opc.Ua.EventFieldList,Opc.Ua.NodeId,Opc.Ua.QualifiedName)">
            <summary>
            Returns value of the field name containing the event type.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.GetFieldValue(Opc.Ua.EventFieldList,Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.QualifiedName},System.UInt32)">
            <summary>
            Returns value of the field name containing the event type.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.GetEventType(Opc.Ua.EventFieldList)">
            <summary>
            Returns value of the field name containing the event type.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.GetEventTime(Opc.Ua.EventFieldList)">
            <summary>
            Returns value of the field name containing the event type.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.GetServiceResult(Opc.Ua.IEncodeable)">
            <summary>
            The service result for a data change notification.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.GetServiceResult(Opc.Ua.IEncodeable,System.Int32)">
            <summary>
            The service result for a field in an notification (the field must contain a Status object).
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.ValidateFilter(Opc.Ua.NodeClass,Opc.Ua.MonitoringFilter)">
            <summary>
            Throws an exception if the flter cannot be used with the node class.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItem.UseDefaultEventFilter">
            <summary>
            Sets the default event filter.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.MonitoredItemDataCache">
            <summary>
            An item in the cache
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemDataCache.#ctor(System.Int32)">
            <summary>
            Constructs a cache for a monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemDataCache.QueueSize">
            <summary>
            The size of the queue to maintain.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemDataCache.LastValue">
            <summary>
            The last value received from the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemDataCache.Publish">
            <summary>
            Returns all values in the queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemDataCache.OnNotification(Opc.Ua.MonitoredItemNotification)">
            <summary>
            Saves a notification in the cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemDataCache.SetQueueSize(System.Int32)">
            <summary>
            Changes the queue size.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.MonitoredItemEventCache">
            <summary>
            Saves the events received from the srever.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemEventCache.#ctor(System.Int32)">
            <summary>
            Constructs a cache for a monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemEventCache.QueueSize">
            <summary>
            The size of the queue to maintain.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemEventCache.LastEvent">
            <summary>
            The last event received.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemEventCache.Publish">
            <summary>
            Returns all events in the queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemEventCache.OnNotification(Opc.Ua.EventFieldList)">
            <summary>
            Saves a notification in the cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemEventCache.SetQueueSize(System.Int32)">
            <summary>
            Changes the queue size.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.MonitoredItemNotificationEventArgs">
            <summary>
            The event arguments provided when a new notification message arrives.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemNotificationEventArgs.#ctor(Opc.Ua.IEncodeable)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemNotificationEventArgs.NotificationValue">
            <summary>
            The new notification.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.MonitoredItemStatus">
            <summary>
            The current status of monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemStatus.#ctor">
            <summary>
            Creates a empty object.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.Id">
            <summary>
            The identifier assigned by the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.Created">
            <summary>
            Whether the item has been created on the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.Error">
            <summary>
            Any error condition associated with the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.NodeId">
            <summary>
            The node id being monitored.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.AttributeId">
            <summary>
            The attribute being monitored.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.IndexRange">
            <summary>
            The range of array indexes to being monitored.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.DataEncoding">
            <summary>
            The encoding to use when returning notifications.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.MonitoringMode">
            <summary>
            The monitoring mode.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.ClientHandle">
            <summary>
            The identifier assigned by the client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.SamplingInterval">
            <summary>
            The sampling interval.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.Filter">
            <summary>
            The filter to use to select values to return.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.QueueSize">
            <summary>
            The length of the queue used to buffer values.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.MonitoredItemStatus.DiscardOldest">
            <summary>
            Whether to discard the oldest entries in the queue when it is full.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemStatus.SetMonitoringMode(Opc.Ua.MonitoringMode)">
            <summary>
            Updates the monitoring mode.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemStatus.SetResolvePathResult(Opc.Ua.BrowsePathResult,Opc.Ua.ServiceResult)">
            <summary>
            Updates the object with the results of a translate browse paths request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemStatus.SetCreateResult(Opc.Ua.MonitoredItemCreateRequest,Opc.Ua.MonitoredItemCreateResult,Opc.Ua.ServiceResult)">
            <summary>
            Updates the object with the results of a create monitored item request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemStatus.SetModifyResult(Opc.Ua.MonitoredItemModifyRequest,Opc.Ua.MonitoredItemModifyResult,Opc.Ua.ServiceResult)">
            <summary>
            Updates the object with the results of a modify monitored item request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemStatus.SetDeleteResult(Opc.Ua.ServiceResult)">
            <summary>
            Updates the object with the results of a delete item request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.MonitoredItemStatus.SetError(Opc.Ua.ServiceResult)">
            <summary>
            Sets the error state for the monitored item status.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.NodeCache">
            <summary>
            A client side cache of the server's type model.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.#ctor(Technosoftware.UaClient.Session)">
            <summary>
            Initializes the object with default values.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.NodeCache.NamespaceUris">
            <summary cref="P:Opc.Ua.INodeTable.NamespaceUris" />
        </member>
        <member name="P:Technosoftware.UaClient.NodeCache.ServerUris">
            <summary cref="P:Opc.Ua.INodeTable.ServerUris" />
        </member>
        <member name="P:Technosoftware.UaClient.NodeCache.TypeTree">
            <summary cref="P:Opc.Ua.INodeTable.TypeTree" />
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.Exists(Opc.Ua.ExpandedNodeId)">
            <summary cref="M:Opc.Ua.INodeTable.Exists(Opc.Ua.ExpandedNodeId)" />
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.Find(Opc.Ua.ExpandedNodeId)">
            <summary cref="M:Opc.Ua.INodeTable.Find(Opc.Ua.ExpandedNodeId)" />
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.Find(Opc.Ua.ExpandedNodeId,Opc.Ua.NodeId,System.Boolean,System.Boolean,Opc.Ua.QualifiedName)">
            <summary cref="M:Opc.Ua.INodeTable.Find(Opc.Ua.ExpandedNodeId,Opc.Ua.NodeId,System.Boolean,System.Boolean,Opc.Ua.QualifiedName)" />
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.Find(Opc.Ua.ExpandedNodeId,Opc.Ua.NodeId,System.Boolean,System.Boolean)">
            <summary cref="M:Opc.Ua.INodeTable.Find(Opc.Ua.ExpandedNodeId,Opc.Ua.NodeId,System.Boolean,System.Boolean)" />
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.IsKnown(Opc.Ua.ExpandedNodeId)">
            <summary>
            Determines whether a node id is a known type id.
            </summary>
            <param name="typeId">The type extended identifier.</param>
            <returns>
            	<c>true</c> if the specified type id is known; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.IsKnown(Opc.Ua.NodeId)">
            <summary>
            Determines whether a node id is a known type id.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>
            	<c>true</c> if the specified type id is known; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.FindSuperType(Opc.Ua.ExpandedNodeId)">
            <summary>
            Returns the immediate supertype for the type.
            </summary>
            <param name="typeId">The extended type identifier.</param>
            <returns>
            A type identifier of the <paramref name="typeId "/>
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.FindSuperType(Opc.Ua.NodeId)">
            <summary>
            Returns the immediate supertype for the type.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>
            The immediate supertype idnetyfier for <paramref name="typeId"/>
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.FindSubTypes(Opc.Ua.ExpandedNodeId)">
            <summary>
            Returns the immediate subtypes for the type.
            </summary>
            <param name="typeId">The extended type identifier.</param>
            <returns>
            List of type identifiers for <paramref name="typeId"/>
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.IsTypeOf(Opc.Ua.ExpandedNodeId,Opc.Ua.ExpandedNodeId)">
            <summary>
            Determines whether a type is a subtype of another type.
            </summary>
            <param name="subTypeId">The subtype identifier.</param>
            <param name="superTypeId">The supertype identifier.</param>
            <returns>
            	<c>true</c> if <paramref name="superTypeId"/> is supertype of <paramref name="subTypeId"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.IsTypeOf(Opc.Ua.NodeId,Opc.Ua.NodeId)">
            <summary>
            Determines whether a type is a subtype of another type.
            </summary>
            <param name="subTypeId">The subtype identifier.</param>
            <param name="superTypeId">The supertype identyfier.</param>
            <returns>
            	<c>true</c> if <paramref name="superTypeId"/> is supertype of <paramref name="subTypeId"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.FindReferenceTypeName(Opc.Ua.NodeId)">
            <summary>
            Returns the qualified name for the reference type id.
            </summary>
            <param name="referenceTypeId">The reference type</param>
            <returns>
            A name qualified with a namespace for the reference <paramref name="referenceTypeId"/>.
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.FindReferenceType(Opc.Ua.QualifiedName)">
            <summary>
            Returns the node identifier for the reference type with the specified browse name.
            </summary>
            <param name="browseName">Browse name of the reference.</param>
            <returns>
            The identifier for the <paramref name="browseName"/>
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.IsEncodingOf(Opc.Ua.ExpandedNodeId,Opc.Ua.ExpandedNodeId)">
            <summary>
            Checks if the identifier <paramref name="encodingId"/> represents a that provides encodings
            for the <paramref name="datatypeId "/>.
            </summary>
            <param name="encodingId">The id the encoding node .</param>
            <param name="datatypeId">The id of the DataType node.</param>
            <returns>
            	<c>true</c> if <paramref name="encodingId"/> is encoding of the <paramref name="datatypeId"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.IsEncodingFor(Opc.Ua.NodeId,Opc.Ua.ExtensionObject)">
            <summary>
            Determines if the value contained in an extension object <paramref name="value"/> matches the expected data type.
            </summary>
            <param name="expectedTypeId">The identifier of the expected type .</param>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the value contained in an extension object <paramref name="value"/> matches the
            expected data type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.IsEncodingFor(Opc.Ua.NodeId,System.Object)">
            <summary>
            Determines if the value is an encoding of the <paramref name="value"/>
            </summary>
            <param name="expectedTypeId">The expected type id.</param>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> the value is an encoding of the <paramref name="value"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.FindDataTypeId(Opc.Ua.ExpandedNodeId)">
            <summary>
            Returns the data type for the specified encoding.
            </summary>
            <param name="encodingId">The encoding id.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.FindDataTypeId(Opc.Ua.NodeId)">
            <summary>
            Returns the data type for the specified encoding.
            </summary>
            <param name="encodingId">The encoding id.</param>
            <returns>
            The data type for the <paramref name="encodingId"/>
            </returns>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.LoadUaDefinedTypes(Opc.Ua.ISystemContext)">
            <summary>
            Loads the UA defined types into the cache.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.Clear">
            <summary>
            Removes all nodes from the cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.FetchNode(Opc.Ua.ExpandedNodeId)">
            <summary>
            Fetches a node from the server and updates the cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.FetchSuperTypes(Opc.Ua.ExpandedNodeId)">
            <summary>
            Adds the supertypes of the node to the cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.FindReferences(Opc.Ua.ExpandedNodeId,Opc.Ua.NodeId,System.Boolean,System.Boolean)">
            <summary>
            Returns the references of the specified node that meet the criteria specified.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.GetDisplayText(Opc.Ua.INode)">
            <summary>
            Returns a display name for a node.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.GetDisplayText(Opc.Ua.ExpandedNodeId)">
            <summary>
            Returns a display name for a node.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.GetDisplayText(Opc.Ua.ReferenceDescription)">
            <summary>
            Returns a display name for the target of a reference.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.NodeCache.BuildBrowsePath(Opc.Ua.ILocalNode,System.Collections.Generic.IList{Opc.Ua.QualifiedName})">
            <summary>
            Builds the relative path from a type to a node.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.RenewUserIdentityEventArgs">
            <summary>
                The event arguments provided user identity tokens gets renewed before reconnect.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.RenewUserIdentityEventArgs.#ctor(Opc.Ua.IUserIdentity)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.RenewUserIdentityEventArgs.UserIdentity">
            <summary>
            Gets the user identity.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.Session">
            <summary>
            Manages a session with a server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.#ctor(Opc.Ua.ISessionChannel,Opc.Ua.ApplicationConfiguration,Opc.Ua.ConfiguredEndpoint)">
            <summary>
            Constructs a new instance of the session.
            </summary>
            <param name="channel">The channel used to communicate with the server.</param>
            <param name="configuration">The configuration for the client application.</param>
            <param name="endpoint">The endpoint use to initialize the channel.</param>
        </member>
        <member name="M:Technosoftware.UaClient.Session.#ctor(Opc.Ua.ITransportChannel,Opc.Ua.ApplicationConfiguration,Opc.Ua.ConfiguredEndpoint,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Constructs a new instance of the session.
            </summary>
            <param name="channel">The channel used to communicate with the server.</param>
            <param name="configuration">The configuration for the client application.</param>
            <param name="endpoint">The endpoint use to initialize the channel.</param>
            <param name="clientCertificate">The certificate to use for the client.</param>
            <remarks>
            The application configuration is used to look up the certificate if none is provided.
            The clientCertificate must have the private key. This will require that the certificate
                be loaded from a certificate store. Converting a DER encoded blob to a X509Certificate2
            will not include a private key.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaClient.Session.#ctor(Opc.Ua.ITransportChannel,Opc.Ua.ApplicationConfiguration,Opc.Ua.ConfiguredEndpoint,System.Security.Cryptography.X509Certificates.X509Certificate2,Opc.Ua.EndpointDescriptionCollection)">
            <summary>
                Constructs a new instance of the session.
            </summary>
            <param name="channel">The channel used to communicate with the server.</param>
            <param name="configuration">The configuration for the client application.</param>
            <param name="endpoint">The endpoint use to initialize the channel.</param>
            <param name="clientCertificate">The certificate to use for the client.</param>
            <param name="availableEndpoints">The available endpoints for the session.</param>
            <remarks>
                The application configuration is used to look up the certificate if none is provided.
                The clientCertificate must have the private key. This will require that the certificate
                be loaded from a certificate store. Converting a DER encoded blob to a X509Certificate2
                will not include a private key.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaClient.Session.#ctor(Opc.Ua.ITransportChannel,Technosoftware.UaClient.Session,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Technosoftware.UaClient.Session"/> class.
            </summary>
            <param name="channel">The channel.</param>
            <param name="template">The template session.</param>
            <param name="copyEventHandlers">if set to <c>true</c> the event handlers are copied.</param>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Initialize(Opc.Ua.ITransportChannel,Opc.Ua.ApplicationConfiguration,Opc.Ua.ConfiguredEndpoint,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes the channel.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Initialize">
            <summary>
            Sets the object members to default values.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.ValidateClientConfiguration(Opc.Ua.ApplicationConfiguration)">
            <summary>
            Check if all required configuration fields are populated.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.ValidateServerNonce(Opc.Ua.IUserIdentity,System.Byte[],System.String)">
            <summary>
            Validates the server nonce and security parameters of user identity.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Dispose(System.Boolean)">
            <summary>
            Closes the session and the underlying channel.
            </summary>
        </member>
        <member name="E:Technosoftware.UaClient.Session.SessionKeepAliveEvent">
            <summary>
                Raised when a keep alive arrives from the server or an error is detected.
            </summary>
            <remarks>
                Once a session is created a timer will periodically read the server state and current time.
                If this read operation succeeds this event will be raised each time the keep alive period elapses.
                If an error is detected (KeepAliveStopped == true) then this event will be raised as well.
            </remarks>
        </member>
        <member name="E:Technosoftware.UaClient.Session.SessionNotificationEvent">
            <summary>
                Raised when a notification message arrives in a publish response.
            </summary>
            <remarks>
                All publish requests are managed by the Session object. When a response arrives it is
                validated and passed to the appropriate Subscription object and this event is raised.
            </remarks>
        </member>
        <member name="E:Technosoftware.UaClient.Session.SessionPublishErrorEvent">
            <summary>
                Raised when an exception occurs while processing a publish response.
            </summary>
            <remarks>
            Exceptions in a publish response are not necessarily fatal and the Session will 
                attempt to recover by issuing Republish requests if missing messages are detected.
                That said, timeout errors may be a symptom of a OperationTimeout that is too short
                when compared to the shortest PublishingInterval/KeepAliveCount amount the current
                Subscriptions. The OperationTimeout should be twice the minimum value for
                PublishingInterval*KeepAliveCount.
            </remarks>
        </member>
        <member name="E:Technosoftware.UaClient.Session.SubscriptionsChangedEvent">
            <summary>
                Raised when a subscription is added or removed
            </summary>
        </member>
        <member name="E:Technosoftware.UaClient.Session.SessionClosingEvent">
            <summary>
                Raised to indicate the session is closing.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.ConfiguredEndpoint">
            <summary>
            Gets the endpoint used to connect to the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.SessionName">
            <summary>
            Gets the name assigned to the session.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.SessionTimeout">
            <summary>
            Gets the period for wich the server will maintain the session if there is no communication from the client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.Handle">
            <summary>
            Gets the local handle assigned to the session
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.Identity">
            <summary>
            Gets the user identity currently used for the session.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.IdentityHistory">
            <summary>
            Gets a list of user identities that can be used to connect to the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.NamespaceUris">
            <summary>
            Gets the table of namespace uris known to the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.ServerUris">
            <summary>
            Gest the table of remote server uris known to the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.SystemContext">
            <summary>
            Gets the system context for use with the session.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.Factory">
            <summary>
            Gets the factory used to create encodeable objects that the server understands.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.TypeTree">
            <summary>
            Gets the cache of the server's type tree.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.NodeCache">
            <summary>
            Gets the cache of nodes fetched from the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.FilterContext">
            <summary>
            Gets the context to use for filter operations.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.PreferredLocales">
            <summary>
            Gets the locales that the server should use when returning localized text.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.DataTypeSystem">
            <summary>
            Gets the data type system dictionaries in use.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.Subscriptions">
            <summary>
            Gets the subscriptions owned by the session.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.SubscriptionCount">
            <summary>
            Gets the number of subscriptions owned by the session.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.DefaultSubscription">
            <summary>
            Gets or Sets the default subscription for the session.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.KeepAliveInterval">
            <summary>
            Gets or Sets how frequently the server is pinged to see if communication is still working.
            </summary>
            <remarks>
            This interval controls how much time elaspes before a communication error is detected.
            If everything is ok the KeepAlive event will be raised each time this period elapses.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaClient.Session.KeepAliveStopped">
            <summary>
            Returns true if the session is not receiving keep alives.
            </summary>
            <remarks>
            Set to true if the server does not respond for 2 times the KeepAliveInterval.
            Set to false is communication recovers.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaClient.Session.LastKeepAliveTime">
            <summary>
            Gets the time of the last keep alive.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.OutstandingRequestCount">
            <summary>
            Gets the number of outstanding publish or keep alive requests.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.DefunctRequestCount">
            <summary>
            Gets the number of outstanding publish or keep alive requests which appear to hung.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Session.GoodPublishRequestCount">
            <summary>
            Gets the number of good outstanding publish requests.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Create(Opc.Ua.ApplicationConfiguration,Opc.Ua.ConfiguredEndpoint,System.Boolean,System.String,System.UInt32,Opc.Ua.IUserIdentity,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new communication session with a server by invoking the CreateSession service
            </summary>
            <param name="configuration">The configuration for the client application.</param>
            <param name="endpoint">The endpoint for the server.</param>
            <param name="updateBeforeConnect">If set to <c>true</c> the discovery endpoint is used to update the endpoint description before connecting.</param>
            <param name="sessionName">The name to assign to the session.</param>
            <param name="sessionTimeout">The timeout period for the session.</param>
            <param name="identity">The identity.</param>
            <param name="preferredLocales">The user identity to associate with the session.</param>
            <returns>The new session object</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.CreateAsync(Opc.Ua.ApplicationConfiguration,Opc.Ua.ConfiguredEndpoint,System.Boolean,System.String,System.UInt32,Opc.Ua.IUserIdentity,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new communication session with a server by invoking the CreateSession service
            </summary>
            <param name="configuration">The configuration for the client application.</param>
            <param name="endpoint">The endpoint for the server.</param>
            <param name="updateBeforeConnect">If set to <c>true</c> the discovery endpoint is used to update the endpoint description before connecting.</param>
            <param name="sessionName">The name to assign to the session.</param>
            <param name="sessionTimeout">The timeout period for the session.</param>
            <param name="identity">The identity.</param>
            <param name="preferredLocales">The user identity to associate with the session.</param>
            <returns>The new session object</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Create(Opc.Ua.ApplicationConfiguration,Opc.Ua.ConfiguredEndpoint,System.Boolean,System.Boolean,System.String,System.UInt32,Opc.Ua.IUserIdentity,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new communication session with a server by invoking the CreateSession service
            </summary>
            <param name="configuration">The configuration for the client application.</param>
            <param name="endpoint">The endpoint for the server.</param>
            <param name="updateBeforeConnect">If set to <c>true</c> the discovery endpoint is used to update the endpoint description before connecting.</param>
            <param name="checkDomain">If set to <c>true</c> then the domain in the certificate must match the endpoint used.</param>
            <param name="sessionName">The name to assign to the session.</param>
            <param name="sessionTimeout">The timeout period for the session.</param>
            <param name="identity">The user identity to associate with the session.</param>
            <param name="preferredLocales">The preferred locales.</param>
            <returns>The new session object.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.CreateAsync(Opc.Ua.ApplicationConfiguration,Opc.Ua.ConfiguredEndpoint,System.Boolean,System.Boolean,System.String,System.UInt32,Opc.Ua.IUserIdentity,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new communication session with a server by invoking the CreateSession service
            </summary>
            <param name="configuration">The configuration for the client application.</param>
            <param name="endpoint">The endpoint for the server.</param>
            <param name="updateBeforeConnect">If set to <c>true</c> the discovery endpoint is used to update the endpoint description before connecting.</param>
            <param name="checkDomain">If set to <c>true</c> then the domain in the certificate must match the endpoint used.</param>
            <param name="sessionName">The name to assign to the session.</param>
            <param name="sessionTimeout">The timeout period for the session.</param>
            <param name="identity">The user identity to associate with the session.</param>
            <param name="preferredLocales">The preferred locales.</param>
            <returns>The new session object.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Recreate(Technosoftware.UaClient.Session)">
            <summary>
            Recreates a session based on a specified template.
            </summary>
            <param name="template">The Session object to use as template</param>
            <returns>The new session object.</returns>
        </member>
        <member name="T:Technosoftware.UaClient.Session.RenewUserIdentityEventHandler">
            <summary>
            Used to handle renews of user identity tokens before reconnect.
            </summary>
        </member>
        <member name="E:Technosoftware.UaClient.Session.RenewUserIdentityEvent">
            <summary>
            Raised before a reconnect operation completes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Reconnect">
            <summary>
            Reconnects to the server after a network failure.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Save(System.String)">
            <summary>
            Saves all the subscriptions of the session.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Save(System.String,System.Collections.Generic.IEnumerable{Technosoftware.UaClient.Subscription})">
            <summary>
            Saves a set of subscriptions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Load(System.String)">
            <summary>
            Load the list of subscriptions saved in a file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>The list of loaded subscriptions</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.FetchNamespaceTables">
            <summary>
            Updates the local copy of the server's namespace uri and server uri tables.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.FetchTypeTree(Opc.Ua.ExpandedNodeId)">
            <summary>
            Updates the cache with the type and its subtypes.
            </summary>
            <remarks>
            This method can be used to ensure the TypeTree is populated.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaClient.Session.ReadAvailableEncodings(Opc.Ua.NodeId)">
            <summary>
            Returns the available encodings for a node
            </summary>
            <param name="variableId">The variable node.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.FindDataDescription(Opc.Ua.NodeId)">
            <summary>
            Returns the data description for the encoding.
            </summary>
            <param name="encodingId">The encoding Id.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.FindDataDictionary(Opc.Ua.NodeId)">
            <summary>
                Returns the data dictionary that contains the description.
            </summary>
            <param name="descriptionId">The description id.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.FindDataDictionaryAsync(Opc.Ua.NodeId)">
            <summary>
             Returns the data dictionary that contains the description.
            </summary>
            <param name="descriptionId">The description id.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.LoadDataDictionaryAsync(Opc.Ua.ReferenceDescription,System.Boolean)">
            <summary>
             Returns the data dictionary that contains the description.
            </summary>
            <param name="dictionaryId">The dictionary id.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.LoadDataTypeSystemAsync(Opc.Ua.NodeId)">
            <summary>
            Loads all dictionaries of the OPC binary or Xml schema type system.
            </summary>
            <param name="dataTypeSystem">The type system.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.ReadNode(Opc.Ua.NodeId)">
            <summary>
            Reads the values for the node attributes and returns a node object.
            </summary>
            <param name="nodeId">The nodeId.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.ReadValue(Opc.Ua.NodeId)">
            <summary>
            Reads the value for a node.
            </summary>
            <param name="nodeId">The node Id.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.ReadValue(Opc.Ua.NodeId,System.Type)">
            <summary>
                Reads the value for a node and checks that it has the specified type.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="expectedType">The expected type.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.WriteValue(Opc.Ua.NodeId,Opc.Ua.DataValue)">
            <summary>
                Writes the value of a node.
            </summary>
            <param name="nodeId">The node Id.</param>
            <param name="value">The value to write</param>
            <returns>Status of the write operation</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.WriteValues(System.Collections.Generic.IList{Opc.Ua.NodeId},System.Collections.Generic.IList{Opc.Ua.DataValue})">
            <summary>
                Writes the value of the specified nodes.
            </summary>
            <param name="nodeIds">The node Ids.</param>
            <param name="dataValues">The values to write</param>
            <returns>Status of the write operation for each of the specified node Ids.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.BeginWriteValues(System.Collections.Generic.IList{Opc.Ua.NodeId},System.Collections.Generic.IList{Opc.Ua.DataValue},System.AsyncCallback,System.Object)">
            <summary>
                Writes the value of the specified nodes.
            </summary>
            <param name="nodeIds">The node Ids.</param>
            <param name="dataValues">The values to write</param>
            <param name="callback">The callback to to be called as soon as the write operation is finished.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndWriteValues method.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.EndWriteValues(System.IAsyncResult)">
            <summary>
            Finishes an asynchronous invocation of the Write service.
            </summary>
            <param name="result">The result returned from BeginWriteValues method.</param>
            <returns>Status of the write operation for each of the specified node Ids.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.FetchReferences(Opc.Ua.NodeId)">
            <summary>
            Fetches all references for the specified node.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Open(System.String,Opc.Ua.IUserIdentity)">
            <summary>
            Establishes a session with the server.
            </summary>
            <param name="sessionName">The name to assign to the session.</param>
            <param name="identity">The user identity.</param>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Open(System.String,System.UInt32,Opc.Ua.IUserIdentity,System.Collections.Generic.IList{System.String})">
            <summary>
            Establishes a session with the server.
            </summary>
            <param name="sessionName">The name to assign to the session.</param>
            <param name="sessionTimeout">The session timeout.</param>
            <param name="identity">The user identity.</param>
            <param name="preferredLocales">The list of preferred locales.</param>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Open(System.String,System.UInt32,Opc.Ua.IUserIdentity,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Establishes a session with the server.
            </summary>
            <param name="sessionName">The name to assign to the session.</param>
            <param name="sessionTimeout">The session timeout.</param>
            <param name="identity">The user identity.</param>
            <param name="preferredLocales">The list of preferred locales.</param>
            <param name="checkDomain">If set to <c>true</c> then the domain in the certificate must match the endpoint used.</param>
        </member>
        <member name="M:Technosoftware.UaClient.Session.ChangePreferredLocales(Opc.Ua.StringCollection)">
            <summary>
            Updates the preferred locales used for the session.
            </summary>
            <param name="preferredLocales">The preferred locales.</param>
        </member>
        <member name="M:Technosoftware.UaClient.Session.UpdateSession(Opc.Ua.IUserIdentity,Opc.Ua.StringCollection)">
            <summary>
            Updates the user identity and/or locales used for the session.
            </summary>
            <param name="identity">The user identity.</param>
            <param name="preferredLocales">The preferred locales.</param>
        </member>
        <member name="M:Technosoftware.UaClient.Session.FindComponentIds(Opc.Ua.NodeId,System.Collections.Generic.IList{System.String},Opc.Ua.NodeIdCollection@,System.Collections.Generic.List{Opc.Ua.ServiceResult}@)">
            <summary>
            Finds the NodeIds for the components for an instance.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.ReadValues(System.Collections.Generic.IList{Opc.Ua.NodeId},System.Collections.Generic.IList{System.Type},System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{Opc.Ua.ServiceResult}@)">
            <summary>
            Reads the values for a set of variables.
            </summary>
            <param name="variableIds">The variable ids.</param>
            <param name="expectedTypes">The expected types.</param>
            <param name="values">The list of returned values.</param>
            <param name="errors">The list of returned errors.</param>
        </member>
        <member name="M:Technosoftware.UaClient.Session.BeginReadValues(System.Collections.Generic.IList{Opc.Ua.NodeId},System.Double,Opc.Ua.TimestampsToReturn,System.AsyncCallback,System.Object)">
            <summary>
            Reads the values for a set of variables.
            </summary>
            <param name="variableIds">The variable ids.</param>
            <param name="maxAge">The maximum age for any value.</param>
            <param name="timestampsToReturn">OPC UA defines two timestamps, the source and the server timestamp. </param>
            <param name="callback">The callback to to be called as soon as the read operation is finished.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndWriteValues method.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.EndReadValues(System.IAsyncResult)">
            <summary>
            Finishes an asynchronous invocation of the Read service.
            </summary>
            <param name="result">The result returned from BeginReadValues method.</param>
            <returns>Status of the read operation for each of the specified node Ids.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.ReadDisplayName(System.Collections.Generic.IList{Opc.Ua.NodeId},System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{Opc.Ua.ServiceResult}@)">
            <summary>
            Reads the display name for a set of Nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Close">
            <summary>
            Disconnects from the server and frees any network resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Close(System.Int32)">
            <summary>
            Disconnects from the server and frees any network resources with the specified timeout.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.AddSubscription(Technosoftware.UaClient.Subscription)">
            <summary>
            Adds a subscription to the session.
            </summary>
            <param name="subscription">The subscription to add.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.RemoveSubscription(Technosoftware.UaClient.Subscription)">
            <summary>
            Removes a subscription from the session.
            </summary>
            <param name="subscription">The subscription to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.RemoveSubscriptions(System.Collections.Generic.IEnumerable{Technosoftware.UaClient.Subscription})">
            <summary>
            Removes a list of subscriptions from the sessiont.
            </summary>
            <param name="subscriptions">The list of subscriptions to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Browse(Opc.Ua.RequestHeader,Opc.Ua.ViewDescription,Opc.Ua.NodeId,System.UInt32,Opc.Ua.BrowseDirection,Opc.Ua.NodeId,System.Boolean,System.UInt32,System.Byte[]@,Opc.Ua.ReferenceDescriptionCollection@)">
            <summary>
            Invokes the Browse service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="view">The view to browse.</param>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="maxResultsToReturn">The maximum number of returned values.</param>
            <param name="browseDirection">The browse direction.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="includeSubtypes">If set to <c>true</c> the subtypes of the ReferenceType will be included in the browse.</param>
            <param name="nodeClassMask">The node class mask.</param>
            <param name="continuationPoint">The continuation point.</param>
            <param name="references">The list of node references.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.BeginBrowse(Opc.Ua.RequestHeader,Opc.Ua.ViewDescription,Opc.Ua.NodeId,System.UInt32,Opc.Ua.BrowseDirection,Opc.Ua.NodeId,System.Boolean,System.UInt32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous invocation of the Browse service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="view">The view to browse.</param>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="maxResultsToReturn">The maximum number of returned values..</param>
            <param name="browseDirection">The browse direction.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="includeSubtypes">If set to <c>true</c> the subtypes of the ReferenceType will be included in the browse.</param>
            <param name="nodeClassMask">The node class mask.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState"></param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.EndBrowse(System.IAsyncResult,System.Byte[]@,Opc.Ua.ReferenceDescriptionCollection@)">
            <summary>
            Finishes an asynchronous invocation of the Browse service.
            </summary>
            <param name="result">The result.</param>
            <param name="continuationPoint">The continuation point.</param>
            <param name="references">The list of node references.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.BrowseNext(Opc.Ua.RequestHeader,System.Boolean,System.Byte[],System.Byte[]@,Opc.Ua.ReferenceDescriptionCollection@)">
            <summary>
            Invokes the BrowseNext service.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.BeginBrowseNext(Opc.Ua.RequestHeader,System.Boolean,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous invocation of the BrowseNext service.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.EndBrowseNext(System.IAsyncResult,System.Byte[]@,Opc.Ua.ReferenceDescriptionCollection@)">
            <summary>
            Finishes an asynchronous invocation of the BrowseNext service.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Call(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Object[])">
            <summary>
            Calls the specified method and returns the output arguments.
            </summary>
            <param name="objectId">The NodeId of the object that provides the method.</param>
            <param name="methodId">The NodeId of the method to call.</param>
            <param name="args">The input arguments.</param>
            <returns>The list of output argument values.</returns>
        </member>
        <member name="M:Technosoftware.UaClient.Session.GetSoftwareCertificates">
            <summary>
            Returns the software certificates assigned to the application.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.OnApplicationCertificateError(System.Byte[],Opc.Ua.ServiceResult)">
            <summary>
            Handles an error when validating the application instance certificate provided by the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.OnSoftwareCertificateError(Opc.Ua.SignedSoftwareCertificate,Opc.Ua.ServiceResult)">
            <summary>
            Handles an error when validating software certificates provided by the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.ValidateSoftwareCertificates(System.Collections.Generic.List{Opc.Ua.SoftwareCertificate})">
            <summary>
            Inspects the software certificates provided by the server. 
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.StartKeepAliveTimer">
            <summary>
            Starts a timer to check that the connection to the server is still available.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.RemoveRequest(System.IAsyncResult,System.UInt32,System.UInt32)">
            <summary>
            Removes a completed async request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.AsyncRequestStarted(System.IAsyncResult,System.UInt32,System.UInt32)">
            <summary>
            Adds a new async request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.AsyncRequestCompleted(System.IAsyncResult,System.UInt32,System.UInt32)">
            <summary>
            Removes a completed async request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.OnKeepAlive(System.Object)">
            <summary>
            Sends a keep alive by reading from the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.OnKeepAliveComplete(System.IAsyncResult)">
            <summary>
            Checks if a notification has arrived. Sends a publish if it has not.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.OnKeepAlive(Opc.Ua.ServerState,System.DateTime)">
            <summary>
            Called when the server returns a keep alive response.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.OnKeepAliveError(Opc.Ua.ServiceResult)">
            <summary>
            Called when a error occurs during a keep alive.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.BeginPublish(System.Int32)">
            <summary>
            Sends an additional publish request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.OnPublishComplete(System.IAsyncResult)">
            <summary>
            Completes an asynchronous publish operation.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.Republish(System.UInt32,System.UInt32)">
            <summary>
            Sends a republish request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.ProcessPublishResponse(Opc.Ua.ResponseHeader,System.UInt32,Opc.Ua.UInt32Collection,System.Boolean,Opc.Ua.NotificationMessage)">
            <summary>
            Processes the response from a publish request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Session.OnRaisePublishNotification(System.Object)">
            <summary>
            Raises an event indicating that publish has returned a notification.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.SessionKeepAliveEventArgs">
            <summary>
            The event arguments provided when a keep alive response arrives.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.SessionKeepAliveEventArgs.#ctor(Opc.Ua.ServiceResult,Opc.Ua.ServerState,System.DateTime)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SessionKeepAliveEventArgs.Status">
            <summary>
            Gets the status associated with the keep alive operation.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SessionKeepAliveEventArgs.CurrentState">
            <summary>
            Gets the current server state.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SessionKeepAliveEventArgs.CurrentTime">
            <summary>
            Gets the current server time.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SessionKeepAliveEventArgs.CancelKeepAlive">
            <summary>
            Gets or sets a flag indicating whether the session should send another keep alive.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.SessionNotificationEventArgs">
            <summary>
                Represents the event arguments provided when a new notification message arrives.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.SessionNotificationEventArgs.#ctor(Technosoftware.UaClient.Subscription,Opc.Ua.NotificationMessage,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SessionNotificationEventArgs.Subscription">
            <summary>
            Gets the subscription that the notification applies to.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SessionNotificationEventArgs.NotificationMessage">
            <summary>
            Gets the notification message.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SessionNotificationEventArgs.StringTable">
            <summary>
            Gets the string table returned with the notification message.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.SessionPublishErrorEventArgs">
            <summary>
                Represents the event arguments provided when a publish error occurs.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.SessionPublishErrorEventArgs.#ctor(Opc.Ua.ServiceResult)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.SessionPublishErrorEventArgs.#ctor(Opc.Ua.ServiceResult,System.UInt32,System.UInt32)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SessionPublishErrorEventArgs.Status">
            <summary>
            Gets the status associated with the keep alive operation.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SessionPublishErrorEventArgs.SubscriptionId">
            <summary>
            Gets the subscription with the message that could not be republished.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SessionPublishErrorEventArgs.SequenceNumber">
            <summary>
            Gets the sequence number for the message that could not be republished.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.SessionReconnectHandler">
            <summary>
            Attempts to reconnect to the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.SessionReconnectHandler.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.SessionReconnectHandler.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SessionReconnectHandler.Session">
            <summary>
            Gets the session managed by the handler.
            </summary>
            <value>The session.</value>
        </member>
        <member name="M:Technosoftware.UaClient.SessionReconnectHandler.BeginReconnect(Technosoftware.UaClient.Session,System.Int32,System.EventHandler)">
            <summary>
            Begins the reconnect process.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.SessionReconnectHandler.OnReconnect(System.Object)">
            <summary>
            Called when the reconnect timer expires.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.SessionReconnectHandler.DoReconnect">
            <summary>
            Reconnects to the server.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.Subscription">
            <summary>
            A subscription
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.#ctor">
            <summary>
            Creates a empty object.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.#ctor(Technosoftware.UaClient.Subscription)">
            <summary>
            Initializes the subscription from a template.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.#ctor(Technosoftware.UaClient.Subscription,System.Boolean)">
            <summary>
            Initializes the subscription from a template.
            </summary>
            <param name="template">The template.</param>
            <param name="copyEventHandlers">if set to <c>true</c> the event handlers are copied.</param>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.Initialize(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by the .NET framework during deserialization.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.Initialize">
            <summary>
            Sets the private members to default values.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="E:Technosoftware.UaClient.Subscription.SubscriptionStatusChangedEvent">
            <summary>
            Raised to indicate that the state of the subscription has changed.
            </summary>
        </member>
        <member name="E:Technosoftware.UaClient.Subscription.PublishStatusChangedEvent">
            <summary>
                Raised to indicate the publishing state for the subscription has stopped or resumed (see PublishingStopped property).
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.DisplayName">
            <summary>
            A display name for the subscription.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.PublishingInterval">
            <summary>
            The publishing interval.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.KeepAliveCount">
            <summary>
            The keep alive count.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.LifetimeCount">
            <summary>
            The maximum number of notifications per publish request.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.MaxNotificationsPerPublish">
            <summary>
            The maximum number of notifications per publish request.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.PublishingEnabled">
            <summary>
            Whether publishing is enabled.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.Priority">
            <summary>
            The priority assigned to subscription.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.TimestampsToReturn">
            <summary>
            The timestamps to return with the notification messages.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.MaxMessageCount">
            <summary>
            The maximum number of messages to keep in the internal cache.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.DefaultItem">
            <summary>
            The default monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.MinLifetimeInterval">
            <summary>
            The minimum lifetime for subscriptions in milliseconds.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.DisableMonitoredItemCache">
            <summary>
            Gets or sets a value indicating whether the notifications are cached within the monitored items.
            </summary>
            <value>
            	<c>true</c> if monitored item cache is disabled; otherwise, <c>false</c>.
            </value>
            <remarks>
            Applications must process the Session.Notication event if this is set to true.
            This flag improves performance by eliminating the processing involved in updating the cache.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.FastDataChangeCallback">
            <summary>
            Gets or sets the fast data change callback.
            </summary>
            <value>The fast data change callback.</value>
            <remarks>
            Only one callback is allowed at a time but it is more efficient to call than an event.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.FastEventCallback">
            <summary>
            Gets or sets the fast event callback.
            </summary>
            <value>The fast event callback.</value>
            <remarks>
            Only one callback is allowed at a time but it is more efficient to call than an event.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.MonitoredItems">
            <summary>
            The items to monitor.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.SavedMonitoredItems">
            <summary>
            Allows the list of monitored items to be saved/restored when the object is serialized.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.ChangesPending">
            <summary>
            Returns true if the subscription has changes that need to be applied.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.MonitoredItemCount">
            <summary>
            Returns the number of monitored items.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.Session">
            <summary>
            The session that owns the subscription item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.Handle">
            <summary>
            A local handle assigned to the subscription
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.Id">
            <summary>
            The unique identifier assigned by the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.Created">
            <summary>
            Whether the subscription has been created on the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.CurrentPublishingInterval">
            <summary>
            The current publishing interval.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.CurrentKeepAliveCount">
            <summary>
            The current keep alive count.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.CurrentLifetimeCount">
            <summary>
            The current lifetime count.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.CurrentPublishingEnabled">
            <summary>
            Whether publishing is currently enabled.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.CurrentPriority">
            <summary>
            The priority assigned to subscription when it was created.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.PublishTime">
            <summary>
            The when that the last notification received was published.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.LastNotificationTime">
            <summary>
            The when that the last notification was received.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.SequenceNumber">
            <summary>
            The sequence number assigned to the last notification message.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.NotificationCount">
            <summary>
            The number of notifications contained in the last notification message.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.LastNotification">
            <summary>
            The last notification received from the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.Notifications">
            <summary>
            The cached notifications.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.AvailableSequenceNumbers">
            <summary>
            The sequence numbers that are available for republish requests.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.ChangesCompleted">
            <summary>
            Sends a notification that the state of the subscription has changed.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.PublishingStopped">
            <summary>
            Returns true if the subscription is not receiving publishes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.AdjustCounts(System.UInt32@,System.UInt32@)">
            <summary>
            Ensures sensible values for the counts.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.Create">
            <summary>
            Creates a subscription on the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.StartKeepAliveTimer">
            <summary>
            Starts a timer to ensure publish requests are sent frequently enough to detect network interruptions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.OnKeepAlive(System.Object)">
            <summary>
            Checks if a notification has arrived. Sends a publish if it has not.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.TraceState(System.String)">
            <summary>
            Dumps the current state of the session queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.Delete(System.Boolean)">
            <summary>
            Deletes a subscription on the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.Modify">
            <summary>
            Modifies a subscription on the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.SetPublishingMode(System.Boolean)">
            <summary>
            Changes the publishing enabled state for the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.Republish(System.UInt32)">
            <summary>
            Republishes the specified notification message.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.ApplyChanges">
            <summary>
            Applies any changes to the subscription items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.ResolveItemNodeIds">
            <summary>
            Resolves all relative paths to nodes on the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.CreateItems">
            <summary>
            Creates all items that have not already been created.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.ModifyItems">
            <summary>
            Modies all items that have been changed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.DeleteItems">
            <summary>
            Deletes all items that have been marked for deletion.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.SetMonitoringMode(Opc.Ua.MonitoringMode,System.Collections.Generic.IList{Technosoftware.UaClient.MonitoredItem})">
            <summary>
            Deletes all items that have been marked for deletion.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.SaveMessageInCache(System.Collections.Generic.IList{System.UInt32},Opc.Ua.NotificationMessage,System.Collections.Generic.IList{System.String})">
            <summary>
            Adds the notification message to internal cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.OnMessageReceived(System.Object)">
            <summary>
            Processes the incoming messages.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.Subscription.OutstandingMessageWorkers">
            <summary>
            Get the number of outstanding message workers
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.AddItem(Technosoftware.UaClient.MonitoredItem)">
            <summary>
            Adds an item to the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.AddItems(System.Collections.Generic.IEnumerable{Technosoftware.UaClient.MonitoredItem})">
            <summary>
            Adds an item to the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.RemoveItem(Technosoftware.UaClient.MonitoredItem)">
            <summary>
            Removes an item from the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.RemoveItems(System.Collections.Generic.IEnumerable{Technosoftware.UaClient.MonitoredItem})">
            <summary>
            Removes an item from the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.FindItemByClientHandle(System.UInt32)">
            <summary>
            Returns the monitored item identified by the client handle.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.ConditionRefresh">
            <summary>
            Tells the server to refresh all conditions being monitored by the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.VerifySubscriptionState(System.Boolean)">
            <summary>
            Throws an exception if the subscription is not in the correct state.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.SaveDataChange(Opc.Ua.NotificationMessage,Opc.Ua.DataChangeNotification,System.Collections.Generic.IList{System.String})">
            <summary>
            Saves a data change in the monitored item cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.Subscription.SaveEvents(Opc.Ua.NotificationMessage,Opc.Ua.EventNotificationList,System.Collections.Generic.IList{System.String})">
            <summary>
            Saves events in the monitored item cache.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.Subscription.IncomingMessage">
            <summary>
            A message received from the server cached until is processed or discarded.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.SubscriptionChangeMask">
            <summary>
            Flags indicating what has changed in a subscription.
            </summary>
        </member>
        <member name="F:Technosoftware.UaClient.SubscriptionChangeMask.None">
            <summary>
            The subscription has not changed.
            </summary>
        </member>
        <member name="F:Technosoftware.UaClient.SubscriptionChangeMask.Created">
            <summary>
            The subscription was created on the server.
            </summary>
        </member>
        <member name="F:Technosoftware.UaClient.SubscriptionChangeMask.Deleted">
            <summary>
            The subscription was deleted on the server.
            </summary>
        </member>
        <member name="F:Technosoftware.UaClient.SubscriptionChangeMask.Modified">
            <summary>
            The subscription was modified on the server.
            </summary>
        </member>
        <member name="F:Technosoftware.UaClient.SubscriptionChangeMask.ItemsAdded">
            <summary>
            Monitored items were added to the subscription (but not created on the server) 
            </summary>
        </member>
        <member name="F:Technosoftware.UaClient.SubscriptionChangeMask.ItemsRemoved">
            <summary>
            Monitored items were removed to the subscription (but not deleted on the server) 
            </summary>
        </member>
        <member name="F:Technosoftware.UaClient.SubscriptionChangeMask.ItemsCreated">
            <summary>
            Monitored items were created on the server.
            </summary>
        </member>
        <member name="F:Technosoftware.UaClient.SubscriptionChangeMask.ItemsDeleted">
            <summary>
            Monitored items were deleted on the server.
            </summary>
        </member>
        <member name="F:Technosoftware.UaClient.SubscriptionChangeMask.ItemsModified">
            <summary>
            Monitored items were modified on the server.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.FastDataChangeNotificationEventHandler">
            <summary>
            The delegate used to receive data change notifications via a direct function call instead of a .NET Event.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.FastEventNotificationEventHandler">
            <summary>
            The delegate used to receive event notifications via a direct function call instead of a .NET Event.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.SubscriptionStatusChangedEventArgs">
            <summary>
            The event arguments provided when the state of a subscription changes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.SubscriptionStatusChangedEventArgs.#ctor(Technosoftware.UaClient.SubscriptionChangeMask)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaClient.SubscriptionStatusChangedEventArgs.Status">
            <summary>
            The changes that have affected the subscription.
            </summary>
        </member>
        <member name="T:Technosoftware.UaClient.SubscriptionCollection">
            <summary>
            A collection of subscriptions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.SubscriptionCollection.#ctor">
            <summary>
            Initializes an empty collection.
            </summary>
        </member>
        <member name="M:Technosoftware.UaClient.SubscriptionCollection.#ctor(System.Collections.Generic.IEnumerable{Technosoftware.UaClient.Subscription})">
            <summary>
            Initializes the collection from another collection.
            </summary>
            <param name="collection">The existing collection to use as the basis of creating this collection</param>
        </member>
        <member name="M:Technosoftware.UaClient.SubscriptionCollection.#ctor(System.Int32)">
            <summary>
            Initializes the collection with the specified capacity.
            </summary>
            <param name="capacity">The max. capacity of the collection</param>
        </member>
    </members>
</doc>
