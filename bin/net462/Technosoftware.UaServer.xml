<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Technosoftware.UaServer</name>
    </assembly>
    <members>
        <member name="T:Technosoftware.UaServer.Aggregates.AggregateCalculator">
            <summary>
            Calculates the value of an aggregate. 
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.#ctor(Opc.Ua.NodeId)">
            <summary>
            Creates a default aggregator.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.#ctor(Opc.Ua.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,Opc.Ua.AggregateConfiguration)">
            <summary>
            Initializes the calculation stream.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.Initialize(Opc.Ua.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,Opc.Ua.AggregateConfiguration)">
            <summary>
            Initializes the calculation stream.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.AggregateId">
            <summary>
            The aggregate function applied by the calculator.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.QueueRawValue(Opc.Ua.DataValue)">
            <summary>
            Queues a raw value for processing.
            </summary>
            <param name="value">The data value to process.</param>
            <returns>True if successful, false if the timestamp has been superceeded by values already in the stream.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetProcessedValue(System.Boolean)">
            <summary>
            Returns the next processed value.
            </summary>
            <param name="returnPartial">If true a partial interval should be processed.</param>
            <returns>The processed value. Null if nothing available and returnPartial is false.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.HasEndTimePassed(System.DateTime)">
            <summary>
            Returns true if the specified time is later than the end of the current interval.
            </summary>
            <remarks>Return true if time flows forward and the time is later than the end time.</remarks>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.StartTime">
            <summary>
            The start time for the request. 
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.EndTime">
            <summary>
            The end time for the request. 
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.ProcessingInterval">
            <summary>
            The processing interval for the request.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.Stepped">
            <summary>
            True if the data series requires stepped interpolation.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.Configuration">
            <summary>
            The configuration to use when processing.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.UseServerTimestamp">
            <summary>
            Whether to use the server timestamp for all processing.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeFlowsBackward">
            <summary>
            True if data is being processed in reverse order.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.CurrentSlice">
            <summary>
            Whether to use the server timestamp for all processing.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.Complete">
            <summary>
            True if all values required for the request have been received and processed
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.SetPartialBit">
            <summary>
            True if the GetProcessedValue method should set the Partial bit when appropriate.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.UsingExtrapolation">
            <summary>
            True if data is extrapolated after the end of data.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.CompareTimestamps(Opc.Ua.DataValue,Opc.Ua.DataValue)">
            <summary>
            Compares timestamps for two DataValues according to the current UseServerTimestamp setting.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>Less than 0 if value1 is earlier than value2; 0 if they are equal; Greater than zero otherwise.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.CompareTimestamps(Opc.Ua.DataValue,System.Collections.Generic.LinkedListNode{Opc.Ua.DataValue})">
            <summary>
            Compares timestamps for two DataValues according to the current UseServerTimestamp setting.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>Less than 0 if value1 is earlier than value2; 0 if they are equal; Greater than zero otherwise.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.CompareTimestamps(System.Collections.Generic.LinkedListNode{Opc.Ua.DataValue},System.Collections.Generic.LinkedListNode{Opc.Ua.DataValue})">
            <summary>
            Compares timestamps for two DataValues according to the current UseServerTimestamp setting.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>Less than 0 if value1 is earlier than value2; 0 if they are equal; Greater than zero otherwise.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.CompareTimestamps(System.DateTime,System.Collections.Generic.LinkedListNode{Opc.Ua.DataValue})">
            <summary>
            Compares timestamps for a timestamp to a DataValue according to the current UseServerTimestamp setting.
            </summary>
            <param name="value1">The timestamp to compare.</param>
            <param name="value2">The data value to compare.</param>
            <returns>Less than 0 if value1 is earlier than value2; 0 if they are equal; Greater than zero otherwise.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.IsGood(Opc.Ua.DataValue)">
            <summary>
            Checks if the value is good according to the configuration rules.
            </summary>
            <param name="value">The value to test.</param>
            <returns>True if the value is good.</returns>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice">
            <summary>
            Stores information about a slice of data to be processed.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice.StartTime">
            <summary>
            The start time for the slice. 
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice.EndTime">
            <summary>
            The end time for the slice. 
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice.Partial">
            <summary>
            True if the slice is a partial interval.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice.Complete">
            <summary>
            True if all of the data required to process the slice has been collected.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice.OutOfDataRange">
            <summary>
            True if the slice includes times that are outside of the available dataset.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice.EarlyBound">
            <summary>
            The first early bound for the slice.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice.SecondEarlyBound">
            <summary>
            The second early bound for the slice (always earlier than the first).
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice.Begin">
            <summary>
            The beginning of the slice.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice.End">
            <summary>
            The end of the slice.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice.LateBound">
            <summary>
            The late bound for the slice.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice.LastProcessedValue">
            <summary>
            The last value which was processed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.CreateSlice(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Creates a new time slice to process.
            </summary>
            <param name="previousSlice">The previous processed slice.</param>
            <returns>The new time slice.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.UpdateSlice(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Creates a new time slice to process.
            </summary>
            <param name="slice">The slice to update.</param>
            <returns>True if the slice is complete.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.ComputeValue(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the value for the timeslice.
            </summary>
            <param name="slice">The slice to process.</param>
            <returns>The processed value.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.Interpolate(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Calculate the interpolate aggregate for the timeslice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetNoDataValue(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Return a value indicating there is no data in the time slice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetTimestamp(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Returns the timestamp to use for the slice value.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetNoDataValue(System.DateTime)">
            <summary>
            Return a value indicating there is no data in the time slice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.Interpolate(System.DateTime,Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Interpolates a value at the timestamp.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="reference">The timeslice that contains the timestamp.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.SteppedInterpolate(System.DateTime,Opc.Ua.DataValue)">
            <summary>
            Calculate the value at the timestamp using slopped interpolation.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.SlopedInterpolate(System.DateTime,Opc.Ua.DataValue,Opc.Ua.DataValue)">
            <summary>
            Calculate the value at the timestamp using slopped interpolation.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.CastToDouble(Opc.Ua.DataValue)">
            <summary>
            Converts the value to a double for use in calculations (throws exceptions if conversion fails).
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.CastToOriginalType(System.Double,Opc.Ua.DataValue)">
            <summary>
            Converts the value back to its original type (throws exceptions if conversion fails).
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetSimpleBound(System.DateTime,Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Returns the simple bound for the timestamp.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetValuesWithSimpleBounds(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Returns the values in the list with simple bounds.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetValues(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Returns the values between the start time and the end time for the slice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetValuesWithInterpolatedBounds(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Returns the values in the list with interpolated bounds.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.AggregateCalculator.SubRegion">
            <summary>
            A subset of a slice bounded by two raw data points.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.SubRegion.StartValue">
            <summary>
            The value at the start of the region.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.SubRegion.EndValue">
            <summary>
            The value at the end of the region.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.Aggregates.AggregateCalculator.SubRegion.StartTime">
            <summary>
            The timestamp at the start of the region.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateCalculator.SubRegion.Duration">
            <summary>
            The length of the region.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.Aggregates.AggregateCalculator.SubRegion.StatusCode">
            <summary>
            The status for the region.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.Aggregates.AggregateCalculator.SubRegion.DataPoint">
            <summary>
            The data point at the start of the region.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetRegionsInValueSet(System.Collections.Generic.List{Opc.Ua.DataValue},System.Boolean,System.Boolean)">
            <summary>
            Returns the values in the list with simple bounds.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetValueBasedStatusCode(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Collections.Generic.List{Opc.Ua.DataValue},Opc.Ua.StatusCode)">
            <summary>
            Calculates the value based status code for the slice 
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetTimeBasedStatusCode(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Collections.Generic.List{Opc.Ua.DataValue},Opc.Ua.StatusCode)">
            <summary>
            Calculates the status code for the slice 
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateCalculator.GetTimeBasedStatusCode(System.Collections.Generic.List{Technosoftware.UaServer.Aggregates.AggregateCalculator.SubRegion},Opc.Ua.StatusCode)">
            <summary>
            Calculates the status code for the slice 
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.AggregateManager">
            <summary>
            An object that manages aggregate factories supported by the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateManager.#ctor(Technosoftware.UaServer.IUaServerData)">
            <summary>
            Initilizes the manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateManager.IsSupported(Opc.Ua.NodeId)">
            <summary>
            Checks if the aggregate is supported by the server.
            </summary>
            <param name="aggregateId">The id of the aggregate function.</param>
            <returns>True if the aggregate is supported.</returns>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.AggregateManager.MinimumProcessingInterval">
            <summary>
            The minimum processing interval for any aggregate calculation.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateManager.GetDefaultConfiguration(Opc.Ua.NodeId)">
            <summary>
            Returns the default configuration for the specified variable id.
            </summary>
            <param name="variableId">The id of history data node.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateManager.SetDefaultConfiguration(Opc.Ua.AggregateConfiguration)">
            <summary>
            Sets the default aggregate configuration.
            </summary>
            <param name="configuration">The default aggregate configuration..</param>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateManager.CreateCalculator(Opc.Ua.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,Opc.Ua.AggregateConfiguration)">
            <summary>
            Creates a new aggregate calculator.
            </summary>
            <param name="aggregateId">The id of the aggregate function.</param>
            <param name="startTime">When to start processing.</param>
            <param name="endTime">When to stop processing.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether stepped interpolation should be used.</param>
            <param name="configuration">The configuration to use.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateManager.RegisterFactory(Opc.Ua.NodeId,System.String,Technosoftware.UaServer.Aggregates.AggregatorFactory)">
            <summary>
            Registers an aggregate factory.
            </summary>
            <param name="aggregateId">The id of the aggregate function.</param>
            <param name="aggregateName">The id of the aggregate name.</param>
            <param name="factory">The factory used to create calculators.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AggregateManager.RegisterFactory(Opc.Ua.NodeId)">
            <summary>
            Unregisters an aggregate factory.
            </summary>
            <param name="aggregateId">The id of the aggregate function.</param>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.AggregatorFactory">
            <summary>
            Creates a new instance of an aggregate factory.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.Aggregators">
            <summary>
            The set of built-in aggregate factories.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.Aggregators.FactoryMapping">
            <summary>
            Stores the mapping for a aggregate id to the calculator.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.Aggregates.Aggregators.s_Mappings">
            <summary>
            Mapping for all of the standard aggregates.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.Aggregators.GetNameForStandardAggregate(Opc.Ua.NodeId)">
            <summary>
            Returns the name for a standard aggregates.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.Aggregators.GetIdForStandardAggregate(Opc.Ua.QualifiedName)">
            <summary>
            Returns the id for a standard aggregates.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.Aggregators.CreateStandardCalculator(Opc.Ua.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,Opc.Ua.AggregateConfiguration)">
            <summary>
            Creates a calculator for one of the standard aggregates.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.AverageAggregateCalculator">
            <summary>
            Calculates the value of an aggregate. 
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AverageAggregateCalculator.#ctor(Opc.Ua.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,Opc.Ua.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AverageAggregateCalculator.ComputeValue(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the time-slice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AverageAggregateCalculator.ComputeAverage(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the RegSlope, RegConst and RegStdDev aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.AverageAggregateCalculator.ComputeTimeAverage(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Boolean,System.Int32)">
            <summary>
            Calculates the StdDev, Variance, StdDev2 and Variance2 aggregates for the timeslice.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.CountAggregateCalculator">
            <summary>
            Calculates the value of an aggregate. 
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.CountAggregateCalculator.#ctor(Opc.Ua.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,Opc.Ua.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.CountAggregateCalculator.ComputeValue(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the time-slice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.CountAggregateCalculator.ComputeCount(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the Count aggregate for the timeslice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.CountAggregateCalculator.ComputeAnnotationCount(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the AnnotationCount aggregate for the timeslice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.CountAggregateCalculator.ComputeDurationInState(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Boolean)">
            <summary>
            Calculates the DurationInStateZero and DurationInStateNonZero aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.CountAggregateCalculator.ComputeNumberOfTransitions(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the Count aggregate for the timeslice.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.MinMaxAggregateCalculator">
            <summary>
            Calculates the value of an aggregate. 
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.MinMaxAggregateCalculator.#ctor(Opc.Ua.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,Opc.Ua.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.MinMaxAggregateCalculator.ComputeValue(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the time-slice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.MinMaxAggregateCalculator.ComputeMinMax(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Int32,System.Boolean)">
            <summary>
            Calculate the Minimum, Maximum, MinimumActualTime and MaximumActualTime aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.MinMaxAggregateCalculator.ComputeMinMax2(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Int32,System.Boolean)">
            <summary>
            Calculate the Minimum2, Maximum2, MinimumActualTime2, MaximumActualTime2 and Range2 aggregates for the timeslice.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.ServerAggregateFilter">
            <summary>
            A aggregate filter with additional state information.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Aggregates.ServerAggregateFilter.Stepped">
            <summary>
            Whether the variable requires stepped interpolation.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.StartEndAggregateCalculator">
            <summary>
            Calculates the value of an aggregate. 
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StartEndAggregateCalculator.#ctor(Opc.Ua.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,Opc.Ua.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StartEndAggregateCalculator.ComputeValue(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the time-slice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StartEndAggregateCalculator.ComputeStartEnd(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Boolean)">
            <summary>
            Calculate the Start and End aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StartEndAggregateCalculator.ComputeDelta(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the Delta aggregate for the timeslice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StartEndAggregateCalculator.ComputeStartEnd2(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Boolean)">
            <summary>
            Calculate the Start2 and End2 aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StartEndAggregateCalculator.ComputeDelta2(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the Delta2 aggregate for the timeslice.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.StatusAggregateCalculator">
            <summary>
            Calculates the value of an aggregate. 
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StatusAggregateCalculator.#ctor(Opc.Ua.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,Opc.Ua.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StatusAggregateCalculator.ComputeValue(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the time-slice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StatusAggregateCalculator.ComputeDurationGoodBad(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Boolean,System.Boolean)">
            <summary>
            Calculates the DurationGood and DurationBad aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StatusAggregateCalculator.ComputeWorstQuality(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Boolean)">
            <summary>
            Calculates the DurationGood and DurationBad aggregates for the timeslice.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Aggregates.StdDevAggregateCalculator">
            <summary>
            Calculates the value of an aggregate. 
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StdDevAggregateCalculator.#ctor(Opc.Ua.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,Opc.Ua.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StdDevAggregateCalculator.ComputeValue(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the time-slice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StdDevAggregateCalculator.ComputeRegression(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Int32)">
            <summary>
            Calculates the RegSlope, RegConst and RegStdDev aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Aggregates.StdDevAggregateCalculator.ComputeStdDev(Technosoftware.UaServer.Aggregates.AggregateCalculator.TimeSlice,System.Boolean,System.Int32)">
            <summary>
            Calculates the StdDev, Variance, StdDev2 and Variance2 aggregates for the timeslice.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Configuration.ConfigurationNodeManager">
            <summary>
            The ServerData Configuration Node Manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Configuration.ConfigurationNodeManager.#ctor(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Initializes the configuration and diagnostics manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Configuration.ConfigurationNodeManager.AddBehaviourToPredefinedNode(Opc.Ua.ISystemContext,Opc.Ua.NodeState)">
            <summary>
            Replaces the generic node with a node specific to the model.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Configuration.ConfigurationNodeManager.CreateServerConfiguration(Technosoftware.UaServer.UaServerContext,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Creates the configuration node for the server.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Configuration.SystemConfigurationIdentity">
            <summary>
            Special identity only for the system configuration.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Configuration.SystemConfigurationIdentity.PolicyId">
            <summary>
            The user token policy.
            </summary>
            <value>The user token policy.</value>
        </member>
        <member name="T:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager">
            <summary>
            A node manager the diagnostic information exposed by the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.#ctor(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Initializes the node manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.CreateNodeId(Opc.Ua.ISystemContext,Opc.Ua.NodeState)">
            <summary>
            Creates the NodeId for the specified node.
            </summary>
            <param name="context">The context.</param>
            <param name="node">The node.</param>
            <returns>The new NodeId.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.CreateAddressSpace(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Does any initialization required before the address space can be used.
            </summary>
            <remarks>
            The externalReferences is an out parameter that allows the node manager to link to nodes
            in other node managers. For example, the 'Objects' node is managed by the CoreNodeManager and
            should have a reference to the root folder node(s) exposed by this node manager.  
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.OnGetMonitoredItems(Opc.Ua.ISystemContext,Opc.Ua.MethodState,System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object})">
            <summary>
            Called when a client locks the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.OnLockServer(Opc.Ua.ISystemContext,Opc.Ua.MethodState,System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object})">
            <summary>
            Called when a client locks the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.OnUnlockServer(Opc.Ua.ISystemContext,Opc.Ua.MethodState,System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object})">
            <summary>
            Called when a client locks the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.LoadPredefinedNodes(Opc.Ua.ISystemContext)">
            <summary>
            Loads a node set from a file or resource and addes them to the set of predefined nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.AddBehaviourToPredefinedNode(Opc.Ua.ISystemContext,Opc.Ua.NodeState)">
            <summary>
            Replaces the generic node with a node specific to the model.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.OnConditionRefresh(Opc.Ua.ISystemContext,Opc.Ua.MethodState,Opc.Ua.NodeId,System.UInt32)">
            <summary>
            Handles a request to refresh conditions for a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.IsDiagnosticsNode(Opc.Ua.NodeState)">
            <summary>
            Returns true of the node is a diagnostics node.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.IsDiagnosticsStructureNode(Opc.Ua.NodeState)">
            <summary>
            Returns true of the node is a diagnostics node.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.ForceDiagnosticsScan">
            <summary>
            Force out of band diagnostics update after a change of diagnostics variables.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.DiagnosticsEnabled">
            <summary>
            True is diagnostics are currently enabled.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.SetDiagnosticsEnabled(Technosoftware.UaServer.UaServerContext,System.Boolean)">
            <summary>
            Sets the flag controlling whether diagnostics is enabled for the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.CreateServerDiagnostics(Technosoftware.UaServer.UaServerContext,Opc.Ua.ServerDiagnosticsSummaryDataType,Opc.Ua.NodeValueSimpleEventHandler)">
            <summary>
            Creates the diagnostics node for the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.CreateSessionDiagnostics(Technosoftware.UaServer.UaServerContext,Opc.Ua.SessionDiagnosticsDataType,Opc.Ua.NodeValueSimpleEventHandler,Opc.Ua.SessionSecurityDiagnosticsDataType,Opc.Ua.NodeValueSimpleEventHandler)">
            <summary>
            Creates the diagnostics node for a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.DeleteSessionDiagnostics(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeId)">
            <summary>
            Delete the diagnostics node for a session.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.CreateSubscriptionDiagnostics(Technosoftware.UaServer.UaServerContext,Opc.Ua.SubscriptionDiagnosticsDataType,Opc.Ua.NodeValueSimpleEventHandler)">
            <summary>
            Creates the diagnostics node for a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.DeleteSubscriptionDiagnostics(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeId)">
            <summary>
            Delete the diagnostics node for a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.GetDefaultHistoryCapabilities">
            <summary>
            Gets the default history capabilities object.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.AddAggregateFunction(Opc.Ua.NodeId,System.String,System.Boolean)">
            <summary>
            Adds an aggregate function to the server capabilities object.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.UpdateServerDiagnosticsSummary">
            <summary>
            Updates the server diagnostics summary structure.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.UpdateSessionDiagnostics(Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.SessionDiagnosticsData,Opc.Ua.SessionDiagnosticsDataType[],System.Int32)">
            <summary>
            Updates the session diagnostics summary structure.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.UpdateSessionSecurityDiagnostics(Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.SessionDiagnosticsData,Opc.Ua.SessionSecurityDiagnosticsDataType[],System.Int32)">
            <summary>
            Updates the session diagnostics summary structure.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.UpdateSubscriptionDiagnostics(Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.SubscriptionDiagnosticsData,Opc.Ua.SubscriptionDiagnosticsDataType[],System.Int32)">
            <summary>
            Updates the subscription diagnostics summary structure.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.OnBeforeReadDiagnostics(Opc.Ua.ISystemContext,Opc.Ua.BaseVariableValue,Opc.Ua.NodeState)">
            <summary>
            Does a scan before the diagnostics are read.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.OnReadDiagnosticsArray(Opc.Ua.ISystemContext,Opc.Ua.NodeState,System.Object@)">
            <summary>
            Does a scan before the diagnostics are read.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.DoScan(System.Object)">
            <summary>
            Reports notifications for any monitored diagnostic nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.ValidateViewDescription(Technosoftware.UaServer.UaServerContext,Opc.Ua.ViewDescription)">
            <summary>
            Validates the view description passed to a browse request (throws on error).
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.OnMonitoredItemCreated(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Called after creating a UaMonitoredItem.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle for the node.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.OnMonitoredItemDeleted(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Called after deleting a UaMonitoredItem.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle for the node.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.OnMonitoringModeChanged(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem,Opc.Ua.MonitoringMode,Opc.Ua.MonitoringMode)">
            <summary>
            Called after changing the MonitoringMode for a UaMonitoredItem.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle for the node.</param>
            <param name="monitoredItem">The monitored item.</param>
            <param name="previousMode">The previous monitoring mode.</param>
            <param name="monitoringMode">The current monitoring mode.</param>
        </member>
        <member name="T:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.SessionDiagnosticsData">
            <summary>
            Stores the callback information for a session diagnostics structures.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.SubscriptionDiagnosticsData">
            <summary>
            Stores the callback information for a subscription diagnostics structure.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.CreateSampledItem(System.Double,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Creates a new sampled item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.DeleteSampledItem(Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Deletes a sampled item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.DiagnosticsNodeManager.DoSample(System.Object)">
            <summary>
            Polls each monitored item which requires sample. 
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Diagnostics.GenericNodeManager">
            <summary>
            A sample implementation of the IUaNodeManager interface.
            </summary>
            <remarks>
            This node manager is a base class used in multiple samples. It implements the IUaNodeManager
            interface and allows sub-classes to override only the methods that they need. This example
            is not part of the SDK because most real implementations of a IUaNodeManager will need to
            modify the behavior of the base class.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.#ctor(Technosoftware.UaServer.IUaServerData,System.String[])">
            <summary>
            Initializes the node manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.#ctor(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration,System.String[])">
            <summary>
            Initializes the node manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.CreateNodeId(Opc.Ua.ISystemContext,Opc.Ua.NodeState)">
            <summary>
            Creates the NodeId for the specified node.
            </summary>
            <param name="context">The context.</param>
            <param name="node">The node.</param>
            <returns>The new NodeId.</returns>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.Lock">
            <summary>
            Acquires the lock on the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.ServerData">
            <summary>
            Gets the server that the node manager belongs to.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.SystemContext">
            <summary>
            The default context to use.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.NamespaceIndex">
            <summary>
            Gets the default index for the node manager's namespace.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.NamespaceIndexes">
            <summary>
            Gets the namespace indexes owned by the node manager.
            </summary>
            <value>The namespace indexes.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.MaxQueueSize">
            <summary>
            Gets or sets the maximum size of a monitored item queue.
            </summary>
            <value>The maximum size of a monitored item queue.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.AliasRoot">
            <summary>
            The root for the alias assigned to the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.PredefinedNodes">
            <summary>
            The predefined nodes managed by the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.RootNotifiers">
            <summary>
            The root notifiers for the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.MonitoredItems">
            <summary>
            Gets the table of monitored items.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.MonitoredNodes">
            <summary>
            Gets the table of nodes being monitored.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.SetNamespaces(System.String[])">
            <summary>
            Sets the namespaces supported by the NodeManager.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.SetNamespaceIndexes(System.UInt16[])">
            <summary>
            Sets the namespace indexes supported by the NodeManager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.IsNodeIdInNamespace(Opc.Ua.NodeId)">
            <summary>
            Returns true if the namespace for the node id is one of the namespaces managed by the node manager.
            </summary>
            <param name="nodeId">The node id to check.</param>
            <returns>True if the namespace is one of the nodes.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.IsHandleInNamespace(System.Object)">
            <summary>
            Returns the node if the handle refers to a node managed by this manager.
            </summary>
            <param name="managerHandle">The handle to check.</param>
            <returns>Non-null if the handle belongs to the node manager.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.Find(Opc.Ua.NodeId)">
            <summary>
            Returns the state object for the specified node if it exists.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.CreateNode(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeId,Opc.Ua.NodeId,Opc.Ua.QualifiedName,Opc.Ua.BaseInstanceState)">
            <summary>
            Creates a new instance and assigns unique identifiers to all children.
            </summary>
            <param name="context">The operation context.</param>
            <param name="parentId">An optional parent identifier.</param>
            <param name="referenceTypeId">The reference type from the parent.</param>
            <param name="browseName">The browse name.</param>
            <param name="instance">The instance to create.</param>
            <returns>The new node id.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.DeleteNode(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeId)">
            <summary>
            Deletes a node and all of its children.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.GenericNodeManager.NamespaceUris">
            <summary>
            Returns the namespaces used by the node manager.
            </summary>
            <remarks>
            All NodeIds exposed by the node manager must be qualified by a namespace URI. This property
            returns the URIs used by the node manager. In this example all NodeIds use a single URI.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.CreateAddressSpace(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Does any initialization required before the address space can be used.
            </summary>
            <remarks>
            The externalReferences is an out parameter that allows the node manager to link to nodes
            in other node managers. For example, the 'Objects' node is managed by the CoreNodeManager and
            should have a reference to the root folder node(s) exposed by this node manager.  
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.LoadPredefinedNodes(Opc.Ua.ISystemContext,System.Reflection.Assembly,System.String,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Loads a node set from a file or resource and addes them to the set of predefined nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.LoadPredefinedNodes(Opc.Ua.ISystemContext)">
            <summary>
            Loads a node set from a file or resource and addes them to the set of predefined nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.LoadPredefinedNodes(Opc.Ua.ISystemContext,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Loads a node set from a file or resource and addes them to the set of predefined nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.AddBehaviourToPredefinedNode(Opc.Ua.ISystemContext,Opc.Ua.NodeState)">
            <summary>
            Replaces the generic node with a node specific to the model.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.AddPredefinedNode(Opc.Ua.ISystemContext,Opc.Ua.NodeState)">
            <summary>
            Recursively indexes the node and its children.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.RemovePredefinedNode(Opc.Ua.ISystemContext,Opc.Ua.NodeState,System.Collections.Generic.List{Technosoftware.UaServer.NodeManager.LocalReference})">
            <summary>
            Recursively indexes the node and its children.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.OnNodeRemoved(Opc.Ua.NodeState)">
            <summary>
            Called after a node has been deleted.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.AddReverseReferences(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Ensures that all reverse references exist.
            </summary>
            <param name="externalReferences">A list of references to add to external targets.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.AddExternalReference(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean,Opc.Ua.NodeId,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Adds an external reference to the dictionary.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.AddTypesToTypeTree(Opc.Ua.BaseTypeState)">
            <summary>
            Recursively adds the types to the type tree.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.AddTypesToTypeTree(Opc.Ua.NodeId)">
            <summary>
            Recursively adds the types to the type tree.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.FindPredefinedNode(Opc.Ua.NodeId,System.Type)">
            <summary>
            Finds the specified and checks if it is of the expected type. 
            </summary>
            <returns>Returns null if not found or not of the correct type.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.DeleteAddressSpace">
            <summary>
            Frees any resources allocated for the address space.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.GetManagerHandle(Opc.Ua.NodeId)">
            <summary>
            Returns a unique handle for the node.
            </summary>
            <remarks>
            This must efficiently determine whether the node belongs to the node manager. If it does belong to 
            NodeManager it should return a handle that does not require the NodeId to be validated again when
            the handle is passed into other methods such as 'Read' or 'Write'.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.GetManagerHandle(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeId,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Returns a unique handle for the node.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.AddReferences(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            This method is used to add bi-directional references to nodes from other node managers.
            </summary>
            <remarks>
            The additional references are optional, however, the NodeManager should support them.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.DeleteReference(System.Object,Opc.Ua.NodeId,System.Boolean,Opc.Ua.ExpandedNodeId,System.Boolean)">
            <summary>
            This method is used to delete bi-directional references to nodes from other node managers.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.GetNodeMetadata(Technosoftware.UaServer.UaServerOperationContext,System.Object,Opc.Ua.BrowseResultMask)">
            <summary>
            Returns the basic metadata for the node. Returns null if the node does not exist.
            </summary>
            <remarks>
            This method validates any placeholder handle.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.Browse(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.UaContinuationPoint@,System.Collections.Generic.IList{Opc.Ua.ReferenceDescription})">
            <summary>
            Browses the references from a node managed by the node manager.
            </summary>
            <remarks>
            The continuation point is created for every browse operation and contains the browse parameters.
            The node manager can store its state information in the Data and Index properties.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.ValidateViewDescription(Technosoftware.UaServer.UaServerContext,Opc.Ua.ViewDescription)">
            <summary>
            Validates the view description passed to a browse request (throws on error).
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.IsNodeInView(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaContinuationPoint,Opc.Ua.NodeState)">
            <summary>
            Checks if the node is in the view.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.IsNodeInView(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeId,Opc.Ua.NodeState)">
            <summary>
            Checks if the node is in the view.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.IsReferenceInView(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaContinuationPoint,Opc.Ua.IReference)">
            <summary>
            Checks if the reference is in the view.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.GetReferenceDescription(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.Dictionary{Opc.Ua.NodeId,Opc.Ua.NodeState},Opc.Ua.IReference,Technosoftware.UaServer.UaContinuationPoint)">
            <summary>
            Returns the references for the node that meets the criteria specified.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.TranslateBrowsePath(Technosoftware.UaServer.UaServerOperationContext,System.Object,Opc.Ua.RelativePathElement,System.Collections.Generic.IList{Opc.Ua.ExpandedNodeId},System.Collections.Generic.IList{Opc.Ua.NodeId})">
            <summary>
            Returns the target of the specified browse path fragment(s).
            </summary>
            <remarks>
            If reference exists but the node manager does not know the browse name it must 
            return the NodeId as an unresolvedTargetIds. The caller will try to check the
            browse name. 
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.Read(Technosoftware.UaServer.UaServerOperationContext,System.Double,System.Collections.Generic.IList{Opc.Ua.ReadValueId},System.Collections.Generic.IList{Opc.Ua.DataValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Reads the value for the specified attribute.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.FindNodeInCache(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Finds a node in the dynamic cache.
            </summary>
            <param name="context">The current context.</param>
            <param name="handle">The node handle.</param>
            <param name="cache">The cache to search.</param>
            <returns>The node if found. Null otherwise.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.ValidationComplete(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Opc.Ua.NodeState,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Marks the handle as validated and saves the node in the dynamic cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.ValidateNode(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Verifies that the specified node exists.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.Read(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.ReadValueId},System.Collections.Generic.IList{Opc.Ua.DataValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Validates the nodes and reads the values from the underlying source.
            </summary>
            <param name="context">The context.</param>
            <param name="nodesToRead">The nodes to read.</param>
            <param name="values">The values.</param>
            <param name="errors">The errors.</param>
            <param name="nodesToValidate">The nodes to validate.</param>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.Write(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.WriteValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Writes the value for the specified attributes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.Write(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.WriteValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Validates the nodes and writes the value to the underlying system.
            </summary>
            <param name="context">The context.</param>
            <param name="nodesToWrite">The nodes to write.</param>
            <param name="errors">The errors.</param>
            <param name="nodesToValidate">The nodes to validate.</param>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryRead(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.HistoryReadDetails,Opc.Ua.TimestampsToReturn,System.Boolean,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Reads the history for the specified nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryReleaseContinuationPoints(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Releases the continuation points.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryReadRawModified(Technosoftware.UaServer.UaServerContext,Opc.Ua.ReadRawModifiedDetails,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Reads raw history data.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryReadProcessed(Technosoftware.UaServer.UaServerContext,Opc.Ua.ReadProcessedDetails,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Reads processed history data.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryReadAtTime(Technosoftware.UaServer.UaServerContext,Opc.Ua.ReadAtTimeDetails,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Reads history data at specified times.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryReadEvents(Technosoftware.UaServer.UaServerContext,Opc.Ua.ReadEventDetails,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Reads history events.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryRead(Technosoftware.UaServer.UaServerContext,Opc.Ua.HistoryReadDetails,Opc.Ua.TimestampsToReturn,System.Boolean,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Validates the nodes and reads the values from the underlying source.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryUpdate(Technosoftware.UaServer.UaServerOperationContext,System.Type,System.Collections.Generic.IList{Opc.Ua.HistoryUpdateDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Updates the history for the specified nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryUpdate(Technosoftware.UaServer.UaServerContext,System.Type,System.Collections.Generic.IList{Opc.Ua.HistoryUpdateDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Validates the nodes and updates the history.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryUpdateData(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.UpdateDataDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Updates the data history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryUpdateStructureData(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.UpdateStructureDataDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Updates the structured data history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryUpdateEvents(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.UpdateEventDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Updates the event history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryDeleteRawModified(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.DeleteRawModifiedDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Deletes the data history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryDeleteAtTime(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.DeleteAtTimeDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Deletes the data history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.HistoryDeleteEvents(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.DeleteEventDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Deletes the event history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.Call(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.CallMethodRequest},System.Collections.Generic.IList{Opc.Ua.CallMethodResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Calls a method on the specified nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.Call(Opc.Ua.ISystemContext,Opc.Ua.CallMethodRequest,Opc.Ua.MethodState,Opc.Ua.CallMethodResult)">
            <summary>
            Calls a method on an object.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.SubscribeToEvents(Technosoftware.UaServer.UaServerOperationContext,System.Object,System.UInt32,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)">
            <summary>
            Subscribes or unsubscribes to events produced by the specified source.
            </summary>
            <remarks>
            This method is called when a event subscription is created or deletes. The node manager 
            must  start/stop reporting events for the specified object and all objects below it in 
            the notifier hierarchy.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.SubscribeToAllEvents(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)">
            <summary>
            Subscribes or unsubscribes to events produced by all event sources.
            </summary>
            <remarks>
            This method is called when a event subscription is created or deleted. The node 
            manager must start/stop reporting events for all objects that it manages.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.AddRootNotifier(Opc.Ua.NodeState)">
            <summary>
            Adds a root notifier.
            </summary>
            <param name="notifier">The notifier.</param>
            <remarks>
            A root notifier is a notifier owned by the NodeManager that is not the target of a 
            HasNotifier reference. These nodes need to be linked directly to the ServerData object.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.RemoveRootNotifier(Opc.Ua.NodeState)">
            <summary>
            Removes a root notifier previously added with AddRootNotifier.
            </summary>
            <param name="notifier">The notifier.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.OnReportEvent(Opc.Ua.ISystemContext,Opc.Ua.NodeState,Opc.Ua.IFilterTarget)">
            <summary>
            Reports an event for a root notifier.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.SubscribeToEvents(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeState,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)">
            <summary>
            Subscribes to events.
            </summary>
            <param name="context">The context.</param>
            <param name="source">The source.</param>
            <param name="monitoredItem">The monitored item.</param>
            <param name="unsubscribe">if set to <c>true</c> [unsubscribe].</param>
            <returns>Any error code.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.OnSubscribeToEvents(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.IUaMonitoredNode,System.Boolean)">
            <summary>
            Called after subscribing/unsubscribing to events.
            </summary>
            <param name="context">The context.</param>
            <param name="monitoredNode">The monitored node.</param>
            <param name="unsubscribe">if set to <c>true</c> unsubscribing.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.ConditionRefresh(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaEventMonitoredItem})">
            <summary>
            Tells the node manager to refresh any conditions associated with the specified monitored items.
            </summary>
            <remarks>
            This method is called when the condition refresh method is called for a subscription.
            The node manager must create a refresh event for each condition monitored by the subscription.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.CreateMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.Double,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.MonitoredItemCreateRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult},System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Int64@)">
            <summary>
            Creates a new set of monitored items for a set of variables.
            </summary>
            <remarks>
            This method only handles data change subscriptions. Event subscriptions are created by the SDK.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.OnCreateMonitoredItemsComplete(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem})">
            <summary>
            Called when a batch of monitored items has been created.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.CreateMonitoredItem(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.UInt32,System.Double,Opc.Ua.DiagnosticsMasks,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoredItemCreateRequest,System.Int64@,Opc.Ua.MonitoringFilterResult@,Technosoftware.UaServer.IUaMonitoredItem@)">
            <summary>
            Creates a new set of monitored items for a set of variables.
            </summary>
            <remarks>
            This method only handles data change subscriptions. Event subscriptions are created by the SDK.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.ReadInitialValue(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Reads the initial value for a monitored item.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The item handle.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.OnMonitoredItemCreated(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Called after creating a UaMonitoredItem.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle for the node.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.ValidateMonitoringFilter(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.UInt32,System.Double,System.UInt32,Opc.Ua.ExtensionObject,Opc.Ua.MonitoringFilter@,Opc.Ua.Range@,Opc.Ua.MonitoringFilterResult@)">
            <summary>
            Validates the monitoring filter specified by the client.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.ReviseAggregateFilter(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.Double,System.UInt32,Technosoftware.UaServer.Aggregates.ServerAggregateFilter)">
            <summary>
            Revises an aggregate filter (may require knowledge of the variable being used). 
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle.</param>
            <param name="samplingInterval">The sampling interval for the monitored item.</param>
            <param name="queueSize">The queue size for the monitored item.</param>
            <param name="filterToUse">The filter to revise.</param>
            <returns>Good if the </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.ModifyMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{Opc.Ua.MonitoredItemModifyRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult})">
            <summary>
            Modifies the parameters for a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.OnModifyMonitoredItemsComplete(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem})">
            <summary>
            Called when a batch of monitored items has been modified.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.ModifyMonitoredItem(Technosoftware.UaServer.UaServerContext,Opc.Ua.DiagnosticsMasks,Opc.Ua.TimestampsToReturn,Technosoftware.UaServer.IUaMonitoredItem,Opc.Ua.MonitoredItemModifyRequest,Technosoftware.UaServer.UaNodeHandle,Opc.Ua.MonitoringFilterResult@)">
            <summary>
            Modifies the parameters for a monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.OnMonitoredItemModified(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Called after modifying a UaMonitoredItem.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle for the node.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.DeleteMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{System.Boolean},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Deletes a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.OnDeleteMonitoredItemsComplete(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem})">
            <summary>
            Called when a batch of monitored items has been modified.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.DeleteMonitoredItem(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.IUaMonitoredItem,Technosoftware.UaServer.UaNodeHandle)">
            <summary>
            Deletes a monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.OnMonitoredItemDeleted(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Called after deleting a UaMonitoredItem.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle for the node.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.SetMonitoringMode(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.MonitoringMode,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{System.Boolean},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Changes the monitoring mode for a set of monitored items.
            </summary>
            <param name="context">The context.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="monitoredItems">The set of monitoring items to update.</param>
            <param name="processedItems">Flags indicating which items have been processed.</param>
            <param name="errors">Any errors.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.OnSetMonitoringModeComplete(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem})">
            <summary>
            Called when a batch of monitored items has their monitoring mode changed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.SetMonitoringMode(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.IUaMonitoredItem,Opc.Ua.MonitoringMode,Technosoftware.UaServer.UaNodeHandle)">
            <summary>
            Changes the monitoring mode for an item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.OnMonitoringModeChanged(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem,Opc.Ua.MonitoringMode,Opc.Ua.MonitoringMode)">
            <summary>
            Called after changing the MonitoringMode for a UaMonitoredItem.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle for the node.</param>
            <param name="monitoredItem">The monitored item.</param>
            <param name="previousMode">The previous monitoring mode.</param>
            <param name="monitoringMode">The current monitoring mode.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.SessionClosing(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Called when a session is closed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.IsNodeInView(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Object)">
            <summary>
            Returns true if a node is in a view.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Diagnostics.GenericNodeManager.CacheEntry">
            <summary>
            Stores a reference count for entries in the component cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.LookupNodeInComponentCache(Opc.Ua.ISystemContext,Technosoftware.UaServer.UaNodeHandle)">
            <summary>
            Looks up a component in cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.RemoveNodeFromComponentCache(Opc.Ua.ISystemContext,Technosoftware.UaServer.UaNodeHandle)">
            <summary>
            Removes a reference to a component in thecache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.GenericNodeManager.AddNodeToComponentCache(Opc.Ua.ISystemContext,Technosoftware.UaServer.UaNodeHandle,Opc.Ua.NodeState)">
            <summary>
            Adds a node to the component cache.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Diagnostics.MonitoredItemQueue">
            <summary>
            Provides a queue for data changes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredItemQueue.#ctor(System.UInt32,Technosoftware.UaServer.Diagnostics.MonitoredItemQueue.DiscardedValueHandler)">
            <summary>
            Creates an empty queue.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.MonitoredItemQueue.QueueSize">
            <summary>
            Gets the current queue size.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.MonitoredItemQueue.ItemsInQueue">
            <summary>
            Gets number of elements actually contained in value queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredItemQueue.SetSamplingInterval(System.Double)">
            <summary>
            Sets the sampling interval used when queuing values.
            </summary>
            <param name="samplingInterval">The new sampling interval.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredItemQueue.SetQueueSize(System.UInt32,System.Boolean,Opc.Ua.DiagnosticsMasks)">
            <summary>
            Sets the queue size.
            </summary>
            <param name="queueSize">The new queue size.</param>
            <param name="discardOldest">Whether to discard the oldest values if the queue overflows.</param>
            <param name="diagnosticsMasks">Specifies which diagnostics which should be kept in the queue.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredItemQueue.QueueValue(Opc.Ua.DataValue,Opc.Ua.ServiceResult)">
            <summary>
            Adds the value to the queue.
            </summary>
            <param name="value">The value to queue.</param>
            <param name="error">The error to queue.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredItemQueue.Publish(Opc.Ua.DataValue@,Opc.Ua.ServiceResult@)">
            <summary>
            Publishes the oldest value in the queue.
            </summary>
            <param name="value">The value.</param>
            <param name="error">The error associated with the value.</param>
            <returns>True if a value was found. False if the queue is empty.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredItemQueue.Enqueue(Opc.Ua.DataValue,Opc.Ua.ServiceResult)">
            <summary>
            Adds the value to the queue. Discards values if the queue is full.
            </summary>
            <param name="value">The value to add.</param>
            <param name="error">The error to add.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredItemQueue.Dequeue(Opc.Ua.DataValue@,Opc.Ua.ServiceResult@)">
            <summary>
            Removes a value and an error from the queue.
            </summary>
            <param name="value">The value removed from the queue.</param>
            <param name="error">The error removed from the queue.</param>
            <returns>True if a value was found. False if the queue is empty.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredItemQueue.SetOverflowBit(Opc.Ua.DataValue@,Opc.Ua.ServiceResult@)">
            <summary>
            Sets the overflow bit in the value and error.
            </summary>
            <param name="value">The value to update.</param>
            <param name="error">The error to update.</param>
        </member>
        <member name="T:Technosoftware.UaServer.Diagnostics.MonitoredNode">
            <summary>
            Stores the current set of MonitoredItems for a Node.
            </summary>
            <remarks>
                An instance of this object is created the first time a MonitoredItem is
            created for any attribute of a Node. The object is deleted when the last
                MonitoredItem is deleted.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredNode.#ctor(Technosoftware.UaServer.IUaNodeManager,Opc.Ua.NodeState)">
            <summary>
                Initializes a new instance of the <see cref="T:Technosoftware.UaServer.Diagnostics.MonitoredNode" /> class.
            </summary>
            <param name="nodeManager">The node manager.</param>
            <param name="node">The node.</param>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.MonitoredNode.NodeManagerLock">
            <summary>
                Gets or sets the NodeManager lock.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.MonitoredNode.NodeManager">
            <summary>
            Gets or sets the NodeManager which the MonitoredNode belongs to.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.MonitoredNode.Node">
            <summary>
            Gets or sets the Node being monitored.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.MonitoredNode.DataChangeMonitoredItems">
            <summary>
            Gets the current list of data change MonitoredItems.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.MonitoredNode.EventMonitoredItems">
            <summary>
            Gets the current list of event MonitoredItems.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Diagnostics.MonitoredNode.HasMonitoredItems">
            <summary>
            Gets a value indicating whether this instance has monitored items.
            </summary>
            <value>
            	<c>true</c> if this instance has monitored items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredNode.Add(Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Adds the specified data change monitored item.
            </summary>
            <param name="datachangeItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredNode.Remove(Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Removes the specified data change monitored item.
            </summary>
            <param name="datachangeItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredNode.Add(Technosoftware.UaServer.IUaEventMonitoredItem)">
            <summary>
            Adds the specified event monitored item.
            </summary>
            <param name="eventItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredNode.Remove(Technosoftware.UaServer.IUaEventMonitoredItem)">
            <summary>
            Removes the specified event monitored item.
            </summary>
            <param name="eventItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredNode.OnReportEvent(Opc.Ua.ISystemContext,Opc.Ua.NodeState,Opc.Ua.IFilterTarget)">
            <summary>
            Called when a Node produces an event.
            </summary>
            <param name="context">The system context.</param>
            <param name="node">The affected node.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredNode.OnMonitoredNodeChanged(Opc.Ua.ISystemContext,Opc.Ua.NodeState,Opc.Ua.NodeStateChangeMasks)">
            <summary>
            Called when the state of a Node changes.
            </summary>
            <param name="context">The system context.</param>
            <param name="node">The affected node.</param>
            <param name="changes">The mask indicating what changes have occurred.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Diagnostics.MonitoredNode.QueueValue(Opc.Ua.ISystemContext,Opc.Ua.NodeState,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
                Reads the value of an attribute and reports it to the MonitoredItem.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.NamespaceDoc">
             <summary>
             The <b>Technosoftware.UaServer</b> namespace defines classes which can be used to implement a UA server.
             These classes manage session and subscriptions created by clients and provide a simplified 
             API that can be used to provide access to data and events in an external system.
             </summary>
            <exclude/>
        </member>
        <member name="T:Technosoftware.UaServer.IUaAggregateCalculator">
            <summary>
            An interface that captures the original active API of the AggregateCalculator class
            required to integrate with the subscription code.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaAggregateCalculator.AggregateId">
            <summary>
            The aggregate function applied by the calculator.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaAggregateCalculator.QueueRawValue(Opc.Ua.DataValue)">
            <summary>
            Pushes the next raw value into the stream.
            </summary>
            <param name="value">The data value to append to the stream.</param>
            <returns>True if successful, false if the source timestamp has been superceeded by values already in the stream.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaAggregateCalculator.GetProcessedValue(System.Boolean)">
            <summary>
            Returns the next processed value.
            </summary>
            <param name="returnPartial">If true a partial interval should be processed.</param>
            <returns>The processed value. Null if nothing available and returnPartial is false.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaAggregateCalculator.HasEndTimePassed(System.DateTime)">
            <summary>
            Returns true if the specified time is later than the end of the current interval.
            </summary>
            <remarks>Return true if time flows forward and the time is later than the end time.</remarks>
        </member>
        <member name="T:Technosoftware.UaServer.IUaMonitoredItem">
            <summary>
            Manages a monitored item created by a client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.NodeManager">
            <summary>
            The node manager that created the item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.Session">
            <summary>
            The session that owns the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.Id">
            <summary>
            The identifier for the item that is unique within the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.SubscriptionId">
            <summary>
            The identifier for the subscription that is unique within the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.ClientHandle">
            <summary>
            The identifier for the client handle assigned to the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.SubscriptionCallback">
            <summary>
            The object to call when item is ready to publish.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.ManagerHandle">
            <summary>
            The handle assigned by the NodeManager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.MonitoredItemType">
            <summary>
            A bit mask that indicates what the monitored item is.
            </summary>
            <remarks>
            Predefined bits are defined by the MonitoredItemTypeMasks class.
            NodeManagers may use the remaining bits.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.IsReadyToPublish">
            <summary>
            Checks if the monitored item is ready to publish.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.IsReadyToTrigger">
            <summary>
            Gets or Sets a value indicating whether the monitored item is ready to trigger the linked items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaMonitoredItem.GetCreateResult(Opc.Ua.MonitoredItemCreateResult@)">
            <summary>
            Returns the result after creating the monitor item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaMonitoredItem.GetModifyResult(Opc.Ua.MonitoredItemModifyResult@)">
            <summary>
            Returns the result after modifying the monitor item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.MonitoringMode">
            <summary>
            The monitoring mode specified for the item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredItem.SamplingInterval">
            <summary>
            The sampling interval for the item.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.IUaTriggeredMonitoredItem">
            <summary>
            A monitored item that can be triggered.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaTriggeredMonitoredItem.Id">
            <summary>
            The identifier for the item that is unique within the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaTriggeredMonitoredItem.SetTriggered">
            <summary>
            Flags the monitored item as triggered.
            </summary>
            <returns>True if there is something to publish.</returns>
        </member>
        <member name="T:Technosoftware.UaServer.IUaEventMonitoredItem">
            <summary>
            Manages a monitored item created by a client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaEventMonitoredItem.MonitoringAllEvents">
            <summary>
            Whether the item is monitoring all events produced by the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaEventMonitoredItem.QueueEvent(Opc.Ua.IFilterTarget)">
            <summary>
            Adds an event to the queue.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaEventMonitoredItem.EventFilter">
            <summary>
            The filter used by the monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaEventMonitoredItem.Publish(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.Queue{Opc.Ua.EventFieldList})">
            <summary>
            Publishes all available event notifications.
            </summary>
            <returns>True if the caller should re-queue the item for publishing after the next interval elaspses.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaEventMonitoredItem.ModifyAttributes(Opc.Ua.DiagnosticsMasks,Opc.Ua.TimestampsToReturn,System.UInt32,Opc.Ua.MonitoringFilter,Opc.Ua.MonitoringFilter,Opc.Ua.Range,System.Double,System.UInt32,System.Boolean)">
            <summary>
            Modifies the attributes for monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaEventMonitoredItem.SetMonitoringMode(Opc.Ua.MonitoringMode)">
            <summary>
            Changes the monitoring mode for the item.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.IUaDataChangeMonitoredItem">
            <summary>
            Manages a monitored item created by a client.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaDataChangeMonitoredItem.QueueValue(Opc.Ua.DataValue,Opc.Ua.ServiceResult)">
            <summary>
            Updates the queue with a data value or an error.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaDataChangeMonitoredItem.DataChangeFilter">
            <summary>
            The filter used by the monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaDataChangeMonitoredItem.Publish(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.Queue{Opc.Ua.MonitoredItemNotification},System.Collections.Generic.Queue{Opc.Ua.DiagnosticInfo})">
            <summary>
            Publishes all available data change notifications.
            </summary>
            <returns>True if the caller should re-queue the item for publishing after the next interval elaspses.</returns>
        </member>
        <member name="T:Technosoftware.UaServer.IUaDataChangeMonitoredItem2">
            <summary>
            Manages a monitored item created by a client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaDataChangeMonitoredItem2.AttributeId">
            <summary>
            The attribute being monitored.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaDataChangeMonitoredItem2.QueueValue(Opc.Ua.NodeState,Opc.Ua.DataValue,Opc.Ua.ServiceResult,System.Boolean)">
            <summary>
            Updates the queue with a data value or an error.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem">
            <summary>
            Manages a monitored item created by a client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem.DiagnosticsMasks">
            <summary>
            The diagnostics mask specified fro the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem.QueueSize">
            <summary>
            The queue size for the item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem.MinimumSamplingInterval">
            <summary>
            The minimum sampling interval for the item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem.SamplingIntervalExpired">
            <summary>
            Used to check whether the item is ready to sample.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem.GetReadValueId">
            <summary>
            Returns the parameters that can be used to read the monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem.ModifyAttributes(Opc.Ua.DiagnosticsMasks,Opc.Ua.TimestampsToReturn,System.UInt32,Opc.Ua.MonitoringFilter,Opc.Ua.MonitoringFilter,Opc.Ua.Range,System.Double,System.UInt32,System.Boolean)">
            <summary>
            Modifies the attributes for monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem.SetMonitoringMode(Opc.Ua.MonitoringMode)">
            <summary>
            Changes the monitoring mode for the item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem.SetSamplingInterval(System.Double)">
            <summary>
            Updates the sampling interval for an item.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.UaMonitoredItemTypeMask">
            <summary>
            Defines constants for the monitored item type.
            </summary>
            <remarks>
            Bits 1-8 are reserved for internal use. NodeManagers may use other bits.
            </remarks>
        </member>
        <member name="F:Technosoftware.UaServer.UaMonitoredItemTypeMask.DataChange">
            <summary>
            The monitored item subscribes to data changes.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.UaMonitoredItemTypeMask.Events">
            <summary>
            The monitored item subscribes to events.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.UaMonitoredItemTypeMask.AllEvents">
            <summary>
            The monitored item subscribes to all events produced by the server.
            </summary>
            <remarks>
            If this bit is set the Events bit must be set too.
            </remarks>
        </member>
        <member name="T:Technosoftware.UaServer.IUaMonitoredNode">
            <summary>
            Stores the current set of MonitoredItems for a Node.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredNode.Node">
            <summary>
            Gets or sets the Node being monitored.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredNode.DataChangeMonitoredItems">
            <summary>
            Gets the current list of data change MonitoredItems.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredNode.EventMonitoredItems">
            <summary>
            Gets the current list of event MonitoredItems.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaMonitoredNode.HasMonitoredItems">
            <summary>
            Gets a value indicating whether this instance has monitored items.
            </summary>
            <value>
            <c>true</c> if this instance has monitored items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Technosoftware.UaServer.IUaMonitoredNode.Add(Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Adds the specified data change monitored item.
            </summary>
            <param name="datachangeItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaMonitoredNode.Remove(Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Removes the specified data change monitored item.
            </summary>
            <param name="datachangeItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaMonitoredNode.Add(Technosoftware.UaServer.IUaEventMonitoredItem)">
            <summary>
            Adds the specified event monitored item.
            </summary>
            <param name="eventItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaMonitoredNode.Remove(Technosoftware.UaServer.IUaEventMonitoredItem)">
            <summary>
            Removes the specified event monitored item.
            </summary>
            <param name="eventItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaMonitoredNode.OnReportEvent(Opc.Ua.ISystemContext,Opc.Ua.NodeState,Opc.Ua.IFilterTarget)">
            <summary>
            Called when a Node produces an event.
            </summary>
            <param name="context">The system context.</param>
            <param name="node">The affected node.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaMonitoredNode.OnMonitoredNodeChanged(Opc.Ua.ISystemContext,Opc.Ua.NodeState,Opc.Ua.NodeStateChangeMasks)">
            <summary>
            Called when the state of a Node changes.
            </summary>
            <param name="context">The system context.</param>
            <param name="node">The affected node.</param>
            <param name="changes">The mask indicating what changes have occurred.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaMonitoredNode.QueueValue(Opc.Ua.ISystemContext,Opc.Ua.NodeState,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Reads the value of an attribute and reports it to the MonitoredItem.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.IUaNodeManager">
            <summary>
            An interface to an object that manages a set of nodes in the address space.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaNodeManager.NamespaceUris">
            <summary>
            Returns the NamespaceUris for the Nodes belonging to the NodeManager.
            </summary>
            <remarks>
            By default the MasterNodeManager uses the namespaceIndex to determine who owns an Node.
            
            Servers that do not wish to partition their address space this way must provide their own
            implementation of MasterNodeManager.GetManagerHandle().
            
            NodeManagers which depend on a custom partitioning scheme must return a null value.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.IUaNodeManager.AliasRoot">
            <summary>
                The root for the alias assigned to the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaNodeManager.MonitoredNodes">
            <summary>
                Gets the table of nodes being monitored.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaNodeManager.Lock">
            <summary>
                Acquires the lock on the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaNodeManager.ServerData">
            <summary>
                Gets the server data that the node manager belongs to.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.CreateAddressSpace(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Creates the address space by loading any configuration information an connecting to an underlying system (if applicable).
            </summary>
            <returns>A table of references that need to be added to other node managers.</returns>
            <remarks>
            A node manager owns a set of nodes. These nodes may be known in advance or they may be stored in an
            external system are retrived on demand. These nodes may have two way references to nodes that are owned 
            by other node managers. In these cases, the node managers only manage one half of those references. The
            other half of the reference should be returned to the MasterNodeManager.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.DeleteAddressSpace">
            <summary>
            Deletes the address by releasing all resources and disconnecting from any underlying system.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.GetManagerHandle(Opc.Ua.NodeId)">
            <summary>
            Returns an opaque handle identifying to the node to the node manager.
            </summary>
            <returns>A node handle, null if the node manager does not recognize the node id.</returns>
            <remarks>
            The method must not block by querying an underlying system. If the node manager wraps an 
            underlying system then it must check to see if it recognizes the syntax of the node id. 
            The handle in this case may simply be a partially parsed version of the node id. 
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.SessionClosing(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Called when the session is closed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.IsNodeIdInNamespace(Opc.Ua.NodeId)">
            <summary>
                Returns true if the namespace for the node id is one of the namespaces managed by the node manager.
            </summary>
            <param name="nodeId">The node id to check.</param>
            <returns>True if the namespace is one of the nodes.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.IsNodeInView(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Object)">
            <summary>
            Returns true if the node is in the view.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.AddReferences(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Adds references to the node manager.
            </summary>
            <remarks>
            The node manager checks the dictionary for nodes that it owns and ensures the associated references exist.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.DeleteReference(System.Object,Opc.Ua.NodeId,System.Boolean,Opc.Ua.ExpandedNodeId,System.Boolean)">
            <summary>
            Deletes a reference.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.GetNodeMetadata(Technosoftware.UaServer.UaServerOperationContext,System.Object,Opc.Ua.BrowseResultMask)">
            <summary>
            Returns the metadata associated with the node.
            </summary>
            <remarks>
            Returns null if the node does not exist.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.Browse(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.UaContinuationPoint@,System.Collections.Generic.IList{Opc.Ua.ReferenceDescription})">
            <summary>
            Returns the set of references that meet the filter criteria.
            </summary>
            <param name="context">The context to used when processing the request.</param>
            <param name="continuationPoint">The continuation point that stores the state of the Browse operation.</param>
            <param name="references">The list of references that meet the filter criteria.</param>     
            <remarks>
            NodeManagers will likely have references to other NodeManagers which means they will not be able
            to apply the NodeClassMask or fill in the attributes for the target Node. In these cases the 
            NodeManager must return a ReferenceDescription with the NodeId and ReferenceTypeId set. The caller will
            be responsible for filling in the target attributes. 
            The references parameter may already contain references when the method is called. The implementer must 
            include these references when calculating whether a continutation point must be returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the context, continuationPoint or references parameters are null.</exception>
            <exception cref="T:Opc.Ua.ServiceResultException">Thrown if an error occurs during processing.</exception>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.TranslateBrowsePath(Technosoftware.UaServer.UaServerOperationContext,System.Object,Opc.Ua.RelativePathElement,System.Collections.Generic.IList{Opc.Ua.ExpandedNodeId},System.Collections.Generic.IList{Opc.Ua.NodeId})">
            <summary>
            Finds the targets of the relative path from the source node.
            </summary>
            <param name="context">The context to used when processing the request.</param>
            <param name="sourceHandle">The handle for the source node.</param>
            <param name="relativePath">The relative path to follow.</param>
            <param name="targetIds">The NodeIds for any target at the end of the relative path.</param>
            <param name="unresolvedTargetIds">The NodeIds for any local target that is in another NodeManager.</param>
            <remarks>
            A null context indicates that the server's internal logic is making the call.
            The first target in the list must be the target that matches the instance declaration (if applicable).
            Any local targets that belong to other NodeManagers are returned as unresolvedTargetIds. 
            The caller must check the BrowseName to determine if it matches the relativePath.
            The implementor must not throw an exception if the source or target nodes do not exist.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the sourceHandle, relativePath or targetIds parameters are null.</exception>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.Read(Technosoftware.UaServer.UaServerOperationContext,System.Double,System.Collections.Generic.IList{Opc.Ua.ReadValueId},System.Collections.Generic.IList{Opc.Ua.DataValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
             <summary>
             Reads the attribute values for a set of nodes.
             </summary>
             <remarks>
             The MasterNodeManager pre-processes the nodesToRead and ensures that:
                - the AttributeId is a known attribute.
                - the IndexRange, if specified, is valid.
                - the DataEncoding and the IndexRange are not specified if the AttributeId is not Value.
            
             The MasterNodeManager post-processes the values by:
                - sets values[ii].StatusCode to the value of errors[ii].Code
                - creates a instance of DataValue if one does not exist and an errors[ii] is bad.
                - removes timestamps from the DataValue if the client does not want them.
             
             The node manager must ignore ReadValueId with the Processed flag set to true.
             The node manager must set the Processed flag for any ReadValueId that it processes.
             </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.HistoryRead(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.HistoryReadDetails,Opc.Ua.TimestampsToReturn,System.Boolean,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Reads the history of a set of items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.Write(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.WriteValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Writes a set of values.
            </summary>
            <remarks>
            Each node manager should only process node ids that it recognizes. If it processes a value it
            must set the Processed flag in the WriteValue structure.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.HistoryUpdate(Technosoftware.UaServer.UaServerOperationContext,System.Type,System.Collections.Generic.IList{Opc.Ua.HistoryUpdateDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Updates the history for a set of nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.Call(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.CallMethodRequest},System.Collections.Generic.IList{Opc.Ua.CallMethodResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Calls a method defined on a object.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.SubscribeToEvents(Technosoftware.UaServer.UaServerOperationContext,System.Object,System.UInt32,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)">
            <summary>
            Tells the NodeManager to report events from the specified notifier.
            </summary>
            <remarks>
            This method may be called multiple times for the name monitoredItemId if the
            context for that UaMonitoredItem changes (i.e. UserIdentity and/or Locales).
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.SubscribeToAllEvents(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)">
            <summary>
            Tells the NodeManager to report events all events from all sources.
            </summary>
            <remarks>
            This method may be called multiple times for the name monitoredItemId if the
            context for that UaMonitoredItem changes (i.e. UserIdentity and/or Locales).
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.ConditionRefresh(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaEventMonitoredItem})">
            <summary>
            Tells the NodeManager to refresh any conditions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.CreateMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.Double,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.MonitoredItemCreateRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult},System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Int64@)">
            <summary>
            Creates a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.ModifyMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{Opc.Ua.MonitoredItemModifyRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult})">
            <summary>
            Modifies a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.DeleteMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{System.Boolean},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Deletes a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaNodeManager.SetMonitoringMode(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.MonitoringMode,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{System.Boolean},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Changes the monitoring mode for a set of monitored items.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.UaNodeMetadata">
            <summary>
            Stores metadata required to process requests related to a node.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaNodeMetadata.#ctor(System.Object,Opc.Ua.NodeId)">
            <summary>
            Initializes the object with its handle and NodeId.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.Handle">
            <summary>
            The handle assigned by the NodeManager that owns the Node.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.NodeId">
            <summary>
            The canonical NodeId for the Node.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.NodeClass">
            <summary>
            The NodeClass for the Node.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.BrowseName">
            <summary>
            The BrowseName for the Node.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.DisplayName">
            <summary>
            The DisplayName for the Node.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.TypeDefinition">
            <summary>
            The type definition for the Node (if one exists).
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.ModellingRule">
            <summary>
            The modelling for the Node (if one exists).
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.WriteMask">
            <summary>
            Specifies which attributes are writeable.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.EventNotifier">
            <summary>
            Whether the Node can be used with event subscriptions or for historial event queries.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.AccessLevel">
            <summary>
            Whether the Node can be use to read or write current or historical values.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.Executable">
            <summary>
            Whether the Node is a Method that can be executed.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.DataType">
            <summary>
            The DataType of the Value attribute for Variable or VariableType nodes.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.ValueRank">
            <summary>
            The ValueRank for the Value attribute for Variable or VariableType nodes.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeMetadata.ArrayDimensions">
            <summary>
            The ArrayDimensions for the Value attribute for Variable or VariableType nodes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Technosoftware.UaServer.IUaOptionalServerPlugin" -->
        <member name="M:Technosoftware.UaServer.IUaOptionalServerPlugin.OnGetServer">
            <summary>
            Get the server manager to be used.
            </summary>
            <returns>
            The server manager class based on the UaBaseServer class. If null is returned the UaBaserServer class is used
            as the standard version.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaOptionalServerPlugin.OnGetNodeManager(Technosoftware.UaServer.IUaServer,Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration,System.String[])">
            <summary>
            Get the node manager to be used for the server.
            </summary>
            <param name="opcServer">The generic server object. Used to call methods the generic server provides.</param>
            <param name="uaServer">Server object that provides access to the shared components of the UA Server.</param>
            <param name="configuration">The application configuration.</param>
            <param name="namespaceUris">Array of namespaces that are used by the application.</param>
            <returns>
            The node manager class based on the UaBaseNodeManager class. If null is returned the generic server use the
            standard version of the UaBaseNodeManager.
            </returns>
        </member>
        <member name="T:Technosoftware.UaServer.IUaServer">
            <summary>
                <para>OPC UA Server Interface</para>
                <para>This interface defines the generic server interface.</para>
                <para>
                    The IUaServer interface provides a set of generic server callback methods. These methods can be used to read
                    information from the generic server or change
                    data in the generic server. They are always called by the customization plugin.
                </para>
                <para>It also defines classes and enumerators used in the data exchange with the generic server</para>
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServer.Licensee">
            <summary>
                The license owner of the license information provided by
                <see cref="M:Technosoftware.UaServer.IUaServerPlugin.OnGetLicenseInformation(Opc.Ua.LicenseHandler.LicenseEdition@,System.String@)" />
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServer.Product">
            <summary>The product the license was issued for.</summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServer.LicensedAt">
            <summary>The date the license was issued.</summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServer.ServiceExpired">
            <summary>Indicates wether the service subscription or evaluation period is expired.</summary>
            <remarks>
                <para>
                    <strong>Service Subscription:</strong>
                </para>
                <para>
                    Each product or Maintenance package includes one year of free updates. This means that it is possible to use
                    all licensed products released until
                    <see cref="P:Technosoftware.UaServer.IUaServer.LicensedAt" /> plus one year. A product version build after the <see cref="P:Technosoftware.UaServer.IUaServer.LicensedAt" /> plus one
                    year date can not be used with this license. In this case this
                    property is set to true and the product is turned into an evaluation version.
                </para>
                <para>
                    <strong>
                        <em>
                            Of course, a correct combination of license and product can be used as long as you want. It's just not
                            possible to update to a product
                            version newer than <see cref="P:Technosoftware.UaServer.IUaServer.LicensedAt" /> plus one year.
                        </em>
                    </strong>
                </para>
                <para>
                    <strong>Evaluation Period:</strong>
                </para>
                <para>If the evaluation period is expired this property is set to true.</para>
            </remarks>
            <value>True if either the service subscription or evaluation period expired; false otherwise</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServer.RestartRequired">
            <summary>
                Indicates whether the server must be restarted. This is mainly the case if the server is used in evaluation mode
                and the 90 minutes evaluation time expired.
            </summary>
            <remarks>As long as the ServiceExpired flag is false a restart of the server is possible.</remarks>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServer.SystemContext">
            <summary>
                The default context to use.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServer.NamespaceIndexes">
            <summary>
                Gets the namespace indexes owned by the node manager.
            </summary>
            <value>The namespace indexes.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServer.NamespaceUris">
            <summary>
                The table of namespace uris known to the server.
            </summary>
            <value>The namespace URIs.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServer.NodeManager">
            <summary>
                Get the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServer.CurrentState">
            <summary>
                Returns the current state of the server.
            </summary>
            <returns>Returns the current state of the server.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.Shutdown">
            <summary>Requests a shutdown of the server.</summary>
            <returns>
                A <see cref="T:Opc.Ua.StatusCodes" /> code with the result of the operation. Returning an error code indicates that the
                server can't be stopped.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.GetEndpoints">
            <summary>Returns information about the endpoints supported by the server.</summary>
            <returns>Returns a list of Endpoint information's.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.GetSessions">
            <summary>
                Returns all of the sessions known to the session manager.
            </summary>
            <returns>A list of the sessions.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.GetSubscriptions">
            <summary>
                Returns all of the subscriptions known to the server.
            </summary>
            <returns>A list of the subscriptions.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.LoadNodes(System.String,System.Object)">
            <summary>
                Loads a node set from a resource and addes them to the set of predefined nodes.
            </summary>
            <param name="resourceName">The name of the resource to be loaded</param>
            <param name="externalReferences">
                <para>The externalReferences is an out parameter that allows the generic server to link to nodes.</para>
            </param>
            <remark>Professional Edition Feature</remark>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.FindNode(Opc.Ua.NodeId)">
            <summary>
                Returns the state object for the specified node if it exists.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.FindNode(Opc.Ua.NodeId,System.Type)">
            <summary>
                Finds the specified node and checks if it is of the expected type.
            </summary>
            <param name="nodeId">The node to search for.</param>
            <param name="expectedType">The expected type of the node.</param>
            <returns>Returns null if not found or not of the correct type.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.FindNode(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
                Finds a node in the dynamic cache.
            </summary>
            <param name="context">The UA server implementation of the ISystemContext interface.</param>
            <param name="handle">The handle of the node to validate.</param>
            <param name="cache">The cached nodes</param>
            <returns>Returns null if not found or the node object.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.AddNode(Opc.Ua.NodeState)">
            <summary>
                Recursively indexes the node and its children and adds it to the predefined nodes
            </summary>
            <param name="node">The node to be added.</param>
            <remark>Profession Edition Feature</remark>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.DeleteNode(Opc.Ua.NodeId)">
            <summary>
                Deletes a node and all of its children.
            </summary>
            <param name="nodeId">The node Id of the node to be removed.</param>
            <remark>Profession Edition Feature</remark>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)">
            <summary>Creates a new folder.</summary>
            <param name="parent">The parent node object the new folder will be created in.</param>
            <param name="path">
                The full path of the new folder, e.g.
                <font color="#A31515" size="2" face="Consolas">
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">/Static/Simple Types</font>
                    </font>
                </font>
            </param>
            <param name="name">
                The name of the new folder, e.g. <font color="#A31515" size="2" face="Consolas">Simple Types</font>
            </param>
            <returns>The created folder object which can be used in further calls to <see cref="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" />.</returns>
            <example>
                <para>
                    <font color="blue" size="2" face="Consolas">
                        <font color="blue" size="2" face="Consolas">
                            <font color="blue" size="2" face="Consolas">object</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">root = _opcServer.CreateFolder(</font>
                    </font>
                    <font color="blue" size="2" face="Consolas">
                        <font color="blue" size="2" face="Consolas">
                            <font color="blue" size="2" face="Consolas">null</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"/DataAccess"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"DataAccess"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">);</font>
                    </font>
                </para>
                <para>
                    <font color="blue" size="2" face="Consolas">
                        <font color="blue" size="2" face="Consolas">
                            <font color="blue" size="2" face="Consolas">object</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">folder1 = _opcServer.CreateFolder(root,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"/Static"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"Static"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">);</font>
                    </font>
                </para>
            </example>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateBaseObject(Opc.Ua.NodeState,System.String,System.String)">
            <summary>
                <para>Creates a new object.</para>
            </summary>
            <param name="parent">The parent folder object the new object will be created in.</param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new object, e.g. <font color="#A31515" size="2" face="Consolas">Object1</font>
            </param>
            <remarks>Not yet fully implemented.</remarks>
            <returns>The created object.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateProperty(Opc.Ua.BaseObjectState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object)">
            <summary>
                <para>Creates a new property.</para>
            </summary>
            <param name="parent">The parent object the new property will be added to.</param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new method, e.g. <font color="#A31515" size="2" face="Consolas">Method1</font>
            </param>
            <remarks>Not yet fully implemented.</remarks>
            <param name="dataType">
                The data type of the new variable, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <returns>The created property object.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateView(Opc.Ua.NodeState,System.Object,System.String,System.String)">
            <summary>Creates a new view.</summary>
            <param name="externalReferences">
                <para>The externalReferences is an out parameter that allows the generic server to link to nodes.</para>
            </param>
            <param name="parent">The folder object returned by a call to <see cref="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new view will be added to.</param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">The name of the new view, e.g. <font color="#A31515" size="2" face="Consolas">View1</font></param>
            <remarks>Professional Edition feature.</remarks>
            <returns>The created <see cref="T:Opc.Ua.ViewState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateBaseObjectType(Opc.Ua.NodeState,System.Object,System.String,System.String)">
            <summary>
                <para>Creates a new object type.</para>
            </summary>
            <param name="externalReferences">
                <para>The externalReferences is an out parameter that allows the generic server to link to nodes.</para>
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="parent">The parent folder object the new object type will be created in.</param>
            <param name="name">
                The name of the new object type, e.g.
                <font color="#A31515" size="2" face="Consolas">ObjectType1</font>
            </param>
            <returns>The created <see cref="T:Opc.Ua.BaseObjectTypeState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateBaseVariableType(Opc.Ua.NodeState,System.Object,System.String,System.String,Opc.Ua.BuiltInType,System.Int32)">
            <summary>
                <para>Creates a new variable type.</para>
            </summary>
            <param name="externalReferences">
                <para>The externalReferences is an out parameter that allows the generic server to link to nodes.</para>
            </param>
            <param name="parent">The parent folder object the new variable type will be created in.</param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g.
                <font color="#A31515" size="2" face="Consolas">VariableType1</font>
            </param>
            <param name="valueRank">
                The value rank of the new variable type, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="dataType">
                The data type of the new variable type, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <returns>The created <see cref="T:Opc.Ua.BaseVariableTypeState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateReferenceType(Opc.Ua.NodeState,System.Object,System.String,System.String)">
            <summary>
                <para>Creates a new reference type.</para>
            </summary>
            <param name="parent">The parent folder object the new reference type will be created in.</param>
            <param name="externalReferences">
                <para>The externalReferences is an out parameter that allows the generic server to link to nodes.</para>
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new reference tyoe, e.g.
                <font color="#A31515" size="2" face="Consolas">ReferenceType1</font>
            </param>
            <returns>The created <see cref="T:Opc.Ua.ReferenceTypeState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateDataType(Opc.Ua.NodeState,System.Object,System.String,System.String)">
            <summary>Creates a new data type.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new data type will be
                added to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new data type, e.g. <font color="#A31515" size="2" face="Consolas">DataType1</font>
            </param>
            <param name="externalReferences">
                <para>The externalReferences is an out parameter that allows the generic server to link to nodes.</para>
            </param>
            <returns>The created data type object</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateBaseDataVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object)">
            <summary>Creates a new variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <remarks>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two
                nodes within an address-space share the same ID's.
            </remarks>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="dataType">
                The data type of the new variable, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <returns>The created <see cref="T:Opc.Ua.BaseDataVariableState" /></returns>
            <example>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">_opcServer.CreateBaseDataVariable(folder3, nodeId++,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">
                                "/Static/All
                                Profiles/Scalar/Double"
                            </font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"Double"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">, BuiltInType.Double, ValueRanks.Scalar, AccessLevels.CurrentReadOrWrite);</font>
                    </font>
                </para>
                <code title="" description="" lang="neutral"></code>
            </example>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateBaseDataVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.NodeId,System.Int32,System.Byte,System.Object)">
            <summary>Creates a new variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <remarks>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two
                nodes within an address-space share the same ID's.
            </remarks>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="nodeId">
                The Node Id of the node used as data type of the new variable.
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <returns>The created <see cref="T:Opc.Ua.BaseDataVariableState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateBaseDataVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.ExpandedNodeId,System.Int32,System.Byte,System.Object)">
            <summary>Creates a new variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <remarks>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two
                nodes within an address-space share the same ID's.
            </remarks>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="expandedNodeId">
                The Expanded Node Id of the node used as data type of the new variable.
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <returns>The created <see cref="T:Opc.Ua.BaseDataVariableState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateMeshVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object,Opc.Ua.NodeState[])">
            <summary>Creates a new meshed variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="dataType">
                The data type of the new variable, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <param name="peers">
                The peers the mesh is created with. Each peer has references to the variable with
                <see cref="F:Opc.Ua.ReferenceTypes.HasCause" /> and <see cref="F:Opc.Ua.ReferenceTypes.HasEffect" />. Also each
                variable has references to wach peer with <see cref="F:Opc.Ua.ReferenceTypes.HasCause" /> and
                <see cref="F:Opc.Ua.ReferenceTypes.HasEffect" />.
            </param>
            <remarks>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two
                nodes within an address-space share the same ID's.
            </remarks>
            <returns>The created <see cref="T:Opc.Ua.BaseDataVariableState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.WriteBaseVariable(Opc.Ua.BaseVariableState,System.Object,Opc.Ua.StatusCode,System.DateTime)">
            <summary>Writes to a variable.</summary>
            <param name="deviceItem">The <see cref="T:Opc.Ua.BaseVariableState" /> including the identifier.</param>
            <param name="newValue">Object with new item value.</param>
            <param name="statusCode">CreateNodeId status code of the item value.</param>
            <param name="timestamp">CreateNodeId timestamp of the new item value.</param>
            <returns>A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateDataItem(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object,System.Double)">
            <summary>Creates a new DataItem variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="dataType">
                The data type of the new variable, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <param name="valuePrecision">
                <para>
                    Specifies the maximum precision that the server can maintain for the item based on restrictions in the target
                    environment. The precision can be used for the
                    following DataTypes:
                </para>
                <list type="bullet">
                    <item>For Float and Double values it specifies the number of digits after the decimal place.</item>
                    <item>
                        For DateTime values it indicates the minimum time difference in nanoseconds. E.g., a precision of
                        20000000 defines a precision of 20 milliseconds.
                    </item>
                </list>
            </param>
            <returns>The created <see cref="T:Opc.Ua.DataItemState" /></returns>
            <example>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">_opcServer.CreateDataItem(folder111, nodeId++,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">
                                "/Static/Simple
                                Types/In/String"
                            </font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"String"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">, BuiltInType.String, ValueRanks.Scalar, AccessLevels.CurrentRead, 2);</font>
                    </font>
                </para>
                <code title="" description="" lang="neutral"></code>
            </example>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateAnalogItem(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object,System.Double,Opc.Ua.Range,Opc.Ua.Range,System.String)">
            <summary>Creates a new AnalogItem variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="dataType">
                The data type of the new variable, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <param name="valuePrecision">
                <para>
                    Specifies the maximum precision that the server can maintain for the item based on restrictions in the target
                    environment. The precision can be used for the
                    following DataTypes:
                </para>
                <list type="bullet">
                    <item>For Float and Double values it specifies the number of digits after the decimal place.</item>
                    <item>
                        For DateTime values it indicates the minimum time difference in nanoseconds. E.g., a precision of
                        20000000 defines a precision of 20 milliseconds.
                    </item>
                </list>
            </param>
            <param name="instrumentRange">
                The instrument range defines the value <see cref="T:Opc.Ua.Range" /> that can be returned by the
                instrument.
            </param>
            <param name="euRange">
                <para>
                    The engineering unit range defines the value <see cref="T:Opc.Ua.Range" /> likely to be obtained in normal operation. It
                    is intended for such use as automatically
                    scaling a bar graph display.
                </para>
                <para>
                    Senso or instrument failure or deactivation can result in a returned item value which is actually outside
                    this range.
                </para>
            </param>
            <param name="unitName">The engineering unit name specifies the units for the item value, e.g. hertz, seconds, litres</param>
            <returns>The created <see cref="T:Opc.Ua.AnalogItemState" /></returns>
            <example>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">_opcServer.CreateDataItem(folder111, nodeId++,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">
                                "/Static/Simple
                                Types/In/String"
                            </font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"String"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">, BuiltInType.String, ValueRanks.Scalar, AccessLevels.CurrentRead);</font>
                    </font>
                </para>
                <code title="" description="" lang="neutral"></code>
            </example>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateTwoStateDiscreteItem(Opc.Ua.NodeState,System.String,System.String,System.Byte,System.Boolean,System.String,System.String)">
            <summary>Creates a new two state variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g.
                <font color="#A31515" size="2" face="Consolas">
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">TwoState1</font>
                        </font>
                    </font>
                </font>
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <param name="trueState">
                Defines the string to be associated with this variable when it is TRUE. This is typically used for a contact when
                it is in the closed (non-zero)
                state.
            </param>
            <param name="falseState">
                Defines the string to be associated with this variable when it is FALSE. This is typically
                used for a contact when it is in the open(zero) state.
            </param>
            <returns>The created <see cref="T:Opc.Ua.TwoStateDiscreteState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateMultiStateDiscreteItem(Opc.Ua.NodeState,System.String,System.String,System.Byte,System.Object,System.String[])">
            <summary>Creates a new multi state variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.IUaServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g.
                <font color="#A31515" size="2" face="Consolas">
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">MultiState1</font>
                        </font>
                    </font>
                </font>
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <param name="values">The possible values the multistate variable can have.</param>
            <returns>The created <see cref="T:Opc.Ua.MultiStateDiscreteState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateArgument(System.String,System.String,Opc.Ua.BuiltInType,System.Int32)">
            <summary>Creates a new argument.</summary>
            <param name="name">
                The name of the new argument, e.g.
                <font color="#A31515" size="2" face="Consolas">Initial State</font>
            </param>
            <param name="description">
                The description of the new argument, e.g.
                <font color="#A31515" size="2" face="Consolas">The initialize state for the process.</font>
            </param>
            <param name="dataType">
                The data type of the new argument, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new argument, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <returns>The created argument</returns>
            <remarks>Professional Edition feature.</remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.CreateMethod(Opc.Ua.BaseObjectState,System.String,System.String,Opc.Ua.MethodCallEventHandler)">
            <summary>
                <para>Creates a new method.</para>
                <para>
                    Nodes of the type Method represent a method, that is, something that is called by a client and returns a
                    result.
                </para>
            </summary>
            <param name="parent">The parent object the new method will be created in.</param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new method, e.g. <font color="#A31515" size="2" face="Consolas">Method1</font>
            </param>
            <param name="callingMethod">The method which will be called if the method is executed.</param>
            <returns>The created method object.</returns>
            <remarks>Professional Edition feature.</remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.AddInputArguments(Opc.Ua.MethodState,System.Object,Opc.Ua.Argument[])">
            <summary>Adds the input arguments to a method.</summary>
            <param name="parent">The method object.</param>
            <param name="nodeId">
                The unique identifier for the variable in the server's address space. The NodeId can be either:
                <list type="bullet">
                    <item>
                        <see cref="T:System.UInt32" />
                    </item>
                    <item>
                        <see cref="T:System.Guid" />
                    </item>
                    <item>
                        <see cref="T:System.String" />
                    </item>
                    <item><see cref="T:System.Byte" />[]</item>
                </list>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two nodes within an
                address-space share the same ID's.
            </param>
            <param name="inputArguments">The input arguments.</param>
            <returns>A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation.</returns>
            <remarks>Professional Edition feature.</remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.AddOutputArguments(Opc.Ua.MethodState,System.Object,Opc.Ua.Argument[])">
            <summary>Adds the output arguments to a method.</summary>
            <param name="parent">The method object.</param>
            <param name="nodeId">
                The unique identifier for the variable in the server's address space. The NodeId can be either:
                <list type="bullet">
                    <item>
                        <see cref="T:System.UInt32" />
                    </item>
                    <item>
                        <see cref="T:System.Guid" />
                    </item>
                    <item>
                        <see cref="T:System.String" />
                    </item>
                    <item><see cref="T:System.Byte" />[]</item>
                </list>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two nodes within an
                address-space share the same ID's.
            </param>
            <param name="outputArguments">The output arguments.</param>
            <returns>A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation.</returns>
            <remarks>Professional Edition feature.</remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.AddRootNotifier(Opc.Ua.NodeState)">
            <summary>
                Adds a root notifier.
            </summary>
            <param name="notifier">The notifier.</param>
            <remarks>
                A root notifier is a notifier owned by the NodeManager that is not the target of a
                HasNotifier reference. These nodes need to be linked directly to the Server object.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.RemoveRootNotifier(Opc.Ua.NodeState)">
            <summary>
                Removes a root notifier previously added with AddRootNotifier.
            </summary>
            <param name="notifier">The notifier.</param>
            <remarks>
                A root notifier is a notifier owned by the NodeManager that is not the target of a
                HasNotifier reference. These nodes need to be linked directly to the Server object.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.ReportEvent(Opc.Ua.IFilterTarget)">
            <summary>
                Can be called to report a global event.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServer.GetNewSimulatedValue(Opc.Ua.BaseVariableState)">
            <summary>Generates a simulated value for each of the supported data types.</summary>
            <param name="deviceItem">The <see cref="T:Opc.Ua.BaseVariableState" /> a new value should generated for.</param>
            <returns>The new value for the specified <see cref="T:Opc.Ua.BaseVariableState" /></returns>
            <example>
                <para>
                    <font color="blue" size="2" face="Consolas">
                        <font color="blue" size="2" face="Consolas">
                            <font color="blue" size="2" face="Consolas">foreach</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">(</font>
                    </font>
                    <font color="#2B91AF" size="2" face="Consolas">
                        <font color="#2B91AF" size="2" face="Consolas">
                            <font color="#2B91AF" size="2" face="Consolas">BaseVariableState</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">deviceItem</font>
                    </font>
                    <font color="blue" size="2" face="Consolas">
                        <font color="blue" size="2" face="Consolas">
                            <font color="blue" size="2" face="Consolas">in</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">_dynamicNodes)</font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">{</font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">
                            deviceItem.Value =
                            _opcServer.GetNewSimulatedValue(deviceItem);
                        </font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">    deviceItem.StatusCode =</font>
                    </font>
                    <font color="#2B91AF" size="2" face="Consolas">
                        <font color="#2B91AF" size="2" face="Consolas">
                            <font color="#2B91AF" size="2" face="Consolas">StatusCodes</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">.Good;</font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">    deviceItem.Timestamp =</font>
                    </font>
                    <font color="#2B91AF" size="2" face="Consolas">
                        <font color="#2B91AF" size="2" face="Consolas">
                            <font color="#2B91AF" size="2" face="Consolas">DateTime</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">.UtcNow;</font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">    _opcServer.WriteVariable(deviceItem);</font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">}</font>
                    </font>
                </para>
                <code title="" description="" id="06504386-1408-4995-807a-6c6f6d174c14" lang="neutral"></code>
            </example>
        </member>
        <member name="T:Technosoftware.UaServer.IUaServerData">
            <summary>
                <para>IUaServerData is an interface to a server object that provides the shared components for the UA Server.</para>
                <para>
                    The different manager objects use this interface to access shared tables such as the set of NamespaceUris or
                    the ServerStatus.
                </para>
                <para>
                    Any implementation of IUaServerData must be thread safe. The flow of calls must always be one way � from one
                    component of the server to the IUaServerData
                    object. Properties of the IUaServerData may return other objects which will have their own rules regarding to
                    call flow.
                </para>
            </summary>
            <remarks>
                The BaseServerData object is the standard implementation of this interface. Developers can extend this class to add
                additional shared data.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.EndpointAddresses">
            <summary>
            The endpoint addresses used by the server.
            </summary>
            <value>The endpoint addresses.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.MessageContext">
            <summary>
            The context to use when serializing/deserializing extension objects.
            </summary>
            <value>The message context.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.DefaultSystemContext">
            <summary>
            The default system context for the server.
            </summary>
            <value>The default system context.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.NamespaceUris">
            <summary>
            The table of namespace uris known to the server.
            </summary>
            <value>The namespace URIs.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.ServerUris">
            <summary>
            The table of remote server uris known to the server.
            </summary>
            <value>The server URIs.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.Factory">
            <summary>
            The factory used to create encodeable objects that the server understands.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.TypeTree">
            <summary>
            The datatypes, object types and variable types known to the server.
            </summary>
            <value>The type tree.</value>
            <remarks>
            The type tree table is a global object that all components of a server have access to.
            Node managers must populate this table with all types that they define. 
            This object is thread safe.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.NodeManager">
            <summary>
            The master node manager for the server.
            </summary>
            <value>The node manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.CoreNodeManager">
            <summary>
            The internal node manager for the servers.
            </summary>
            <value>The core node manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.DiagnosticsNodeManager">
            <summary>
                Returns the node manager that manages the server diagnostics.
            </summary>
            <value>The diagnostics node manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.EventManager">
            <summary>
            The manager for events that all components use to queue events that occur.
            </summary>
            <value>The event manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.ResourceManager">
            <summary>
            A manager for localized resources that components can use to localize text.
            </summary>
            <value>The resource manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.RequestManager">
            <summary>
            A manager for outstanding requests that allows components to receive notifications if the timeout or are cancelled.
            </summary>
            <value>The request manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.AggregateManager">
            <summary>
            A manager for aggregate calculators supported by the server.
            </summary>
            <value>The aggregate manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.SessionManager">
            <summary>
            The manager for active sessions.
            </summary>
            <value>The session manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.SubscriptionManager">
            <summary>
            The manager for active subscriptions.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.IsRunning">
            <summary>
            Whether the server is currently running.
            </summary>
            <value>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
            <remarks>
            This flag is set to false when the server shuts down. Threads running should check this flag whenever
            they return from a blocking operation. If it is false the thread should clean up and terminate.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.Status">
            <summary>
            Returns the status object for the server. Use Status.Lock to make it thread safe
            </summary>
            <example>
            lock (server.Status.Lock)
            {
               server.Status.Variable.CurrentTime.MinimumSamplingInterval = 250;
            }
            </example>
            <value>The status.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.CurrentState">
            <summary>
            Gets or sets the current state of the server.
            </summary>
            <value>The state of the current.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.DiagnosticsLock">
            <summary>
            Used to synchronize access to the server diagnostics.
            </summary>
            <value>The diagnostics lock.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.DiagnosticsWriteLock">
            <summary>
            Used to synchronize write access to the server diagnostics.
            </summary>
            <value>The diagnostics lock.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.ServerDiagnostics">
            <summary>
            Returns the diagnostics structure for the server.
            </summary>
            <value>The server diagnostics.</value>
        </member>
        <member name="P:Technosoftware.UaServer.IUaServerData.DiagnosticsEnabled">
            <summary>
            Whether the server is collecting diagnostics.
            </summary>
            <value><c>true</c> if diagnostics is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerData.CloseSession(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Closes the specified session.
            </summary>
            <param name="context">The context.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="deleteSubscriptions">if set to <c>true</c> subscriptions are to be deleted.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerData.DeleteSubscription(System.UInt32)">
            <summary>
            Deletes the specified subscription.
            </summary>
            <param name="subscriptionId">The subscription identifier.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerData.ReportEvent(Opc.Ua.IFilterTarget)">
            <summary>
            Called by any component to report a global event.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerData.ReportEvent(Opc.Ua.ISystemContext,Opc.Ua.IFilterTarget)">
            <summary>
            Called by any component to report a global event.
            </summary>
            <param name="context">The context.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerData.ConditionRefresh(Technosoftware.UaServer.UaServerOperationContext,System.UInt32)">
            <summary>
            Refreshes the conditions for the specified subscription.
            </summary>
            <param name="context">The context.</param>
            <param name="subscriptionId">The subscription identifier.</param>
        </member>
        <member name="T:Technosoftware.UaServer.IUaServerPlugin">
            <summary>
                <para>OPC Server Plugin Interface</para>
                <para>
                    This interface defines the server plugin interface. This interface must be implemented by the server plugin
                    assembly.
                </para>
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerPlugin.OnGetLicenseInformation(Opc.Ua.LicenseHandler.LicenseEdition@,System.String@)">
            <summary>
                This method is called from the generic server to get the license information.
            </summary>
            <param name="productEdition">Product Edition</param>
            <param name="serialNumber">Serial Number</param>
            <remarks>
                Returning an empty string for the serial number activates the evaluation version of the OPC UA Server SDK .NET Standard. The evaluation allows
                the usage of the full product for 30 days.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerPlugin.OnStartup(System.String[])">
            <summary>This method is the first method called from the generic server at the startup.</summary>
            <param name="args">
                String array with the command line parameters as they were specified when the server was being
                started.
            </param>
            <remarks>
                <para>The following command line parameters are handled by the generic server:</para>
                <list type="bullet">
                    <item>
                        /silent<br />
                        No output is done during startup of the server
                    </item>
                    <item>
                        /configfile<br />
                        Allows the definition of a specific application configuration file
                    </item>
                    <item>
                        /install<br />
                        Installs and configures the application according the configuration file, e.g. certificates are created and
                        firewall configured.
                    </item>
                    <item>
                        /uninstall<br />
                        Uninstalls the application by removing the changes made during installation.
                    </item>
                </list>
            </remarks>
            <returns>
                A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation. Returning an error code stops the further
                server execution.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerPlugin.OnGetNamespaceUris">
            <summary>
                Defines namespaces used by the application.
            </summary>
            <returns>Array of namespaces that are used by the application.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerPlugin.OnInitialized(Technosoftware.UaServer.IUaServer,Opc.Ua.ApplicationConfiguration)">
            <summary>
                This method is called after the node manager is initialized, after the call to OnGetNamespaceUris() and before
                the call to OnCreateAddressSpace().
            </summary>
            <param name="opcServer">The generic server object. Used to call methods the generic server provides.</param>
            <param name="configuration">The application configuration.</param>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerPlugin.OnCreateAddressSpace(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
                <para>
                    This method is called from the generic server at the startup; when the first client connects or the service is
                    started. All items supported by the server need to be defined by calling the methods provided by the
                    <see cref="T:Technosoftware.UaServer.IUaServer">IUaServer</see> interface for each item.
                </para>
            </summary>
            <param name="externalReferences">The externalReferences allows the generic server to link to the general nodes.</param>
            <returns>The root folder.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerPlugin.OnRunning">
            <summary>
                This method is called from the generic server when the server was successfully started and is running.
            </summary>
            <remarks>This method should only return if the server should be stopped.</remarks>
            <returns>
                A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation. Returning from this method stops the
                further server execution.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerPlugin.OnShutdown(Opc.Ua.ServerState,System.String,System.Exception)">
            <summary>
                <para>This method is called from the generic server when a Shutdown is executed.</para>
                <para>
                    To ensure proper process shutdown, any communication channels should be closed and all threads terminated
                    before this method returns.
                </para>
            </summary>
            <param name="serverState">The current state of the server.</param>
            <param name="reason">The reason why the server shutdowns.</param>
            <param name="exception">The exception which caused an error. null if not an exception.</param>
            <returns>A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerPlugin.OnGetServerProperties">
            <summary>
                This method is called from the generic server when the OPC Server Properties of the current server instance
                are requested by a client.
            </summary>
            <returns>An <see cref="T:Opc.Ua.ServerProperties">ServerProperties</see> object.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.IUaServerPlugin.OnWriteBaseVariable(Opc.Ua.BaseVariableState,System.Object@,Opc.Ua.StatusCode@,System.DateTime@)">
            <summary>
                <para>
                    This method is called when a client executes a 'write' server call. The <see cref="T:Opc.Ua.BaseDataVariableState" />
                    includes all information required to identify the item as
                    well as original (unmodified) value, timestamp and quality. Depending on the returned result code the cache is
                    updated or not in the generic server after
                    returning from this method.
                </para>
                <para>
                    <strong>Important:</strong> This method is only called for nodes created with
                </para>
                <list type="bullet">
                    <item>
                        <para>
                            <font size="2" face="Consolas">
                                <font size="2" face="Consolas">
                                    <see cref="M:Technosoftware.UaServer.IUaServer.CreateBaseDataVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object)">CreateBaseDataVariable</see>
                                </font>
                            </font>
                        </para>
                    </item>
                    <item>
                        <para>
                            <font size="2" face="Consolas">
                                <font size="2" face="Consolas">
                                    <font size="2" face="Consolas">
                                        <font size="2" face="Consolas">
                                            <see cref="M:Technosoftware.UaServer.IUaServer.CreateMeshVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object,Opc.Ua.NodeState[])">CreateMeshVariable</see>
                                        </font>
                                    </font>
                                </font>
                            </font>
                        </para>
                    </item>
                    <item>
                        <para>
                            <font size="2" face="Consolas">
                                <font size="2" face="Consolas">
                                    <see cref="M:Technosoftware.UaServer.IUaServer.CreateDataItem(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object,System.Double)">CreateDataItem</see>
                                </font>
                            </font>
                        </para>
                    </item>
                    <item>
                        <para>
                            <font size="2" face="Consolas">
                                <font size="2" face="Consolas">
                                    <font size="2" face="Consolas">
                                        <font size="2" face="Consolas">
                                            <see cref="M:Technosoftware.UaServer.IUaServer.CreateAnalogItem(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object,System.Double,Opc.Ua.Range,Opc.Ua.Range,System.String)">CreateAnalogItem</see>
                                        </font>
                                    </font>
                                </font>
                            </font>
                        </para>
                    </item>
                    <item>
                        <para>
                            <font size="2" face="Consolas">
                                <font size="2" face="Consolas">
                                    <font size="2" face="Consolas">
                                        <font size="2" face="Consolas">
                                            <font size="2" face="Consolas">
                                                <font size="2" face="Consolas">
                                                    <see cref="M:Technosoftware.UaServer.IUaServer.CreateTwoStateDiscreteItem(Opc.Ua.NodeState,System.String,System.String,System.Byte,System.Boolean,System.String,System.String)">CreateTwoStateDiscreteItem</see>
                                                </font>
                                            </font>
                                        </font>
                                    </font>
                                </font>
                            </font>
                        </para>
                    </item>
                    <item>
                        <para>
                            <font size="2" face="Consolas">
                                <font size="2" face="Consolas">
                                    <see cref="M:Technosoftware.UaServer.IUaServer.CreateMultiStateDiscreteItem(Opc.Ua.NodeState,System.String,System.String,System.Byte,System.Object,System.String[])">CreateMultiStateDiscreteItem</see>
                                </font>
                            </font>
                        </para>
                    </item>
                </list>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">
                            <font size="2" face="Consolas">
                                <font size="2" face="Consolas"></font>
                            </font>
                        </font>
                    </font>
                </para>
            </summary>
            <param name="originalVariableState">
                The <see cref="T:Opc.Ua.BaseVariableState" /> of the variable including the original state
                of the variable. Can be used to check what changes happens
            </param>
            <param name="value">
                The value which should be written. The returned value is used for updating the cache depending on
                the returned result code.
            </param>
            <param name="statusCode">A <see cref="T:Opc.Ua.StatusCode" /> code which should be used as new status code for the value.</param>
            <param name="timestamp">
                The timestamp the value was written. The returned value is used for updating the cache
                depending on the returned result code.
            </param>
            <remarks>
                <para>The following rules apply for updating the cache base on the returned StatusCode:</para>
                <list type="number">
                    <item>If the returned value is Bad (something like Bad...) the cache is not updated with timestamp and value.</item>
                    <item>
                        If the returned value is GoodCompletesAsynchronously the cache is not updated with timestamp and value.
                        After the customization DLL has finished its
                        operation it can use WriteBaseVariable to update the cache.
                    </item>
                    <item>In all other cases the cache is updated with timestamp and value.</item>
                    <item>In all cases the status code is updated with the status code set in the 'statusCode' parameter.</item>
                </list>
            </remarks>
            <returns>A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation.</returns>
        </member>
        <member name="T:Technosoftware.UaServer.IUaSessionManager">
            <summary>
                Allows application components to receive notifications when changes to sessions occur.
            </summary>
            <remarks>
                Sinks that receive these events must not block the thread.
            </remarks>
        </member>
        <member name="E:Technosoftware.UaServer.IUaSessionManager.SessionCreatedEvent">
            <summary>
                Raised after a new session is created.
            </summary>
        </member>
        <member name="E:Technosoftware.UaServer.IUaSessionManager.SessionActivatedEvent">
            <summary>
                Raised whenever a session is activated and the user identity or preferred locales changed.
            </summary>
        </member>
        <member name="E:Technosoftware.UaServer.IUaSessionManager.SessionClosingEvent">
            <summary>
                Raised before a session is closed.
            </summary>
        </member>
        <member name="E:Technosoftware.UaServer.IUaSessionManager.ImpersonateUserEvent">
            <summary>
                Raised before the user identity for a session is changed.
            </summary>
        </member>
        <member name="E:Technosoftware.UaServer.IUaSessionManager.ValidateSessionLessRequestEvent">
            <summary>
            Raised before the user identity for a session is changed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaSessionManager.GetSessions">
            <summary>
                Returns all of the sessions known to the session manager.
            </summary>
            <returns>A list of the sessions.</returns>
        </member>
        <member name="T:Technosoftware.UaServer.ValidateSessionLessRequestEventArgs">
            <summary>
            A class which provides the event arguments for session related event.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.ValidateSessionLessRequestEventArgs.#ctor(Opc.Ua.NodeId,Technosoftware.UaServer.Sessions.RequestType)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.ValidateSessionLessRequestEventArgs.RequestType">
            <summary>
            The request type for the request.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.ValidateSessionLessRequestEventArgs.AuthenticationToken">
            <summary>
            The new user identity for the session.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.ValidateSessionLessRequestEventArgs.Identity">
            <summary>
            The identity to associate with the session-less request.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.ValidateSessionLessRequestEventArgs.Error">
            <summary>
            Set to indicate that an error occurred validating the session-less request and that it should be rejected.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.IUaSubscription">
            <summary>
            An interface used by the monitored items to signal the subscription.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaSubscription.Session">
            <summary>
            The session that owns the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.IUaSubscription.Id">
            <summary>
            The identifier for the item that is unique within the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaSubscription.ItemReadyToPublish(Technosoftware.UaServer.IUaMonitoredItem)">
            <summary>
            Called when a monitored item is ready to publish.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaSubscription.ItemNotificationsAvailable(Technosoftware.UaServer.IUaMonitoredItem)">
            <summary>
            Called when a monitored item is ready to publish.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaSubscription.QueueOverflowHandler">
            <summary>
            Called when a value of monitored item is discarded in the monitoring queue.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.IUaSubscriptionManager">
            <summary>
            Provides access to the subscription manager within the server.
            </summary>
            <remarks>
            Sinks that receive these events must not block the thread.
            </remarks>
        </member>
        <member name="E:Technosoftware.UaServer.IUaSubscriptionManager.SubscriptionCreated">
            <summary>
            Raised after a new subscription is created.
            </summary>
        </member>
        <member name="E:Technosoftware.UaServer.IUaSubscriptionManager.SubscriptionDeleted">
            <summary>
            Raised before a subscription is deleted.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.IUaSubscriptionManager.GetSubscriptions">
            <summary>
            Returns all of the subscriptions known to the subscription manager.
            </summary>
            <returns>A list of the subscriptions.</returns>
        </member>
        <member name="T:Technosoftware.UaServer.LicenseHandler">
            <summary>
                Manages the license to enable the different product versions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.LicenseHandler.Validate(Opc.Ua.LicenseHandler.LicenseEdition,System.String)">
            <summary>
                Validate the license.
            </summary>
            <param name="productEdition">Product Edition</param>
            <param name="serialNumber">Serial Number</param>
            <returns>True if the license is a valid license; false otherwise</returns>
        </member>
        <member name="T:Technosoftware.UaServer.Namespaces">
            <summary>
                Defines constants for namespaces used by the application.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.Namespaces.GenericServer">
            <summary>
                The namespace for the nodes provided by the server.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.NodeManager.CoreNodeManager">
            <summary>
            The default node manager for the server.
            </summary>
            <remarks>
            Every Server has one instance of this NodeManager. 
            It stores objects that implement ILocalNode and indexes them by NodeId.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.#ctor(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration,System.UInt16)">
            <summary>
            Initializes the object with default values.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.CoreNodeManager.DataLock">
            <summary>
            Acquires the lock on the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.CoreNodeManager.Lock">
            <summary>
                Acquires the lock on the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.CoreNodeManager.AliasRoot">
            <summary>
                The root for the alias assigned to the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.CoreNodeManager.MonitoredNodes">
            <summary>
                The predefined nodes managed by the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.CoreNodeManager.PredefinedNodes">
            <summary>
                Gets the table of nodes being monitored.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.IsNodeIdInNamespace(Opc.Ua.NodeId)">
            <summary>
                Returns true if the namespace for the node id is one of the namespaces managed by the node manager.
            </summary>
            <param name="nodeId">The node id to check.</param>
            <returns>True if the namespace is one of the nodes.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.IsNodeInView(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Object)">
            <summary>
                Returns true if the node is in the view.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.ImportNodes(Opc.Ua.ISystemContext,System.Collections.Generic.IEnumerable{Opc.Ua.NodeState})">
            <summary>
            Imports the nodes from a dictionary of NodeState objects.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.ImportNodes(Opc.Ua.ISystemContext,System.Collections.Generic.IEnumerable{Opc.Ua.NodeState},System.Boolean)">
            <summary>
            Imports the nodes from a dictionary of NodeState objects.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.CoreNodeManager.NamespaceUris">
            <summary cref="P:Technosoftware.UaServer.IUaNodeManager.NamespaceUris" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.CreateAddressSpace(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary cref="M:Technosoftware.UaServer.IUaNodeManager.CreateAddressSpace(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})" />
            <remarks>
            Populates the NodeManager by loading the standard nodes from an XML file stored as an embedded resource.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.DeleteAddressSpace">
            <summary cref="M:Technosoftware.UaServer.IUaNodeManager.DeleteAddressSpace" />
            <remarks>
            Disposes all of the nodes.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.GetManagerHandle(Opc.Ua.NodeId)">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.GetManagerHandle(Opc.Ua.NodeId)" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.TranslateBrowsePath(Technosoftware.UaServer.UaServerOperationContext,System.Object,Opc.Ua.RelativePathElement,System.Collections.Generic.IList{Opc.Ua.ExpandedNodeId},System.Collections.Generic.IList{Opc.Ua.NodeId})">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.TranslateBrowsePath(Technosoftware.UaServer.UaServerOperationContext,System.Object,Opc.Ua.RelativePathElement,System.Collections.Generic.IList{Opc.Ua.ExpandedNodeId},System.Collections.Generic.IList{Opc.Ua.NodeId})" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.Browse(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.UaContinuationPoint@,System.Collections.Generic.IList{Opc.Ua.ReferenceDescription})">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.Browse(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.UaContinuationPoint@,System.Collections.Generic.IList{Opc.Ua.ReferenceDescription})" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.ApplyBrowseFilters(Opc.Ua.IReference,Opc.Ua.BrowseDirection,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Returns true is the target meets the filter criteria.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.SessionClosing(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Boolean)">
            <summary>
                Called when a session is closed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.GetNodeMetadata(Technosoftware.UaServer.UaServerOperationContext,System.Object,Opc.Ua.BrowseResultMask)">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.GetNodeMetadata(Technosoftware.UaServer.UaServerOperationContext,System.Object,Opc.Ua.BrowseResultMask)" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.AddReferences(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary cref="M:Technosoftware.UaServer.IUaNodeManager.AddReferences(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})" />
            <remarks>
            This method must not be called without first acquiring 
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.Read(Technosoftware.UaServer.UaServerOperationContext,System.Double,System.Collections.Generic.IList{Opc.Ua.ReadValueId},System.Collections.Generic.IList{Opc.Ua.DataValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.Read(Technosoftware.UaServer.UaServerOperationContext,System.Double,System.Collections.Generic.IList{Opc.Ua.ReadValueId},System.Collections.Generic.IList{Opc.Ua.DataValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult})" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.HistoryRead(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.HistoryReadDetails,Opc.Ua.TimestampsToReturn,System.Boolean,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.HistoryRead(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.HistoryReadDetails,Opc.Ua.TimestampsToReturn,System.Boolean,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.Write(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.WriteValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.Write(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.WriteValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult})" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.HistoryUpdate(Technosoftware.UaServer.UaServerOperationContext,System.Type,System.Collections.Generic.IList{Opc.Ua.HistoryUpdateDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.HistoryUpdate(Technosoftware.UaServer.UaServerOperationContext,System.Type,System.Collections.Generic.IList{Opc.Ua.HistoryUpdateDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.Call(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.CallMethodRequest},System.Collections.Generic.IList{Opc.Ua.CallMethodResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.Call(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.CallMethodRequest},System.Collections.Generic.IList{Opc.Ua.CallMethodResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.SubscribeToEvents(Technosoftware.UaServer.UaServerOperationContext,System.Object,System.UInt32,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.SubscribeToEvents(Technosoftware.UaServer.UaServerOperationContext,System.Object,System.UInt32,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.SubscribeToAllEvents(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.SubscribeToAllEvents(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.ConditionRefresh(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaEventMonitoredItem})">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.ConditionRefresh(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaEventMonitoredItem})" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.CreateMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.Double,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.MonitoredItemCreateRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult},System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Int64@)">
            <summary>
            Creates a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.ModifyMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{Opc.Ua.MonitoredItemModifyRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult})">
            <summary>
            Modifies a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.DeleteMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{System.Boolean},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Deletes a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.SetMonitoringMode(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.MonitoringMode,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{System.Boolean},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Changes the monitoring mode for a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.CheckNodeClassMask(System.UInt32,Opc.Ua.NodeClass)">
            <summary>
            Returns true if the node class matches the node class mask.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.CoreNodeManager.ServerData">
            <summary>
            The server that the node manager belongs to.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.GetNamespaceIndex(System.String)">
            <summary>
            Returns an index for the NamespaceURI (Adds it to the server namespace table if it does not already exist).
            </summary>
            <remarks>
            Returns the server's default index (1) if the namespaceUri is empty or null. 
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.FindLocalNodes(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Returns all targets of the specified reference.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.FindTargetId(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean,Opc.Ua.QualifiedName)">
            <summary>
            Returns the id the first node with the specified browse name if it exists. null otherwise
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.Find(Opc.Ua.NodeId,System.String)">
            <summary>
            Returns the first target that matches the browse path.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.TranslateBrowsePath(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.String)">
            <summary>
            Returns a list of targets the match the browse path.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.TranslateBrowsePath(Opc.Ua.NodeId,System.String)">
            <summary>
            Returns a list of targets the match the browse path.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.TranslateBrowsePath(Opc.Ua.NodeId,Opc.Ua.RelativePath)">
            <summary>
            Returns a list of targets the match the browse path.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.TranslateBrowsePath(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,Opc.Ua.RelativePath)">
            <summary>
            Returns a list of targets the match the browse path.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.RegisterSource(Opc.Ua.NodeId,System.Object,System.Object,System.Boolean)">
            <summary>
            Registers a source for a node.
            </summary>
            <remarks>
            The source could be one or more of IDataSource, IEventSource, ICallable, IHistorian or IViewManager
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.UnregisterSource(System.Object)">
            <summary>
            Called when the source is no longer used.
            </summary>
            <remarks>
            When a source disappears it must either delete all of its nodes from the address space
            or unregister itself their source by calling RegisterSource with source == null.
            After doing that the source must call this method.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.ApplyModellingRules(Opc.Ua.ILocalNode,Opc.Ua.ILocalNode,Opc.Ua.ILocalNode,System.UInt16)">
            <summary>
            Applys the modelling rules to any existing instance.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.IsExternalReferenceAllowed(Opc.Ua.NodeId)">
            <summary>
            Returns true if a one-way reference to external nodes is permitted.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.UpdateTypeDefinition(Opc.Ua.ILocalNode,Opc.Ua.ExpandedNodeId)">
            <summary>
            Updates the type definition for a node.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.NodeManager.CoreNodeManager.DeclarationNode">
            <summary>
            A node in the type system that is used to instantiate objects or variables.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.BuildDeclarationList(Opc.Ua.ILocalNode,System.Collections.Generic.List{Technosoftware.UaServer.NodeManager.CoreNodeManager.DeclarationNode})">
            <summary>
            Builds the list of declaration nodes for a type definition. 
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.BuildDeclarationList(Technosoftware.UaServer.NodeManager.CoreNodeManager.DeclarationNode,System.Collections.Generic.List{Technosoftware.UaServer.NodeManager.CoreNodeManager.DeclarationNode})">
            <summary>
            Builds a list of declarations from the nodes aggregated by a parent.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.BuildInstanceList(Opc.Ua.ILocalNode,System.String,System.Collections.Generic.IDictionary{System.String,Opc.Ua.ILocalNode})">
            <summary>
            Builds a table of instances indexed by browse path from the nodes aggregated by a parent
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.ExportNode(Opc.Ua.NodeId,Opc.Ua.NodeSet)">
            <summary>
            Exports a node to a nodeset.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.ExportNode(Opc.Ua.ILocalNode,Opc.Ua.NodeSet,System.Boolean)">
            <summary>
            Exports a node to a nodeset.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.UpdateAttributes(Opc.Ua.ILocalNode,Opc.Ua.NodeAttributes)">
            <summary>
            Updates the attributes for the node.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.DeleteNode(Opc.Ua.NodeId,System.Boolean,System.Boolean)">
            <summary>
            Deletes a node from the address sapce.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.DeleteNode(Opc.Ua.ILocalNode,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Deletes a node from the address sapce.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.OnDeleteReferences(System.Object)">
            <summary>
            Deletes the external references to a node in a background thread.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.ValidateReference(Opc.Ua.ILocalNode,Opc.Ua.NodeId,System.Boolean,Opc.Ua.NodeClass)">
            <summary>
            Verifies that the source and the target meet the restrictions imposed by the reference type.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.AddReference(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Adds a reference between two existing nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.AddReferenceToLocalNode(Opc.Ua.ILocalNode,Opc.Ua.NodeId,System.Boolean,Opc.Ua.ExpandedNodeId,System.Boolean)">
            <summary>
            Ensures any changes to built-in nodes are reflected in the diagnostics node manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.CreateReference(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Adds a reference between two existing nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.AddReference(Opc.Ua.ILocalNode,Opc.Ua.NodeId,System.Boolean,Opc.Ua.ILocalNode,System.Boolean)">
            <summary>
            Adds a reference to the address space.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.AddReference(Opc.Ua.ILocalNode,Opc.Ua.NodeId,System.Boolean,Opc.Ua.ExpandedNodeId)">
            <summary>
            Adds a reference to the address space.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.DeleteReference(System.Object,Opc.Ua.NodeId,System.Boolean,Opc.Ua.ExpandedNodeId,System.Boolean)">
            <summary>
            Deletes a reference.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.DeleteReference(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean,Opc.Ua.ExpandedNodeId,System.Boolean)">
            <summary>
            Deletes a reference.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.AddNode(Opc.Ua.ILocalNode)">
            <summary>
            Adds a node to the address space.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.GetLocalNode(Opc.Ua.ExpandedNodeId)">
            <summary>
            Returns a node managed by the manager with the specified node id.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.GetLocalNode(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean,System.Boolean,Opc.Ua.QualifiedName)">
            <summary>
            Returns a node managed by the manager with the specified node id.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.GetLocalNode(Opc.Ua.NodeId)">
            <summary>
            Returns a node managed by the manager with the specified node id.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.GetLocalNodes(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of nodes which are targets of the specified references.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.GetTargetNode(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean,System.Boolean,Opc.Ua.QualifiedName)">
            <summary>
            Returns a node managed by the manager that has the specified browse name.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.GetTargetNode(Opc.Ua.ILocalNode,Opc.Ua.NodeId,System.Boolean,System.Boolean,Opc.Ua.QualifiedName)">
            <summary>
            Returns a node managed by the manager that has the specified browse name.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.AttachNode(Opc.Ua.ILocalNode)">
            <summary>
            Attaches a node to the address space.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.AttachNode(Opc.Ua.ILocalNode,System.Boolean)">
            <summary>
            Attaches a node to the address space.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.CreateUniqueNodeId">
            <summary>
            Creates a unique node identifier.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.GetManagerHandle(Opc.Ua.ExpandedNodeId)">
            <see cref="M:Technosoftware.UaServer.IUaNodeManager.GetManagerHandle(Opc.Ua.NodeId)" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.ReadEURange(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.ILocalNode,Opc.Ua.Range@)">
            <summary>
            Reads the EU Range for a variable.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.ValidateFilter(Technosoftware.UaServer.UaNodeMetadata,System.UInt32,Opc.Ua.ExtensionObject,System.Boolean@)">
            <summary>
            Validates a filter for a monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.CoreNodeManager.CreateUniqueNodeId(System.UInt16)">
            <summary>
            Creates a new unique identifier for a node.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.NodeManager.EventManager">
            <summary>
            An object that manages all events raised within the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.EventManager.#ctor(Technosoftware.UaServer.IUaServerData,System.UInt32)">
            <summary>
            Creates a new instance of a sampling group.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.EventManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.EventManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.EventManager.ReportEvent(Opc.Ua.IFilterTarget,System.Collections.Generic.IList{Technosoftware.UaServer.IUaEventMonitoredItem})">
            <summary>
            Reports an event.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.EventManager.CreateMonitoredItem(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.IUaNodeManager,System.Object,System.UInt32,System.UInt32,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoredItemCreateRequest,Opc.Ua.EventFilter)">
            <summary>
            Creates a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.EventManager.CreateMonitoredItem(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.IUaNodeManager,System.Object,System.UInt32,System.UInt32,Opc.Ua.TimestampsToReturn,System.Double,Opc.Ua.MonitoredItemCreateRequest,Opc.Ua.EventFilter)">
            <summary>
            Creates a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.EventManager.ModifyMonitoredItem(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.IUaEventMonitoredItem,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoredItemModifyRequest,Opc.Ua.EventFilter)">
            <summary>
            Modifies a monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.EventManager.DeleteMonitoredItem(System.UInt32)">
            <summary>
            Deletes a monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.EventManager.GetMonitoredItems">
            <summary>
            Returns the currently active monitored items. 
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.NodeManager.LocalReference">
            <summary>
            Stores a reference between NodeManagers that is needs to be created or deleted.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.LocalReference.#ctor(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean,Opc.Ua.NodeId)">
            <summary>
            Initializes the the reference.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.LocalReference.SourceId">
            <summary>
            The source of the reference.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.LocalReference.ReferenceTypeId">
            <summary>
            The type of reference.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.LocalReference.IsInverse">
            <summary>
            True is the reference is an inverse reference.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.LocalReference.TargetId">
            <summary>
            The target of the reference.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.NodeManager.MasterNodeManager">
            <summary>
            The master node manager for the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.#ctor(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration,System.String,Technosoftware.UaServer.IUaNodeManager[])">
            <summary>
            Initializes the object with default values.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.RegisterNodeManager(Technosoftware.UaServer.IUaNodeManager,System.Collections.Generic.List{Technosoftware.UaServer.IUaNodeManager},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Technosoftware.UaServer.IUaNodeManager}})">
            <summary>
            Registers the node manager with the master node manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.CreateExternalReference(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}},Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean,Opc.Ua.NodeId)">
            <summary>
            Adds a reference to the table of external references.
            </summary>
            <remarks>
            This is a convenience function used by custom NodeManagers.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.MasterNodeManager.CoreNodeManager">
            <summary>
            Returns the core node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.MasterNodeManager.DiagnosticsNodeManager">
            <summary>
            Returns the diagnostics node manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.Startup">
            <summary>
            Creates the node managers and start them
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.SessionClosing(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Signals that a session is closing.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.Shutdown">
            <summary>
            Shuts down the node managers a
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.RegisterNamespaceManager(System.String,Technosoftware.UaServer.IUaNodeManager)">
            <summary>
            Registers the node manager as the node manager for Nodes in the specified namespace.
            </summary>
            <param name="namespaceUri">The URI of the namespace.</param>
            <param name="nodeManager">The NodeManager which owns node in the namespacee.</param>
            <remarks>
            Multiple NodeManagers may register interest in a Namespace. 
            The order in which this method is called determines the precedence if multiple NodeManagers exist.
                This method adds the namespaceUri to the Server's Namespace table if it does not already exist.
            
            This method is thread safe and can be called at anytime.
            
            This method does not have to be called for any namespaces that were in the NodeManager's 
            NamespaceUri property when the MasterNodeManager was created.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Throw if the namespaceUri or the nodeManager are null.</exception>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.GetManagerHandle(Opc.Ua.NodeId,Technosoftware.UaServer.IUaNodeManager@)">
            <summary>
            Returns node handle and its node manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.AddReferences(Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference})">
            <summary>
            Adds the references to the target.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.DeleteReferences(Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference})">
            <summary>
            Deletes the references to the target.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.RemoveReferences(System.Collections.Generic.List{Technosoftware.UaServer.NodeManager.LocalReference})">
            <summary>
            Deletes the specified references.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.RegisterNodes(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeIdCollection,Opc.Ua.NodeIdCollection@)">
            <summary>
            Registers a set of node ids.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.UnregisterNodes(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeIdCollection)">
            <summary>
            Unregisters a set of node ids.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.TranslateBrowsePathsToNodeIds(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.BrowsePathCollection,Opc.Ua.BrowsePathResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Translates a start node id plus a relative paths into a node id.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.UpdateDiagnostics(Technosoftware.UaServer.UaServerOperationContext,System.Boolean,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Updates the diagnostics return parameter.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.TranslateBrowsePath(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.BrowsePath,Opc.Ua.BrowsePathResult)">
            <summary>
            Translates a browse path.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.TranslateBrowsePath(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.IUaNodeManager,System.Object,Opc.Ua.RelativePath,Opc.Ua.BrowsePathTargetCollection,System.Int32)">
            <summary>
            Recursively processes the elements in the RelativePath starting at the specified index.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.Browse(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.ViewDescription,System.UInt32,Opc.Ua.BrowseDescriptionCollection,Opc.Ua.BrowseResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Returns the set of references that meet the filter criteria.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.BrowseNext(Technosoftware.UaServer.UaServerOperationContext,System.Boolean,Opc.Ua.ByteStringCollection,Opc.Ua.BrowseResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Continues a browse operation that was previously halted.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.Browse(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.ViewDescription,System.UInt32,System.Boolean,Opc.Ua.BrowseDescription,Opc.Ua.BrowseResult)">
            <summary>
            Returns the set of references that meet the filter criteria.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.FetchReferences(Technosoftware.UaServer.UaServerOperationContext,System.Boolean,Technosoftware.UaServer.UaContinuationPoint@,Opc.Ua.ReferenceDescriptionCollection@)">
            <summary>
            Loops until browse is complete for max results reached.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.UpdateReferenceDescription(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,Opc.Ua.NodeClass,Opc.Ua.BrowseResultMask,Opc.Ua.ReferenceDescription)">
            <summary>
            Updates the reference description with the node attributes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.Read(Technosoftware.UaServer.UaServerOperationContext,System.Double,Opc.Ua.TimestampsToReturn,Opc.Ua.ReadValueIdCollection,Opc.Ua.DataValueCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Reads a set of nodes
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.HistoryRead(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.ExtensionObject,Opc.Ua.TimestampsToReturn,System.Boolean,Opc.Ua.HistoryReadValueIdCollection,Opc.Ua.HistoryReadResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Reads the history of a set of items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.Write(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.WriteValueCollection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Writes a set of values.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.HistoryUpdate(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.ExtensionObjectCollection,Opc.Ua.HistoryUpdateResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Updates the history for a set of nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.Call(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.CallMethodRequestCollection,Opc.Ua.CallMethodResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Calls a method defined on a object.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.ConditionRefresh(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaEventMonitoredItem})">
            <summary>
            Handles condition refresh request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.CreateMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.Double,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.MonitoredItemCreateRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult},System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem})">
            <summary>
            Creates a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.CreateMonitoredItemsForEvents(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.Double,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.MonitoredItemCreateRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult},System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Int64@)">
            <summary>
            Create monitored items for event subscriptions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.ModifyMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{Opc.Ua.MonitoredItemModifyRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult})">
            <summary>
            Modifies a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.ModifyMonitoredItemsForEvents(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{Opc.Ua.MonitoredItemModifyRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult})">
            <summary>
            Modify monitored items for event subscriptions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.DeleteMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Deletes a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.DeleteMonitoredItemsForEvents(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{System.Boolean},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Delete monitored items for event subscriptions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.SetMonitoringMode(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.MonitoringMode,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Changes the monitoring mode for a set of items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.SetMonitoringModeForEvents(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.MonitoringMode,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{System.Boolean},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Delete monitored items for event subscriptions.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.MasterNodeManager.Server">
            <summary>
            The server that the node manager belongs to.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.NodeManager.MasterNodeManager.NodeManagers">
            <summary>
            The node managers being managed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.ValidateMonitoringAttributes(Opc.Ua.MonitoringParameters)">
            <summary>
            Validates a monitoring attributes parameter.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.ValidateMonitoringFilter(Opc.Ua.ExtensionObject)">
            <summary>
            Validates a monitoring filter.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.ValidateMonitoredItemCreateRequest(Opc.Ua.MonitoredItemCreateRequest)">
            <summary>
            Validates a monitored item create request parameter.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.ValidateMonitoredItemModifyRequest(Opc.Ua.MonitoredItemModifyRequest)">
            <summary>
            Validates a monitored item modify request parameter.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.MasterNodeManager.ValidateCallRequestItem(Opc.Ua.CallMethodRequest)">
            <summary>
            Validates a call request item parameter
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.NodeManager.ResourceManager">
            <summary>
            An object that manages access to localized resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.#ctor(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Initializes the resource manager with the server instance that owns it.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.Dispose">
            <summary>
            May be called by the application to clean up resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources held by the object.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.Translate(System.Collections.Generic.IList{System.String},System.String,System.String,System.Object[])">
            <summary cref="M:Opc.Ua.ITranslationManager.Translate(System.Collections.Generic.IList{System.String},System.String,System.String,System.Object[])" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.Translate(System.Collections.Generic.IList{System.String},Opc.Ua.LocalizedText)">
            <virtual cref="M:Opc.Ua.ITranslationManager.Translate(System.Collections.Generic.IList{System.String},Opc.Ua.LocalizedText)" />
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.Translate(System.Collections.Generic.IList{System.String},Opc.Ua.ServiceResult)">
            <summary>
            Translates a service result.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.GetAvailableLocales">
            <summary>
            Returns the locales supported by the resource manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.GetAvailableLocales(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the locales supported by the resource manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.GetText(System.Collections.Generic.IList{System.String},System.String,System.String,System.Object[])">
            <summary>
            Returns the localized form of the text that best matches the preferred locales.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.Add(System.String,System.String,System.String)">
            <summary>
            Adds a translation to the resource manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.Add(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds the translations to the resource manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.Add(System.UInt32,System.String,System.String)">
            <summary>
            Adds the translations to the resource manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.Add(System.Xml.XmlQualifiedName,System.String,System.String)">
            <summary>
            Adds the translations to the resource manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.LoadDefaultText">
            <summary>
            Uses reflection to load default text for standard StatusCodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.GetTextForLocale(System.String,System.String,System.String,System.Object[])">
            <summary>
            Returns the text for the specified locale (null if the locale is not supported).
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.Translate(System.Collections.Generic.IList{System.String},Opc.Ua.LocalizedText,Opc.Ua.TranslationInfo)">
            <summary>
            Translates the text provided.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.NodeManager.ResourceManager.TranslationTable">
            <summary>
            Stores the translations for a locale.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.GetTable(System.String)">
            <summary>
            Finds the translation table for the locale. Creates a new table if it does not exist.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.FindBestTranslation(System.Collections.Generic.IList{System.String},System.String,System.Globalization.CultureInfo@)">
            <summary>
            Finds the best translation for the requested locales.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.TranslateStatusCode(System.Collections.Generic.IList{System.String},Opc.Ua.StatusCode,System.Object[])">
            <summary>
            Translates a status code.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.ResourceManager.TranslateSymbolicId(System.Collections.Generic.IList{System.String},System.String,System.String,System.Object[])">
            <summary>
            Translates a symbolic id.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.NodeManager.SamplingGroup">
            <summary>
            An object which periodically reads the items and updates the cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.#ctor(Technosoftware.UaServer.IUaServerData,Technosoftware.UaServer.IUaNodeManager,System.Collections.Generic.List{Opc.Ua.SamplingRateGroup},Technosoftware.UaServer.UaServerOperationContext,System.Double)">
            <summary>
            Creates a new instance of a sampling group.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.Startup">
            <summary>
            Starts the sampling thread which periodically reads the items in the group.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.Shutdown">
            <summary>
            Stops the sampling thread.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.StartMonitoring(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem)">
            <summary>
            Checks if the monitored item can be handled by the group.
            </summary>
            <returns>
            True if the item was added to the group.
            </returns>
            <remarks>
            The ApplyChanges() method must be called to actually start sampling the item. 
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.ModifyMonitoring(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem)">
            <summary>
            Checks if the monitored item can still be handled by the group.
            </summary>
            <returns>
            False if the item has be marked for removal from the group.
            </returns>
            <remarks>
            The ApplyChanges() method must be called to actually stop sampling the item. 
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.StopMonitoring(Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem)">
            <summary>
            Stops monitoring the item.
            </summary>
            <returns>
            Returns true if the items was marked for removal from the group.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.ApplyChanges">
            <summary>
            Updates the group by apply any pending changes.
            </summary>
            <returns>
            Returns true if the group has no more items and can be dropped.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.MeetsGroupCriteria(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem)">
            <summary>
            Checks if the item meets the group's criteria.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.AdjustSamplingInterval(System.Double)">
            <summary>
            Ensures the requested sampling interval lines up with one of the supported sampling rates.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.SampleMonitoredItems(System.Object)">
            <summary>
            Periodically checks if the sessions have timed out.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroup.DoSample(System.Object)">
            <summary>
            Samples the values of the items.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.NodeManager.SamplingGroupManager">
            <summary>
            An object that manages the sampling groups for a node manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroupManager.#ctor(Technosoftware.UaServer.IUaServerData,Technosoftware.UaServer.IUaNodeManager,System.UInt32,System.Collections.Generic.IEnumerable{Opc.Ua.SamplingRateGroup})">
            <summary>
            Creates a new instance of a sampling group.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroupManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroupManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroupManager.Shutdown">
            <summary>
            Stops all sampling groups and clears all items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroupManager.CreateMonitoredItem(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.Double,Opc.Ua.TimestampsToReturn,System.UInt32,System.Object,Opc.Ua.MonitoredItemCreateRequest,Opc.Ua.Range,System.Double)">
            <summary>
            Creates a new monitored item and calls StartMonitoring().
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroupManager.CreateMonitoredItem(Technosoftware.UaServer.IUaServerData,Technosoftware.UaServer.IUaNodeManager,System.Object,System.UInt32,System.UInt32,Technosoftware.UaServer.Sessions.Session,Opc.Ua.ReadValueId,Opc.Ua.DiagnosticsMasks,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoringMode,System.UInt32,Opc.Ua.MonitoringFilter,Opc.Ua.MonitoringFilter,Opc.Ua.Range,System.Double,System.UInt32,System.Boolean,System.Double)">
            <summary>
            Creates a new monitored item.
            </summary>
            <param name="server">The server.</param>
            <param name="nodeManager">The node manager.</param>
            <param name="managerHandle">The manager handle.</param>
            <param name="subscriptionId">The subscription id.</param>
            <param name="id">The id.</param>
            <param name="session">The session.</param>
            <param name="itemToMonitor">The item to monitor.</param>
            <param name="diagnosticsMasks">The diagnostics masks.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="clientHandle">The client handle.</param>
            <param name="originalFilter">The original filter.</param>
            <param name="filterToUse">The filter to use.</param>
            <param name="range">The range.</param>
            <param name="samplingInterval">The sampling interval.</param>
            <param name="queueSize">Size of the queue.</param>
            <param name="discardOldest">if set to <c>true</c> [discard oldest].</param>
            <param name="minimumSamplingInterval">The minimum sampling interval.</param>
            <returns>The monitored item.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroupManager.ModifyMonitoredItem(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.TimestampsToReturn,Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem,Opc.Ua.MonitoredItemModifyRequest,Opc.Ua.Range)">
            <summary>
            Modifies a monitored item and calls ModifyMonitoring().
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroupManager.StartMonitoring(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem)">
            <summary>
            Starts monitoring the item.
            </summary>
            <remarks>
            It will use the external source for monitoring if the source accepts the item.
            The changes will not take affect until the ApplyChanges() method is called.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroupManager.ModifyMonitoring(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem)">
            <summary>
            Changes monitoring attributes the item.
            </summary>
            <remarks>
            It will call the external source to change the monitoring if an external source was provided originally.
            The changes will not take affect until the ApplyChanges() method is called.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroupManager.StopMonitoring(Technosoftware.UaServer.IUaSampledDataChangeMonitoredItem)">
            <summary>
            Stops monitoring the item.
            </summary>
            <remarks>
            It will call the external source to stop the monitoring if an external source was provided originally.
            The changes will not take affect until the ApplyChanges() method is called.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.NodeManager.SamplingGroupManager.ApplyChanges">
            <summary>
            Applies any pending changes caused by adding,changing or removing monitored items.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.NodeManager.SamplingGroupManager.defaultSamplingRates_">
            <summary>
            The default sampling rates.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.ParsedNodeId">
            <summary>
            Stores the elements of a NodeId after it is parsed.
            </summary>
            <remarks>
            The NodeIds used by the samples are strings with an optional path appended.
            The RootType identifies the type of Root Node. The RootId is the unique identifier
            for the Root Node. The ComponentPath is constructed from the SymbolicNames
            of one or more children of the Root Node. 
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.ParsedNodeId.NamespaceIndex">
            <summary>
            The namespace index that qualified the NodeId.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.ParsedNodeId.RootId">
            <summary>
            The identifier for the root of the NodeId.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.ParsedNodeId.RootType">
            <summary>
            The type of root node.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.ParsedNodeId.ComponentPath">
            <summary>
            The relative path to the component identified by the NodeId.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.ParsedNodeId.Parse(Opc.Ua.NodeId)">
            <summary>
            Parses the specified node identifier.
            </summary>
            <param name="nodeId">The node identifier.</param>
            <returns>The parsed node identifier. Null if the identifier cannot be parsed.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.ParsedNodeId.Construct(System.Int32,System.String,System.UInt16,System.String[])">
            <summary>
            Constructs a node identifier from the component pieces.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.ParsedNodeId.Construct">
            <summary>
            Constructs a node identifier.
            </summary>
            <returns>The node identifier.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.ParsedNodeId.Construct(System.String)">
            <summary>
            Constructs a node identifier for a component with the specified name.
            </summary>
            <returns>The node identifier.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.ParsedNodeId.CreateIdForComponent(Opc.Ua.NodeState,System.UInt16)">
            <summary>
            Constructs the node identifier for a component.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Server.GenericServer">
            <summary>
            The standard implementation of a UA server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.#ctor">
            <summary>
            Initializes the object with default values.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.FindServers(Opc.Ua.RequestHeader,System.String,Opc.Ua.StringCollection,Opc.Ua.StringCollection,Opc.Ua.ApplicationDescriptionCollection@)">
            <summary>
            Invokes the FindServers service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="endpointUrl">The endpoint URL.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="serverUris">The server uris.</param>
            <param name="servers">List of Servers that meet criteria specified in the request.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.GetEndpoints(Opc.Ua.RequestHeader,System.String,Opc.Ua.StringCollection,Opc.Ua.StringCollection,Opc.Ua.EndpointDescriptionCollection@)">
            <summary>
            Invokes the GetEndpoints service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="endpointUrl">The endpoint URL.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="profileUris">The profile uris.</param>
            <param name="endpoints">The endpoints supported by the server.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.GetEndpointDescriptions(System.String,System.Collections.Generic.IList{Opc.Ua.ServerBase.BaseAddress},Opc.Ua.StringCollection)">
            <summary>
            Returns the endpoints that match the base addresss and endpoint url.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CreateSession(Opc.Ua.RequestHeader,Opc.Ua.ApplicationDescription,System.String,System.String,System.String,System.Byte[],System.Byte[],System.Double,System.UInt32,Opc.Ua.NodeId@,Opc.Ua.NodeId@,System.Double@,System.Byte[]@,System.Byte[]@,Opc.Ua.EndpointDescriptionCollection@,Opc.Ua.SignedSoftwareCertificateCollection@,Opc.Ua.SignatureData@,System.UInt32@)">
            <summary>
            Invokes the CreateSession service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="clientDescription">Application description for the client application.</param>
            <param name="serverUri">The server URI.</param>
            <param name="endpointUrl">The endpoint URL.</param>
            <param name="sessionName">Name for the Session assigned by the client.</param>
            <param name="clientNonce">The client nonce.</param>
            <param name="clientCertificate">The client certificate.</param>
            <param name="requestedSessionTimeout">The requested session timeout.</param>
            <param name="maxResponseMessageSize">Size of the max response message.</param>
            <param name="sessionId">The unique public identifier assigned by the ServerData to the Session.</param>
            <param name="authenticationToken">The unique private identifier assigned by the ServerData to the Session.</param>
            <param name="revisedSessionTimeout">The revised session timeout.</param>
            <param name="serverNonce">The server nonce.</param>
            <param name="serverCertificate">The server certificate.</param>
            <param name="serverEndpoints">The server endpoints.</param>
            <param name="serverSoftwareCertificates">The server software certificates.</param>
            <param name="serverSignature">The server signature.</param>
            <param name="maxRequestMessageSize">Size of the max request message.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.ActivateSession(Opc.Ua.RequestHeader,Opc.Ua.SignatureData,Opc.Ua.SignedSoftwareCertificateCollection,Opc.Ua.StringCollection,Opc.Ua.ExtensionObject,Opc.Ua.SignatureData,System.Byte[]@,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the ActivateSession service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="clientSignature">The client signature.</param>
            <param name="clientSoftwareCertificates">The client software certificates.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="userIdentityToken">The user identity token.</param>
            <param name="userTokenSignature">The user token signature.</param>
            <param name="serverNonce">The server nonce.</param>
            <param name="results">The results.</param>
            <param name="diagnosticInfos">The diagnostic infos.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.IsSecurityError(Opc.Ua.StatusCode)">
            <summary>
            Returns whether the error is a security error.
            </summary>
            <param name="error">The error.</param>
            <returns>
            	<c>true</c> if the error is one of the security errors, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CreateResponse(Opc.Ua.RequestHeader,Opc.Ua.ServiceResultException)">
            <summary>
            Creates the response header.
            </summary>
            <param name="requestHeader">The object that contains description for the RequestHeader DataType.</param>
            <param name="exception">The exception used to create DiagnosticInfo assigned to the ServiceDiagnostics.</param>
            <returns>Returns a description for the ResponseHeader DataType. </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CloseSession(Opc.Ua.RequestHeader,System.Boolean)">
            <summary>
            Invokes the CloseSession service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="deleteSubscriptions">if set to <c>true</c> subscriptions are deleted.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.Cancel(Opc.Ua.RequestHeader,System.UInt32,System.UInt32@)">
            <summary>
            Invokes the Cancel service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="requestHandle">The request handle assigned to the request.</param>
            <param name="cancelCount">The number of cancelled requests.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.Browse(Opc.Ua.RequestHeader,Opc.Ua.ViewDescription,System.UInt32,Opc.Ua.BrowseDescriptionCollection,Opc.Ua.BrowseResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the Browse service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="view">The view.</param>
            <param name="requestedMaxReferencesPerNode">The maximum number of references to return for each node.</param>
            <param name="nodesToBrowse">The list of nodes to browse.</param>
            <param name="results">The list of results for the passed starting nodes and filters.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.BrowseNext(Opc.Ua.RequestHeader,System.Boolean,Opc.Ua.ByteStringCollection,Opc.Ua.BrowseResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the BrowseNext service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="releaseContinuationPoints">if set to <c>true</c> the continuation points are released.</param>
            <param name="continuationPoints">A list of continuation points returned in a previous Browse or BrewseNext call.</param>
            <param name="results">The list of resulted references for browse.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.RegisterNodes(Opc.Ua.RequestHeader,Opc.Ua.NodeIdCollection,Opc.Ua.NodeIdCollection@)">
            <summary>
            Invokes the RegisterNodes service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="nodesToRegister">The list of NodeIds to register.</param>
            <param name="registeredNodeIds">The list of NodeIds identifying the registered nodes. </param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.UnregisterNodes(Opc.Ua.RequestHeader,Opc.Ua.NodeIdCollection)">
            <summary>
            Invokes the UnregisterNodes service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="nodesToUnregister">The list of NodeIds to unregister</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.TranslateBrowsePathsToNodeIds(Opc.Ua.RequestHeader,Opc.Ua.BrowsePathCollection,Opc.Ua.BrowsePathResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the TranslateBrowsePathsToNodeIds service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="browsePaths">The list of browse paths for which NodeIds are being requested.</param>
            <param name="results">The list of results for the list of browse paths.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.Read(Opc.Ua.RequestHeader,System.Double,Opc.Ua.TimestampsToReturn,Opc.Ua.ReadValueIdCollection,Opc.Ua.DataValueCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the Read service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="maxAge">The Maximum age of the value to be read in milliseconds.</param>
            <param name="timestampsToReturn">The type of timestamps to be returned for the requested Variables.</param>
            <param name="nodesToRead">The list of Nodes and their Attributes to read.</param>
            <param name="results">The list of returned Attribute values</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.HistoryRead(Opc.Ua.RequestHeader,Opc.Ua.ExtensionObject,Opc.Ua.TimestampsToReturn,System.Boolean,Opc.Ua.HistoryReadValueIdCollection,Opc.Ua.HistoryReadResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the HistoryRead service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="historyReadDetails">The history read details.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="releaseContinuationPoints">if set to <c>true</c> continuation points are released.</param>
            <param name="nodesToRead">The nodes to read.</param>
            <param name="results">The results.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.Write(Opc.Ua.RequestHeader,Opc.Ua.WriteValueCollection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the Write service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="nodesToWrite">The list of Nodes, Attributes, and values to write.</param>
            <param name="results">The list of write result status codes for each write operation.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.HistoryUpdate(Opc.Ua.RequestHeader,Opc.Ua.ExtensionObjectCollection,Opc.Ua.HistoryUpdateResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the HistoryUpdate service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="historyUpdateDetails">The details defined for the update.</param>
            <param name="results">The list of update results for the history update details.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CreateSubscription(Opc.Ua.RequestHeader,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Byte,System.UInt32@,System.Double@,System.UInt32@,System.UInt32@)">
            <summary>
            Invokes the CreateSubscription service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="requestedPublishingInterval">The cyclic rate that the Subscription is being requested to return Notifications to the Client.</param>
            <param name="requestedLifetimeCount">The client-requested lifetime count for the Subscription</param>
            <param name="requestedMaxKeepAliveCount">The requested max keep alive count.</param>
            <param name="maxNotificationsPerPublish">The maximum number of notifications that the Client wishes to receive in a single Publish response.</param>
            <param name="publishingEnabled">If set to <c>true</c> publishing is enabled for the Subscription.</param>
            <param name="priority">The relative priority of the Subscription.</param>
            <param name="subscriptionId">The ServerData-assigned identifier for the Subscription.</param>
            <param name="revisedPublishingInterval">The actual publishing interval that the ServerData will use.</param>
            <param name="revisedLifetimeCount">The revised lifetime count.</param>
            <param name="revisedMaxKeepAliveCount">The revised max keep alive count.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.DeleteSubscriptions(Opc.Ua.RequestHeader,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the DeleteSubscriptions service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="subscriptionIds">The list of Subscriptions to delete.</param>
            <param name="results">The list of result StatusCodes for the Subscriptions to delete.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.Publish(Opc.Ua.RequestHeader,Opc.Ua.SubscriptionAcknowledgementCollection,System.UInt32@,Opc.Ua.UInt32Collection@,System.Boolean@,Opc.Ua.NotificationMessage@,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the Publish service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="subscriptionAcknowledgements">The list of acknowledgements for one or more Subscriptions.</param>
            <param name="subscriptionId">The subscription identifier.</param>
            <param name="availableSequenceNumbers">The available sequence numbers.</param>
            <param name="moreNotifications">If set to <c>true</c> the number of Notifications that were ready to be sent could not be sent in a single response.</param>
            <param name="notificationMessage">The NotificationMessage that contains the list of Notifications.</param>
            <param name="results">The list of results for the acknowledgements.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object 
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.BeginPublish(Opc.Ua.IEndpointIncomingRequest)">
            <summary>
            Begins an asynchronous publish operation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CompletePublish(Opc.Ua.IEndpointIncomingRequest)">
            <summary>
            Completes an asynchronous publish operation.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.Republish(Opc.Ua.RequestHeader,System.UInt32,System.UInt32,Opc.Ua.NotificationMessage@)">
            <summary>
            Invokes the Republish service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="subscriptionId">The subscription id.</param>
            <param name="retransmitSequenceNumber">The sequence number of a specific NotificationMessage to be republished.</param>
            <param name="notificationMessage">The requested NotificationMessage.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.ModifySubscription(Opc.Ua.RequestHeader,System.UInt32,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Double@,System.UInt32@,System.UInt32@)">
            <summary>
            Invokes the ModifySubscription service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="subscriptionId">The subscription id.</param>
            <param name="requestedPublishingInterval">The cyclic rate that the Subscription is being requested to return Notifications to the Client.</param>
            <param name="requestedLifetimeCount">The client-requested lifetime count for the Subscription.</param>
            <param name="requestedMaxKeepAliveCount">The requested max keep alive count.</param>
            <param name="maxNotificationsPerPublish">The maximum number of notifications that the Client wishes to receive in a single Publish response.</param>
            <param name="priority">The relative priority of the Subscription.</param>
            <param name="revisedPublishingInterval">The revised publishing interval.</param>
            <param name="revisedLifetimeCount">The revised lifetime count.</param>
            <param name="revisedMaxKeepAliveCount">The revised max keep alive count.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.SetPublishingMode(Opc.Ua.RequestHeader,System.Boolean,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the SetPublishingMode service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="publishingEnabled">If set to <c>true</c> publishing of NotificationMessages is enabled for the Subscription.</param>
            <param name="subscriptionIds">The list of subscription ids.</param>
            <param name="results">The list of StatusCodes for the Subscriptions to enable/disable.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object 
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.SetTriggering(Opc.Ua.RequestHeader,System.UInt32,System.UInt32,Opc.Ua.UInt32Collection,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the SetTriggering service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="subscriptionId">The subscription id.</param>
            <param name="triggeringItemId">The id for the UaMonitoredItem used as the triggering item.</param>
            <param name="linksToAdd">The list of ids of the items to report that are to be added as triggering links.</param>
            <param name="linksToRemove">The list of ids of the items to report for the triggering links to be deleted.</param>
            <param name="addResults">The list of StatusCodes for the items to add.</param>
            <param name="addDiagnosticInfos">The list of diagnostic information for the links to add.</param>
            <param name="removeResults">The list of StatusCodes for the items to delete.</param>
            <param name="removeDiagnosticInfos">The list of diagnostic information for the links to delete.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object 
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CreateMonitoredItems(Opc.Ua.RequestHeader,System.UInt32,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoredItemCreateRequestCollection,Opc.Ua.MonitoredItemCreateResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the CreateMonitoredItems service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="subscriptionId">The subscription id that will report notifications.</param>
            <param name="timestampsToReturn">The type of timestamps to be returned for the MonitoredItems.</param>
            <param name="itemsToCreate">The list of MonitoredItems to be created and assigned to the specified subscription</param>
            <param name="results">The list of results for the MonitoredItems to create.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.ModifyMonitoredItems(Opc.Ua.RequestHeader,System.UInt32,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoredItemModifyRequestCollection,Opc.Ua.MonitoredItemModifyResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the ModifyMonitoredItems service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="subscriptionId">The subscription id.</param>
            <param name="timestampsToReturn">The type of timestamps to be returned for the MonitoredItems.</param>
            <param name="itemsToModify">The list of MonitoredItems to modify.</param>
            <param name="results">The list of results for the MonitoredItems to modify.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.DeleteMonitoredItems(Opc.Ua.RequestHeader,System.UInt32,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the DeleteMonitoredItems service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="subscriptionId">The subscription id.</param>
            <param name="monitoredItemIds">The list of MonitoredItems to delete.</param>
            <param name="results">The list of results for the MonitoredItems to delete.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.SetMonitoringMode(Opc.Ua.RequestHeader,System.UInt32,Opc.Ua.MonitoringMode,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the SetMonitoringMode service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="subscriptionId">The subscription id.</param>
            <param name="monitoringMode">The monitoring mode to be set for the MonitoredItems.</param>
            <param name="monitoredItemIds">The list of MonitoredItems to modify.</param>
            <param name="results">The list of results for the MonitoredItems to modify.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.Call(Opc.Ua.RequestHeader,Opc.Ua.CallMethodRequestCollection,Opc.Ua.CallMethodResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Invokes the Call service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="methodsToCall">The methods to call.</param>
            <param name="results">The results.</param>
            <param name="diagnosticInfos">The diagnostic information for the results.</param>
            <returns>
            Returns a <see cref="T:Opc.Ua.ResponseHeader"/> object
            </returns>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServer.CurrentInstance">
            <summary>
            The state object associated with the server.
            It provides the shared components for the ServerData.
            </summary>
            <value>The current instance.</value>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.GetStatus">
            <summary>
            Returns the current status of the server.
            </summary>
            <returns>Returns a ServerStatusDataType object</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.RegisterWithDiscoveryServerAsync">
            <summary>
            Registers the server with the discovery server.
            </summary>
            <returns>Boolean value.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.RegistrationValidator_CertificateValidation(System.Object,Opc.Ua.CertificateValidationEventArgs)">
            <summary>
            Checks that the domains in the certificate match the current host.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.OnRegisterServer(System.Object)">
            <summary>
            Registers the server endpoints with the LDS.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServer.Lock">
            <summary>
            The synchronization object.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServer.ServerInternal">
            <summary>
            The state object associated with the server.
            </summary>
            <value>The server internal data.</value>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.ValidateRequest(Opc.Ua.RequestHeader)">
            <summary>
            Verifies that the request header is valid.
            </summary>
            <param name="requestHeader">The request header.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.SetServerState(Opc.Ua.ServerState)">
            <summary>
            Updates the server state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.SetServerError(Opc.Ua.ServiceResult)">
            <summary>
            Reports an error during initialization after the base server object has been started.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.OnApplicationCertificateError(System.Byte[],Opc.Ua.ServiceResult)">
            <summary>
            Handles an error when validating the application instance certificate provided by a client.
            </summary>
            <param name="clientCertificate">The client certificate.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.ValidateSoftwareCertificates(System.Collections.Generic.List{Opc.Ua.SoftwareCertificate})">
            <summary>
            Inspects the software certificates provided by the server.
            </summary>
            <param name="softwareCertificates">The software certificates.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.ValidateRequest(Opc.Ua.RequestHeader,Technosoftware.UaServer.Sessions.RequestType)">
            <summary>
            Verifies that the request header is valid.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="requestType">Type of the request.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.TranslateException(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.ServiceResultException)">
            <summary>
            Translates an exception.
            </summary>
            <param name="context">The context.</param>
            <param name="e">The ServiceResultException e.</param>
            <returns>Returns an exception thrown when a UA defined error occurs, the return type is <seealso cref="T:Opc.Ua.ServiceResultException"/>.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.TranslateException(Opc.Ua.DiagnosticsMasks,System.Collections.Generic.IList{System.String},Opc.Ua.ServiceResultException)">
            <summary>
            Translates an exception.
            </summary>
            <param name="diagnosticsMasks">The fields to return.</param>
            <param name="preferredLocales">The preferred locales.</param>
            <param name="e">The ServiceResultException e.</param>
            <returns>Returns an exception thrown when a UA defined error occurs, the return type is <seealso cref="T:Opc.Ua.ServiceResultException"/>.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.TranslateResult(Opc.Ua.DiagnosticsMasks,System.Collections.Generic.IList{System.String},Opc.Ua.ServiceResult)">
            <summary>
            Translates a service result.
            </summary>
            <param name="diagnosticsMasks">The fields to return.</param>
            <param name="preferredLocales">The preferred locales.</param>
            <param name="result">The result.</param>
            <returns>Returns a class that combines the status code and diagnostic info structures.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.OnRequestComplete(Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            Verifies that the request header is valid.
            </summary>
            <param name="context">The operation context.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.OnConfigurationChanged(System.Object,Opc.Ua.ConfigurationWatcherEventArgs)">
            <summary>
            Raised when the configuration changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="!:Technosoftware.UaConfigurationWatcherEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.OnUpdateConfiguration(Opc.Ua.ApplicationConfiguration)">
            <summary>
            Called when the server configuration is changed on disk.
            </summary>
            <param name="configuration">The configuration.</param>
            <remarks>
            Servers are free to ignore changes if it is difficult/impossible to apply them without a restart.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.OnServerStarting(Opc.Ua.ApplicationConfiguration)">
            <summary>
            Called before the server starts.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.InitializeServiceHosts(Opc.Ua.ApplicationConfiguration,Opc.Ua.ApplicationDescription@,Opc.Ua.EndpointDescriptionCollection@)">
            <summary>
            Creates the endpoints and creates the hosts.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="bindingFactory">The binding factory.</param>
            <param name="serverDescription">The server description.</param>
            <param name="endpoints">The endpoints.</param>
            <returns>
            Returns IList of a host for a UA service which type is <seealso cref="!:ServiceHost"/>.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.GetServiceContract">
            <summary>
            Returns the service contract to use.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.GetEndpointInstance(Opc.Ua.ServerBase)">
            <summary>
            Returns an instance of the endpoint to use.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.StartApplication(Opc.Ua.ApplicationConfiguration)">
            <summary>
            Starts the server application.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.OnServerStopping">
            <summary>
            Called before the server stops
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.ShutDownDelay">
            <summary>
            Implements the server shutdown delay if session are connected.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CreateRequestManager(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Creates the request manager for the server.
            </summary>
            <param name="server">The server.</param>
            <param name="configuration">The configuration.</param>
            <returns>
            Returns an object that manages requests from within the server, return type is <seealso cref="T:Technosoftware.UaServer.Server.RequestManager"/>.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CreateAggregateManager(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Creates the aggregate manager used by the server.
            </summary>
            <param name="server">The server.</param>
            <param name="configuration">The application configuration.</param>
            <returns>The manager.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CreateResourceManager(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Creates the resource manager for the server.
            </summary>
            <param name="server">The server.</param>
            <param name="configuration">The configuration.</param>
            <returns>Returns an object that manages access to localized resources, the return type is <seealso cref="T:Technosoftware.UaServer.NodeManager.ResourceManager"/>.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CreateMasterNodeManager(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Creates the master node manager for the server.
            </summary>
            <param name="server">The server.</param>
            <param name="configuration">The configuration.</param>
            <returns>Returns the master node manager for the server, the return type is <seealso cref="T:Technosoftware.UaServer.NodeManager.MasterNodeManager"/>.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CreateEventManager(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Creates the event manager for the server.
            </summary>
            <param name="server">The server.</param>
            <param name="configuration">The configuration.</param>
            <returns>Returns an object that manages all events raised within the server, the return type is <seealso cref="T:Technosoftware.UaServer.NodeManager.EventManager"/>.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CreateSessionManager(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Creates the session manager for the server.
            </summary>
            <param name="server">The server.</param>
            <param name="configuration">The configuration.</param>
            <returns>Returns a generic session manager object for a server, the return type is <seealso cref="T:Technosoftware.UaServer.Sessions.SessionManager"/>.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.CreateSubscriptionManager(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Creates the session manager for the server.
            </summary>
            <param name="server">The server.</param>
            <param name="configuration">The configuration.</param>
            <returns>Returns a generic session manager object for a server, the return type is <seealso cref="T:Technosoftware.UaServer.Subscriptions.SubscriptionManager"/>.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.OnNodeManagerStarted(Technosoftware.UaServer.IUaServerData)">
            <summary>
            Called after the node managers have been started.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServer.OnServerStarted(Technosoftware.UaServer.IUaServerData)">
            <summary>
            Called after the server has been started.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="T:Technosoftware.UaServer.Server.GenericServerData">
            <summary>
            A class that stores the globally accessible state of a server instance.
            </summary>
            <remarks>
            This is a readonly class that is initialized when the server starts up. It provides
            access to global objects and data that different parts of the server may require.
            It also defines some global methods.
            
            This object is constructed is three steps:
            - the configuration is provided.
            - the node managers et. al. are provided.
            - the session/subscription managers are provided.
            
            The server is not running until all three steps are complete.
            
            The references returned from this object do not change after all three states are complete. 
            This ensures the object is thread safe even though it does not use a lock.
            Objects returned from this object can be assumed to be threadsafe unless otherwise stated.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.#ctor(Opc.Ua.ServerProperties,Opc.Ua.ApplicationConfiguration,Opc.Ua.ServiceMessageContext,Opc.Ua.CertificateValidator,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes the datastore with the server configuration.
            </summary>
            <param name="serverDescription">The server description.</param>
            <param name="configuration">The configuration.</param>
            <param name="messageContext">The message context.</param>
            <param name="certificateValidator">The certificate validator.</param>
            <param name="instanceCertificate">The instance certificate.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.SessionManager">
            <summary>
            The session manager to use with the server.
            </summary>
            <value>The session manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.SubscriptionManager">
            <summary>
            The subscription manager to use with the server.
            </summary>
            <value>The subscription manager.</value>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.SetNodeManager(Technosoftware.UaServer.NodeManager.MasterNodeManager)">
            <summary>
            Stores the MasterNodeManager and the CoreNodeManager
            </summary>
            <param name="nodeManager">The node manager.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.CreateServerObject(Technosoftware.UaServer.NodeManager.EventManager,Technosoftware.UaServer.NodeManager.ResourceManager,Technosoftware.UaServer.Server.RequestManager)">
            <summary>
            Sets the EventManager, the ResourceManager, the RequestManager and the AggregateManager.
            </summary>
            <param name="eventManager">The event manager.</param>
            <param name="resourceManager">The resource manager.</param>
            <param name="requestManager">The request manager.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.SetSessionManager(Technosoftware.UaServer.Sessions.SessionManager,Technosoftware.UaServer.Subscriptions.SubscriptionManager)">
            <summary>
            Stores the SessionManager, the SubscriptionManager in the datastore.
            </summary>
            <param name="sessionManager">The session manager.</param>
            <param name="subscriptionManager">The subscription manager.</param>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.EndpointAddresses">
            <summary>
            The endpoint addresses used by the server.
            </summary>
            <value>The endpoint addresses.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.MessageContext">
            <summary>
            The context to use when serializing/deserializing extension objects.
            </summary>
            <value>The message context.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.DefaultSystemContext">
            <summary>
            The default system context for the server.
            </summary>
            <value>The default system context.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.NamespaceUris">
            <summary>
            The table of namespace uris known to the server.
            </summary>
            <value>The namespace URIs.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.ServerUris">
            <summary>
            The table of remote server uris known to the server.
            </summary>
            <value>The server URIs.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.Factory">
            <summary>
            The factory used to create encodeable objects that the server understands.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.TypeTree">
            <summary>
            The datatypes, object types and variable types known to the server.
            </summary>
            <value>The type tree.</value>
            <remarks>
            The type tree table is a global object that all components of a server have access to.
            Node managers must populate this table with all types that they define.
            This object is thread safe.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.NodeManager">
            <summary>
            The master node manager for the server.
            </summary>
            <value>The node manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.CoreNodeManager">
            <summary>
            The internal node manager for the servers.
            </summary>
            <value>The core node manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.DiagnosticsNodeManager">
            <summary>
            Returns the node manager that managers the server diagnostics.
            </summary>
            <value>The diagnostics node manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.EventManager">
            <summary>
            The manager for events that all components use to queue events that occur.
            </summary>
            <value>The event manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.ResourceManager">
            <summary>
            A manager for localized resources that components can use to localize text.
            </summary>
            <value>The resource manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.RequestManager">
            <summary>
            A manager for outstanding requests that allows components to receive notifications if the timeout or are cancelled.
            </summary>
            <value>The request manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.AggregateManager">
            <summary>
            A manager for aggregate calculators supported by the server.
            </summary>
            <value>The aggregate manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.Technosoftware#UaServer#IUaServerData#SessionManager">
            <summary>
            The manager for active sessions.
            </summary>
            <value>The session manager.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.Technosoftware#UaServer#IUaServerData#SubscriptionManager">
            <summary>
            The manager for active subscriptions.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.Status">
            <summary>
            Returns the status object for the server.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.CurrentState">
            <summary>
            Gets or sets the current state of the server.
            </summary>
            <value>The state of the current.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.DiagnosticsLock">
            <summary>
            Used to synchronize access to the server diagnostics.
            </summary>
            <value>The diagnostics lock.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.DiagnosticsWriteLock">
            <summary>
            Used to synchronize write access to
            the server diagnostics.
            </summary>
            <value>The diagnostics lock.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.ServerDiagnostics">
            <summary>
            Returns the diagnostics structure for the server.
            </summary>
            <value>The server diagnostics.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.IsRunning">
            <summary>
            Whether the server is currently running.
            </summary>
            <value>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
            <remarks>
            This flag is set to false when the server shuts down. Threads running should check this flag whenever
            they return from a blocking operation. If it is false the thread should clean up and terminate.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.Server.GenericServerData.DiagnosticsEnabled">
            <summary>
            Whether the server is collecting diagnostics.
            </summary>
            <value><c>true</c> if diagnostics are enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.CloseSession(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Closes the specified session.
            </summary>
            <param name="context">The context.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="deleteSubscriptions">if set to <c>true</c> subscriptions are to be deleted.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.DeleteSubscription(System.UInt32)">
            <summary>
            Deletes the specified subscription.
            </summary>
            <param name="subscriptionId">The subscription identifier.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.ReportEvent(Opc.Ua.IFilterTarget)">
            <summary>
            Called by any component to report a global event.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.ReportEvent(Opc.Ua.ISystemContext,Opc.Ua.IFilterTarget)">
            <summary>
            Called by any component to report a global event.
            </summary>
            <param name="context">The context.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.ConditionRefresh(Technosoftware.UaServer.UaServerOperationContext,System.UInt32)">
            <summary>
            Refreshes the conditions for the specified subscription.
            </summary>
            <param name="context">The context.</param>
            <param name="subscriptionId">The subscription identifier.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.CreateServerObject">
            <summary>
            Creates the ServerObject and attaches it to the NodeManager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.OnReadServerStatus(Opc.Ua.ISystemContext,Opc.Ua.BaseVariableValue,Opc.Ua.NodeState)">
            <summary>
            Updates the server status before a read.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.OnReadNamespaceArray(Opc.Ua.ISystemContext,Opc.Ua.NodeState,System.Object@)">
            <summary>
            Returns a copy of the namespace array.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.OnReadServerArray(Opc.Ua.ISystemContext,Opc.Ua.NodeState,System.Object@)">
            <summary>
            Returns a copy of the server array.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.OnReadDiagnosticsEnabledFlag(Opc.Ua.ISystemContext,Opc.Ua.NodeState,System.Object@)">
            <summary>
            Returns Diagnostics.EnabledFlag
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.OnWriteDiagnosticsEnabledFlag(Opc.Ua.ISystemContext,Opc.Ua.NodeState,System.Object@)">
            <summary>
            Sets the Diagnostics.EnabledFlag
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.GenericServerData.OnUpdateDiagnostics(Opc.Ua.ISystemContext,Opc.Ua.NodeState,System.Object@)">
            <summary>
            Returns a copy of the current diagnostics.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Server.RequestCancelledEventArgs">
            <summary>
                The event arguments provided when a new notification message arrives.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.RequestCancelledEventArgs.#ctor(System.UInt32,Opc.Ua.StatusCode)">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Server.RequestCancelledEventArgs.RequestId">
            <summary>
                The request ID.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Server.RequestCancelledEventArgs.StatusCode">
            <summary>
                Thestatus of the operation.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Server.RequestManager">
            <summary>
            An object that manages requests from within the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.RequestManager.#ctor(Technosoftware.UaServer.IUaServerData)">
            <summary>
            Initilizes the manager.
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.RequestManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.RequestManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="E:Technosoftware.UaServer.Server.RequestManager.RequestCancelledEvent">
            <summary>
            Raised when the status of an outstanding request changes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.RequestManager.RequestReceived(Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            Called when a new request arrives.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Technosoftware.UaServer.Server.RequestManager.RequestCompleted(Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            Called when a request completes (normally or abnormally).
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.RequestManager.CancelRequests(System.UInt32,System.UInt32@)">
            <summary>
            Called when the client wishes to cancel one or more requests.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Server.RequestManager.OnTimerExpired(System.Object)">
            <summary>
            Checks for any expired requests and changes their status.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Sessions.RequestType">
            <summary>
            The set of all service request types (used for collecting diagnostics and checking permissions).
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.Unknown">
            <summary>
            The request type is not known.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.FindServers">
            <see cref="!:IDiscoveryServer.FindServers" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.GetEndpoints">
            <see cref="!:IDiscoveryServer.GetEndpoints" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.CreateSession">
            <see cref="!:ISessionServer.CreateSession" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.ActivateSession">
            <see cref="!:ISessionServer.ActivateSession" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.CloseSession">
            <see cref="!:ISessionServer.CloseSession" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.Cancel">
            <see cref="!:ISessionServer.Cancel" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.Read">
            <see cref="!:ISessionServer.Read" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.HistoryRead">
            <see cref="!:ISessionServer.HistoryRead" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.Write">
            <see cref="!:ISessionServer.Write" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.HistoryUpdate">
            <see cref="!:ISessionServer.HistoryUpdate" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.Call">
            <see cref="!:ISessionServer.Call" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.CreateMonitoredItems">
            <see cref="!:ISessionServer.CreateMonitoredItems" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.ModifyMonitoredItems">
            <see cref="!:ISessionServer.ModifyMonitoredItems" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.SetMonitoringMode">
            <see cref="!:ISessionServer.SetMonitoringMode" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.SetTriggering">
            <see cref="!:ISessionServer.SetTriggering" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.DeleteMonitoredItems">
            <see cref="!:ISessionServer.DeleteMonitoredItems" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.CreateSubscription">
            <see cref="!:ISessionServer.CreateSubscription" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.ModifySubscription">
            <see cref="!:ISessionServer.ModifySubscription" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.SetPublishingMode">
            <see cref="!:ISessionServer.SetPublishingMode" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.Publish">
            <see cref="!:ISessionServer.Publish" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.Republish">
            <see cref="!:ISessionServer.Republish" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.TransferSubscriptions">
            <see cref="!:ISessionServer.TransferSubscriptions" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.DeleteSubscriptions">
            <see cref="!:ISessionServer.DeleteSubscriptions" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.AddNodes">
            <see cref="!:ISessionServer.AddNodes" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.AddReferences">
            <see cref="!:ISessionServer.AddReferences" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.DeleteNodes">
            <see cref="!:ISessionServer.DeleteNodes" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.DeleteReferences">
            <see cref="!:ISessionServer.DeleteReferences" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.Browse">
            <see cref="!:ISessionServer.Browse" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.BrowseNext">
            <see cref="!:ISessionServer.BrowseNext" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.TranslateBrowsePathsToNodeIds">
            <see cref="!:ISessionServer.TranslateBrowsePathsToNodeIds" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.QueryFirst">
            <see cref="!:ISessionServer.QueryFirst" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.QueryNext">
            <see cref="!:ISessionServer.QueryNext" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.RegisterNodes">
            <see cref="!:ISessionServer.RegisterNodes" />
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.RequestType.UnregisterNodes">
            <see cref="!:ISessionServer.UnregisterNodes" />
        </member>
        <member name="T:Technosoftware.UaServer.Sessions.Session">
            <summary>
            A generic session manager object for a server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.#ctor(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.IUaServerData,System.Security.Cryptography.X509Certificates.X509Certificate2,Opc.Ua.NodeId,System.Byte[],System.Byte[],System.String,Opc.Ua.ApplicationDescription,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Double,System.UInt32,System.Double,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Technosoftware.UaServer.Sessions.Session"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="server">The Server object.</param>
            <param name="serverCertificate">The server certificate.</param>
            <param name="authenticationToken">The unique private identifier assigned to the Session.</param>
            <param name="clientNonce">The client nonce.</param>
            <param name="serverNonce">The server nonce.</param>
            <param name="sessionName">The name assigned to the Session.</param>
            <param name="clientDescription">Application description for the client application.</param>
            <param name="endpointUrl">The endpoint URL.</param>
            <param name="clientCertificate">The client certificate.</param>
            <param name="sessionTimeout">The session timeout.</param>
            <param name="maxResponseMessageSize">The maximum size of a response message</param>
            <param name="maxRequestAge">The max request age.</param>
            <param name="maxBrowseContinuationPoints">The maximum number of browse continuation points.</param>
            <param name="maxHistoryContinuationPoints">The maximum number of history continuation points.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.Id">
            <summary>
            Gets the identifier assigned to the session when it was created.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.Identity">
            <summary>
            The user identity provided by the client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.EffectiveIdentity">
            <summary>
            The application defined mapping for user identity provided by the client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.IdentityToken">
            <summary>
            The user identity token provided by the client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.DiagnosticsLock">
            <summary>
            A lock which must be acquired before accessing the diagnostics.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.SessionDiagnostics">
            <summary>
            The diagnostics associated with the session.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.ServerCertificateChain">
            <summary>
            Gets or sets the server certificate chain.
            </summary>
            <value>
            The server certificate chain.
            </value>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.ClientNonce">
            <summary>
            The client Nonce associated with the session.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.ClientCertificate">
            <summary>
            The application instance certificate associated with the client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.PreferredLocales">
            <summary>
            The locales requested when the session was created.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.HasExpired">
            <summary>
            Whether the session timeout has elapsed since the last communication from the client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.Session.IsActivated">
            <summary>
            Whether the session has been activated.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.ValidateRequest(Opc.Ua.RequestHeader,Technosoftware.UaServer.Sessions.RequestType)">
            <summary>
            Validates the request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.IsSecureChannelValid(System.String)">
            <summary>
            Checks if the secure channel is currently valid.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.UpdateLocaleIds(Opc.Ua.StringCollection)">
            <summary>
            Updates the requested locale ids.
            </summary>
            <returns>true if the new locale ids are different from the old locale ids.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.ValidateBeforeActivate(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.SignatureData,System.Collections.Generic.List{Opc.Ua.SoftwareCertificate},Opc.Ua.ExtensionObject,Opc.Ua.SignatureData,Opc.Ua.StringCollection,System.Byte[],Opc.Ua.UserIdentityToken@,Opc.Ua.UserTokenPolicy@)">
            <summary>
            Activates the session and binds it to the current secure channel.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.Activate(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.List{Opc.Ua.SoftwareCertificate},Opc.Ua.UserIdentityToken,Opc.Ua.IUserIdentity,Opc.Ua.IUserIdentity,Opc.Ua.StringCollection,System.Byte[])">
            <summary>
            Activates the session and binds it to the current secure channel.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.Close">
            <summary>
            Closes a session and removes itself from the address space.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.SaveContinuationPoint(Technosoftware.UaServer.UaContinuationPoint)">
            <summary>
            Saves a continuation point for a session.
            </summary>
            <remarks>
            If the session has too many continuation points the oldest one is dropped.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.RestoreContinuationPoint(System.Byte[])">
            <summary>
            Restores a continuation point for a session.
            </summary>
            <remarks>
            The caller is responsible for disposing the continuation point returned.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.SaveHistoryContinuationPoint(System.Guid,System.Object)">
            <summary>
            Saves a continuation point used for historical reads.
            </summary>
            <param name="id">The identifier for the continuation point.</param>
            <param name="continuationPoint">The continuation point.</param>
            <remarks>
            If the continuationPoint implements IDisposable it will be disposed when
            the Session is closed or discarded.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.RestoreHistoryContinuationPoint(System.Byte[])">
            <summary>
            Restores a previously saves history continuation point.
            </summary>
            <param name="continuationPoint">The identifier for the continuation point.</param>
            <returns>The save continuation point. null if not found.</returns>
        </member>
        <member name="T:Technosoftware.UaServer.Sessions.Session.HistoryContinuationPoint">
            <summary>
            Stores a continuation point used for historial reads.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.InitializeSessionAuditEvent(Technosoftware.UaServer.UaServerContext,Opc.Ua.AuditEventState,Opc.Ua.TranslationInfo)">
            <summary>
            Initializes a session audit event.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.ReportAuditCreateSessionEvent(Technosoftware.UaServer.UaServerContext)">
            <summary>
            Reports an audit create session event.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.ReportAuditActivateSessionEvent(Technosoftware.UaServer.UaServerContext)">
            <summary>
            Reports an audit activate session event.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.TraceState(System.String)">
            <summary>
            Dumps the current state of the session queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.OnUpdateDiagnostics(Opc.Ua.ISystemContext,Opc.Ua.NodeState,System.Object@)">
            <summary>
            Returns a copy of the current diagnostics.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.OnUpdateSecurityDiagnostics(Opc.Ua.ISystemContext,Opc.Ua.NodeState,System.Object@)">
            <summary>
            Returns a copy of the current security diagnostics.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.ValidateUserIdentityToken(Opc.Ua.ExtensionObject,Opc.Ua.SignatureData,Opc.Ua.UserTokenPolicy@)">
            <summary>
            Validates the identity token supplied by the client.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.UpdateUserIdentity(Opc.Ua.UserIdentityToken,Opc.Ua.IUserIdentity,Opc.Ua.IUserIdentity)">
            <summary>
            Updates the user identity.
            </summary>
            <returns>true if the new identity is different from the old identity.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.Session.UpdateDiagnosticCounters(Technosoftware.UaServer.Sessions.RequestType,System.Boolean,System.Boolean)">
            <summary>
            Updates the diagnostic counters associated with the request.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Sessions.SessionEventArgs">
            <summary>
                A class which provides the event arguments for session related event.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionEventArgs.#ctor(Technosoftware.UaServer.Sessions.SessionEventReason)">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Sessions.SessionEventArgs.Reason">
            <summary>
                The possible reasons for a session related event.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Sessions.SessionEventReason">
            <summary>
                The possible reasons for a session related event.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.SessionEventReason.Created">
            <summary>
                A new session was created.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.SessionEventReason.Impersonating">
            <summary>
                A session is being activated with a new user identity.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.SessionEventReason.Activated">
            <summary>
                A session was activated and the user identity or preferred locales changed.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.Sessions.SessionEventReason.Closing">
            <summary>
                A session is about to be closed.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Sessions.SessionManager">
            <summary>
            A generic session manager object for a server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.#ctor(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Initializes the manager with its configuration.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="E:Technosoftware.UaServer.Sessions.SessionManager.SessionCreatedEvent">
            <summary cref="E:Technosoftware.UaServer.IUaSessionManager.SessionCreatedEvent" />
        </member>
        <member name="E:Technosoftware.UaServer.Sessions.SessionManager.SessionActivatedEvent">
            <summary cref="E:Technosoftware.UaServer.IUaSessionManager.SessionActivatedEvent" />
        </member>
        <member name="E:Technosoftware.UaServer.Sessions.SessionManager.SessionClosingEvent">
            <summary cref="E:Technosoftware.UaServer.IUaSessionManager.SessionClosingEvent" />
        </member>
        <member name="E:Technosoftware.UaServer.Sessions.SessionManager.ImpersonateUserEvent">
            <summary cref="E:Technosoftware.UaServer.IUaSessionManager.ImpersonateUserEvent" />
        </member>
        <member name="E:Technosoftware.UaServer.Sessions.SessionManager.ValidateSessionLessRequestEvent">
            <summary cref="E:Technosoftware.UaServer.IUaSessionManager.ValidateSessionLessRequestEvent" />
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.GetSessions">
            <summary>
                Returns all of the sessions known to the session manager.
            </summary>
            <returns>A list of the sessions.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.Startup">
            <summary>
            Starts the session manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.Shutdown">
            <summary>
            Stops the session manager and closes all sessions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.CreateSession(Technosoftware.UaServer.UaServerOperationContext,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.Byte[],Opc.Ua.ApplicationDescription,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Double,System.UInt32,Opc.Ua.NodeId@,Opc.Ua.NodeId@,System.Byte[]@,System.Double@)">
            <summary>
            Creates a new session.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.ActivateSession(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,Opc.Ua.SignatureData,System.Collections.Generic.List{Opc.Ua.SoftwareCertificate},Opc.Ua.ExtensionObject,Opc.Ua.SignatureData,Opc.Ua.StringCollection,System.Byte[]@)">
            <summary>
            Activates an existing session
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.CloseSession(Opc.Ua.NodeId)">
            <summary>
            Closes the specifed session.
            </summary>
            <remarks>
            This method should not throw an exception if the session no longer exists.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.ValidateRequest(Opc.Ua.RequestHeader,Technosoftware.UaServer.Sessions.RequestType)">
            <summary>
            Validates request header and returns a request context.
            </summary>
            <remarks>
            This method verifies that the session id valid and that it uses secure channel id
            associated with with current thread. It also verifies that the timestamp is not too 
            and that the sequence number is not out of order (update requests only).
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.CreateSession(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.IUaServerData,System.Security.Cryptography.X509Certificates.X509Certificate2,Opc.Ua.NodeId,System.Byte[],System.Byte[],System.String,Opc.Ua.ApplicationDescription,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Double,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a session.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.RaiseSessionEvent(Technosoftware.UaServer.Sessions.Session,Technosoftware.UaServer.Sessions.SessionEventReason)">
            <summary>
            Raises an event related to a session.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Sessions.SessionManager.MonitorSessions(System.Object)">
            <summary>
            Periodically checks if the sessions have timed out.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Subscriptions.AsyncPublishOperation">
            <summary>
            Stores the state of an asynchrounous publish operation.
            </summary>  
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.AsyncPublishOperation.#ctor(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.IEndpointIncomingRequest,Technosoftware.UaServer.Server.GenericServer)">
            <summary>
            Initializes a new instance of the <see cref="T:Technosoftware.UaServer.Subscriptions.AsyncPublishOperation"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="request">The request.</param>
            <param name="server">The server.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.AsyncPublishOperation.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.AsyncPublishOperation.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.AsyncPublishOperation.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.AsyncPublishOperation.RequestHandle">
            <summary>
            Gets the request handle.
            </summary>
            <value>The request handle.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.AsyncPublishOperation.Response">
            <summary>
            Gets the response.
            </summary>
            <value>The response.</value>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.AsyncPublishOperation.Calldata">
            <summary>
            Gets the calldata.
            </summary>
            <value>The calldata.</value>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.AsyncPublishOperation.CompletePublish(System.Object)">
            <summary>
            Schedules a thread to complete the request.
            </summary>
            <param name="calldata">The data that is used to complete the operation</param>
        </member>
        <member name="T:Technosoftware.UaServer.Subscriptions.SessionPublishQueue">
            <summary>
            Manages the publish queues for a session.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.#ctor(Technosoftware.UaServer.IUaServerData,Technosoftware.UaServer.Sessions.Session,System.Int32)">
            <summary>
            Creates a new queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.Close">
            <summary>
            Clears the queues because the session is closing.
            </summary>
            <returns>The list of subscriptions in the queue.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.Add(Technosoftware.UaServer.Subscriptions.Subscription)">
            <summary>
            Adds a subscription from the publish queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.Remove(Technosoftware.UaServer.Subscriptions.Subscription)">
            <summary>
            Removes a subscription from the publish queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.Acknowledge(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.SubscriptionAcknowledgementCollection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Processes acknowledgements for previously published messages.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.Publish(System.UInt32,System.DateTime,System.Boolean,Technosoftware.UaServer.Subscriptions.AsyncPublishOperation)">
            <summary>
            Returns a subscription that is ready to publish.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.CompletePublish(System.Boolean,Technosoftware.UaServer.Subscriptions.AsyncPublishOperation,System.Object)">
            <summary>
            Completes the publish.
            </summary>
            <param name="requeue">if set to <c>true</c> the request must be requeued.</param>
            <param name="operation">The asynchronous operation.</param>
            <param name="calldata">The calldata.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.PublishCompleted(Technosoftware.UaServer.Subscriptions.Subscription,System.Boolean)">
            <summary>
            Adds a subscription back into the queue because it has more notifications to publish.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.PublishTimerExpired">
            <summary>
            Checks the state of the subscriptions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.AssignSubscriptionToRequest(Technosoftware.UaServer.Subscriptions.SessionPublishQueue.QueuedSubscription)">
            <summary>
            Checks the state of the subscriptions.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.QueuedRequest">
            <summary>
            A request queued while waiting for a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.QueuedRequest.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.QueuedRequest.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.QueuedRequest.Wait(System.Int32)">
            <summary>
            Waits for the request to be processed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.QueuedRequest.Set">
            <summary>
            Sets the event that wakes up the publish thread.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.QueuedSubscription">
            <summary>
            Stores a subscription that has notifications ready to be sent back to the client.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SessionPublishQueue.TraceState(System.String,System.Object[])">
            <summary>
            Dumps the current state of the session queue.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Subscriptions.Subscription">
            <summary>
            Manages a subscription created by a client.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.#ctor(Technosoftware.UaServer.IUaServerData,Technosoftware.UaServer.Sessions.Session,System.UInt32,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Boolean,System.UInt32)">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.Subscription.Session">
            <summary>
            The session that owns the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.Subscription.Id">
            <summary>
            The unique identifier assigned to the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.ItemReadyToPublish(Technosoftware.UaServer.IUaMonitoredItem)">
            <summary>
            Queues an item that is ready to publish.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.ItemNotificationsAvailable(Technosoftware.UaServer.IUaMonitoredItem)">
            <summary>
            Tells the subscription that notifications are available but the item is not ready to publish.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.Subscription.SessionId">
            <summary>
            The identifier for the session that owns the subscription.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.Subscription.DiagnosticsLock">
            <summary>
            Gets the lock that must be acquired before accessing the contents of the Diagnostics property.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.Subscription.DiagnosticsWriteLock">
            <summary>
            Gets the lock that must be acquired before updating the contents of the Diagnostics property.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.Subscription.Diagnostics">
            <summary>
            Gets the current diagnostics for the subscription.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.Subscription.PublishingInterval">
            <summary>
            The publishing rate for the subscription.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.Subscription.MonitoredItemCount">
            <summary>
            The number of monitored items.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.Subscription.Priority">
            <summary>
            The priority assigned to the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.Delete(Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            Deletes the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.PublishTimerExpired">
            <summary>
            Checks if the subscription is ready to publish.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.SessionClosed">
            <summary>
            Tells the subscription that the owning session is being closed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.ResetKeepaliveCount">
            <summary>
            Resets the keepalive counter.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.ResetLifetimeCount">
            <summary>
            Resets the lifetime count.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.QueueOverflowHandler">
            <summary>
            Update the monitoring queue overflow count.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.Acknowledge(Technosoftware.UaServer.UaServerOperationContext,System.UInt32)">
            <summary>
            Removes a message from the message queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.Publish(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.UInt32Collection@,System.Boolean@)">
            <summary>
            Returns all available notifications.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.PublishTimeout">
            <summary>
            Publishes a timeout status message.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.InnerPublish(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.UInt32Collection@,System.Boolean@)">
            <summary>
            Returns all available notifications.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.ConstructMessage(System.Collections.Generic.Queue{Opc.Ua.EventFieldList},System.Collections.Generic.Queue{Opc.Ua.MonitoredItemNotification},System.Collections.Generic.Queue{Opc.Ua.DiagnosticInfo},System.Int32@)">
            <summary>
            Construct a message from the queues.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.Republish(Technosoftware.UaServer.UaServerOperationContext,System.UInt32)">
            <summary>
            Returns a cached notification message.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.Modify(Technosoftware.UaServer.UaServerOperationContext,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Byte)">
            <summary>
            Updates the publishing parameters for the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.SetPublishingMode(Technosoftware.UaServer.UaServerOperationContext,System.Boolean)">
            <summary>
            Enables/disables publishing for the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.SetTriggering(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,Opc.Ua.UInt32Collection,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Updates the triggers for the monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.CreateMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoredItemCreateRequestCollection,Opc.Ua.MonitoredItemCreateResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Adds monitored items to a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.AddItemToSamplingInterval(System.Double,Opc.Ua.MonitoringMode)">
            <summary>
            Adds an item to the sampling interval.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.ModifyItemSamplingInterval(System.Double,System.Double,Opc.Ua.MonitoringMode)">
            <summary>
            Adds an item to the sampling interval.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.RemoveItemToSamplingInterval(System.Double,Opc.Ua.MonitoringMode)">
            <summary>
            Removes an item from the sampling interval.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.ModifyItemMonitoringMode(System.Double,Opc.Ua.MonitoringMode,Opc.Ua.MonitoringMode)">
            <summary>
            Changes the monitoring mode for an item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.ModifyMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoredItemModifyRequestCollection,Opc.Ua.MonitoredItemModifyResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Modifies monitored items in a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.DeleteMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Deletes the monitored items in a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.DeleteMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.UInt32Collection,System.Boolean,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Deletes the monitored items in a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.SetMonitoringMode(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.MonitoringMode,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Changes the monitoring mode for a set of items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.ValidateConditionRefresh(Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            Verifies that a condition refresh operation is permitted.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.ConditionRefresh">
            <summary>
            Refreshes the conditions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.GetMonitoredItems(System.UInt32[]@,System.UInt32[]@)">
            <summary>
            Gets the monitored items for the subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.OnUpdateDiagnostics(Opc.Ua.ISystemContext,Opc.Ua.NodeState,System.Object@)">
            <summary>
            Returns a copy of the current diagnostics.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.VerifySession(Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            Throws an exception if the session is not the owner.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.Subscription.TraceState(System.String)">
            <summary>
            Dumps the current state of the session queue.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Subscriptions.SubscriptionEventArgs">
            <summary>
                A class which provides the event arguments for subscription related event.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionEventArgs.#ctor(System.Boolean)">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.Subscriptions.SubscriptionEventArgs.Deleted">
            <summary>
                True if the subscription was deleted.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.Subscriptions.SubscriptionManager">
            <summary>
            A generic session manager object for a server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.#ctor(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
            Initializes the manager with its configuration.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="E:Technosoftware.UaServer.Subscriptions.SubscriptionManager.SubscriptionCreated">
            <summary>
            Raised after a new subscription is created.
            </summary>
        </member>
        <member name="E:Technosoftware.UaServer.Subscriptions.SubscriptionManager.SubscriptionDeleted">
            <summary>
            Raised before a subscription is deleted.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.GetSubscriptions">
            <summary>
            Returns all of the subscriptions known to the subscription manager.
            </summary>
            <returns>A list of the subscriptions.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.RaiseSubscriptionEvent(Technosoftware.UaServer.Subscriptions.Subscription,System.Boolean)">
            <summary>
            Raises an event related to a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.Startup">
            <summary>
            Starts up the manager makes it ready to create subscriptions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.Shutdown">
            <summary>
            Closes all subscriptions and rejects any new requests.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.SessionClosing(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Signals that a session is closing.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.ConditionRefresh(Technosoftware.UaServer.UaServerOperationContext,System.UInt32)">
            <summary>
            Refreshes the conditions for the specified subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.DoConditionRefresh(System.Object)">
            <summary>
            Completes a refresh conditions request.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.DeleteSubscription(Technosoftware.UaServer.UaServerOperationContext,System.UInt32)">
            <summary>
            Deletes the specified subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.UpdateCurrentMonitoredItemsCount(Opc.Ua.SessionDiagnosticsDataType,System.Int32)">
            <summary>
            Updates the current monitored item count for the session.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.GetPublishingIntervalCount">
            <summary>
            Gets the total number of publishing intervals in use.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.CreateSubscription(Technosoftware.UaServer.UaServerOperationContext,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Byte,System.UInt32@,System.Double@,System.UInt32@,System.UInt32@)">
            <summary>
            Creates a new subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.DeleteSubscriptions(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Deletes group of subscriptions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.Publish(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.SubscriptionAcknowledgementCollection,Technosoftware.UaServer.Subscriptions.AsyncPublishOperation,System.UInt32@,Opc.Ua.UInt32Collection@,System.Boolean@,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Publishes a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.SubscriptionExpired(Technosoftware.UaServer.Subscriptions.Subscription)">
            <summary>
            Called when a subscription expires.
            </summary>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.CompletePublish(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.Subscriptions.AsyncPublishOperation)">
            <summary>
            Completes the publish.
            </summary>
            <param name="context">The context.</param>
            <param name="operation">The asynchronous operation.</param>
            <returns>
            True if successful. False if the request has been requeued.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.GetNextMessage(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.Subscriptions.SessionPublishQueue,Technosoftware.UaServer.Subscriptions.AsyncPublishOperation,System.UInt32@,Opc.Ua.UInt32Collection@,System.Boolean@)">
            <summary>
            Publishes a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.ModifySubscription(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Double@,System.UInt32@,System.UInt32@)">
            <summary>
            Modifies an existing subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.SetPublishingMode(Technosoftware.UaServer.UaServerOperationContext,System.Boolean,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Sets the publishing mode for a set of subscriptions.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.TransferSubscriptions(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.UInt32Collection,Opc.Ua.TransferResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Attaches a groups a subscriptions to a different sesssion.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.Republish(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.UInt32)">
            <summary>
            Republishes a previously published notification message.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.SetTriggering(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.UInt32,Opc.Ua.UInt32Collection,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Updates the triggers for the monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.CreateMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoredItemCreateRequestCollection,Opc.Ua.MonitoredItemCreateResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Adds monitored items to a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.ModifyMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoredItemModifyRequestCollection,Opc.Ua.MonitoredItemModifyResultCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Modifies monitored items in a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.DeleteMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Deletes the monitored items in a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.SetMonitoringMode(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,Opc.Ua.MonitoringMode,Opc.Ua.UInt32Collection,Opc.Ua.StatusCodeCollection@,Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Changes the monitoring mode for a set of items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.CalculatePublishingInterval(System.Double)">
            <summary>
            Calculates the publishing interval.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.CalculateKeepAliveCount(System.Double,System.UInt32)">
            <summary>
            Calculates the keep alive count.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.CalculateLifetimeCount(System.Double,System.UInt32,System.UInt32)">
            <summary>
            Calculates the lifetime count.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.CalculateMaxNotificationsPerPublish(System.UInt32)">
            <summary>
            Calculates the maximum number of notifications per publish.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.CreateSubscription(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Boolean)">
            <summary>
            Creates a new instance of a subscription.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.PublishSubscriptions(System.Object)">
            <summary>
            Periodically checks if the sessions have timed out.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.CleanupSubscriptions(Technosoftware.UaServer.IUaServerData,System.Collections.Generic.IList{Technosoftware.UaServer.Subscriptions.Subscription})">
            <summary>
            Cleanups the subscriptions.
            </summary>
            <param name="server">The server.</param>
            <param name="subscriptionsToDelete">The subscriptions to delete.</param>
        </member>
        <member name="M:Technosoftware.UaServer.Subscriptions.SubscriptionManager.CleanupSubscriptions(System.Object)">
            <summary>
            Deletes any expired subscriptions.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.UaApplicationInstance">
            <summary>
                A class that install, configures and runs a UA application.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaApplicationInstance.#ctor">
            <summary>
                Constructs an UaApplicationInstance object with default values
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaApplicationInstance.#ctor(Opc.Ua.ApplicationType)">
            <summary>
                Constructs an UaApplicationInstance object with the specified application type
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaApplicationInstance.ProcessCommandLine">
            <summary>
                Processes the command line.
            </summary>
            <returns>
                True if the arguments were processed; False otherwise.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaApplicationInstance.ProcessCommandLine(System.String[])">
            <summary>
                Processes the command line.
            </summary>
            <param name="args">Command line arguments</param>
            <returns>
                True if the arguments were processed; False otherwise.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaApplicationInstance.ProcessCommandLine(System.Reflection.Assembly,System.String[])">
            <summary>
                Processes the command line.
            </summary>
            <param name="assembly">The assembbly containing the installation configuration resource.</param>
            <param name="args">Command line arguments</param>
            <returns>
                True if the arguments were processed; False otherwise.
            </returns>
        </member>
        <member name="T:Technosoftware.UaServer.UaBaseNodeManager">
            <summary>
            A base implementation of the IUaNodeManager interface.
            </summary>
            <remarks>
            This node manager is a base class used in multiple samples. It implements the IUaNodeManager
            interface and allows sub-classes to override only the methods that they need. 
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.#ctor(Technosoftware.UaServer.IUaServer,Technosoftware.UaServer.IUaServerPlugin,Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration,System.String[])">
            <summary>
                Initializes the node manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.#ctor(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration,System.String[])">
            <summary>
            Initializes the node manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.NamespaceUris">
            <summary>
            Returns the namespaces used by the node manager.
            </summary>
            <remarks>
            All NodeIds exposed by the node manager must be qualified by a namespace URI. This property
            returns the URIs used by the node manager. In this example all NodeIds use a single URI.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateAddressSpace(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Does any initialization required before the address space can be used.
            </summary>
            <remarks>
            The externalReferences is an out parameter that allows the node manager to link to nodes
            in other node managers. For example, the 'Objects' node is managed by the CoreNodeManager and
            should have a reference to the root folder node(s) exposed by this node manager.  
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.LoadPredefinedNodes(Opc.Ua.ISystemContext,System.Reflection.Assembly,System.String,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Loads a node set from a file or resource and addes them to the set of predefined nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.LoadPredefinedNodes(Opc.Ua.ISystemContext)">
            <summary>
            Loads a node set from a file or resource and addes them to the set of predefined nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.LoadPredefinedNodes(Opc.Ua.ISystemContext,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Loads a node set from a file or resource and addes them to the set of predefined nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.AddBehaviourToPredefinedNode(Opc.Ua.ISystemContext,Opc.Ua.NodeState)">
            <summary>
            Replaces the generic node with a node specific to the model.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.AddPredefinedNode(Opc.Ua.ISystemContext,Opc.Ua.NodeState)">
            <summary>
            Recursively indexes the node and its children.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.RemovePredefinedNode(Opc.Ua.ISystemContext,Opc.Ua.NodeState,System.Collections.Generic.List{Technosoftware.UaServer.NodeManager.LocalReference})">
            <summary>
            Recursively indexes the node and its children.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.OnNodeRemoved(Opc.Ua.NodeState)">
            <summary>
            Called after a node has been deleted.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.AddReverseReferences(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Ensures that all reverse references exist.
            </summary>
            <param name="externalReferences">A list of references to add to external targets.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.AddExternalReference(Opc.Ua.NodeId,Opc.Ua.NodeId,System.Boolean,Opc.Ua.NodeId,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            Adds an external reference to the dictionary.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.AddTypesToTypeTree(Opc.Ua.BaseTypeState)">
            <summary>
            Recursively adds the types to the type tree.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.AddTypesToTypeTree(Opc.Ua.NodeId)">
            <summary>
            Recursively adds the types to the type tree.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.FindPredefinedNode(Opc.Ua.NodeId,System.Type)">
            <summary>
            Finds the specified and checks if it is of the expected type. 
            </summary>
            <returns>Returns null if not found or not of the correct type.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.DeleteAddressSpace">
            <summary>
            Frees any resources allocated for the address space.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.GetManagerHandle(Opc.Ua.NodeId)">
            <summary>
            Returns a unique handle for the node.
            </summary>
            <remarks>
            This must efficiently determine whether the node belongs to the node manager. If it does belong to 
            NodeManager it should return a handle that does not require the NodeId to be validated again when
            the handle is passed into other methods such as 'Read' or 'Write'.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.GetManagerHandle(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeId,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Returns a unique handle for the node.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.AddReferences(System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}})">
            <summary>
            This method is used to add bi-directional references to nodes from other node managers.
            </summary>
            <remarks>
            The additional references are optional, however, the NodeManager should support them.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.DeleteReference(System.Object,Opc.Ua.NodeId,System.Boolean,Opc.Ua.ExpandedNodeId,System.Boolean)">
            <summary>
            This method is used to delete bi-directional references to nodes from other node managers.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.GetNodeMetadata(Technosoftware.UaServer.UaServerOperationContext,System.Object,Opc.Ua.BrowseResultMask)">
            <summary>
            Returns the basic metadata for the node. Returns null if the node does not exist.
            </summary>
            <remarks>
            This method validates any placeholder handle.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.Browse(Technosoftware.UaServer.UaServerOperationContext,Technosoftware.UaServer.UaContinuationPoint@,System.Collections.Generic.IList{Opc.Ua.ReferenceDescription})">
            <summary>
            Browses the references from a node managed by the node manager.
            </summary>
            <remarks>
            The continuation point is created for every browse operation and contains the browse parameters.
            The node manager can store its state information in the Data and Index properties.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.ValidateViewDescription(Technosoftware.UaServer.UaServerContext,Opc.Ua.ViewDescription)">
            <summary>
            Validates the view description passed to a browse request (throws on error).
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.IsNodeInView(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaContinuationPoint,Opc.Ua.NodeState)">
            <summary>
            Checks if the node is in the view.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.IsNodeInView(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeId,Opc.Ua.NodeState)">
            <summary>
            Checks if the node is in the view.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.IsReferenceInView(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaContinuationPoint,Opc.Ua.IReference)">
            <summary>
            Checks if the reference is in the view.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.IsNodeAccessibleForUser(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaContinuationPoint,Opc.Ua.NodeState)">
            <summary>
            Checks if the user is allowed to access this node.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.IsReferenceAccessibleForUser(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaContinuationPoint,Opc.Ua.IReference)">
            <summary>
            Checks if the user is allowed to access this reference.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.GetReferenceDescription(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.Dictionary{Opc.Ua.NodeId,Opc.Ua.NodeState},Opc.Ua.IReference,Technosoftware.UaServer.UaContinuationPoint)">
            <summary>
            Returns the references for the node that meets the criteria specified.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.TranslateBrowsePath(Technosoftware.UaServer.UaServerOperationContext,System.Object,Opc.Ua.RelativePathElement,System.Collections.Generic.IList{Opc.Ua.ExpandedNodeId},System.Collections.Generic.IList{Opc.Ua.NodeId})">
            <summary>
            Returns the target of the specified browse path fragment(s).
            </summary>
            <remarks>
            If reference exists but the node manager does not know the browse name it must 
            return the NodeId as an unresolvedTargetIds. The caller will try to check the
            browse name. 
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.Read(Technosoftware.UaServer.UaServerOperationContext,System.Double,System.Collections.Generic.IList{Opc.Ua.ReadValueId},System.Collections.Generic.IList{Opc.Ua.DataValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Reads the value for the specified attribute.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.FindNodeInCache(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Finds a node in the dynamic cache.
            </summary>
            <param name="context">The current context.</param>
            <param name="handle">The node handle.</param>
            <param name="cache">The cache to search.</param>
            <returns>The node if found. Null otherwise.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.ValidationComplete(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Opc.Ua.NodeState,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Marks the handle as validated and saves the node in the dynamic cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.ValidateNode(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Verifies that the specified node exists.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.Read(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.ReadValueId},System.Collections.Generic.IList{Opc.Ua.DataValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Validates the nodes and reads the values from the underlying source.
            </summary>
            <param name="context">The context.</param>
            <param name="nodesToRead">The nodes to read.</param>
            <param name="values">The values.</param>
            <param name="errors">The errors.</param>
            <param name="nodesToValidate">The nodes to validate.</param>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.Write(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.WriteValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Writes the value for the specified attributes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.Write(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.WriteValue},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Validates the nodes and writes the value to the underlying system.
            </summary>
            <param name="context">The context.</param>
            <param name="nodesToWrite">The nodes to write.</param>
            <param name="errors">The errors.</param>
            <param name="nodesToValidate">The nodes to validate.</param>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryRead(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.HistoryReadDetails,Opc.Ua.TimestampsToReturn,System.Boolean,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Reads the history for the specified nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryReleaseContinuationPoints(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Releases the continuation points.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryReadRawModified(Technosoftware.UaServer.UaServerContext,Opc.Ua.ReadRawModifiedDetails,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Reads raw history data.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryReadProcessed(Technosoftware.UaServer.UaServerContext,Opc.Ua.ReadProcessedDetails,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Reads processed history data.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryReadAtTime(Technosoftware.UaServer.UaServerContext,Opc.Ua.ReadAtTimeDetails,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Reads history data at specified times.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryReadEvents(Technosoftware.UaServer.UaServerContext,Opc.Ua.ReadEventDetails,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Reads history events.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryRead(Technosoftware.UaServer.UaServerContext,Opc.Ua.HistoryReadDetails,Opc.Ua.TimestampsToReturn,System.Boolean,System.Collections.Generic.IList{Opc.Ua.HistoryReadValueId},System.Collections.Generic.IList{Opc.Ua.HistoryReadResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Validates the nodes and reads the values from the underlying source.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryUpdate(Technosoftware.UaServer.UaServerOperationContext,System.Type,System.Collections.Generic.IList{Opc.Ua.HistoryUpdateDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Updates the history for the specified nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryUpdate(Technosoftware.UaServer.UaServerContext,System.Type,System.Collections.Generic.IList{Opc.Ua.HistoryUpdateDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Validates the nodes and updates the history.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryUpdateData(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.UpdateDataDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Updates the data history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryUpdateStructureData(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.UpdateStructureDataDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Updates the structured data history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryUpdateEvents(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.UpdateEventDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Updates the event history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryDeleteRawModified(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.DeleteRawModifiedDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Deletes the data history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryDeleteAtTime(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.DeleteAtTimeDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Deletes the data history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.HistoryDeleteEvents(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Opc.Ua.DeleteEventDetails},System.Collections.Generic.IList{Opc.Ua.HistoryUpdateResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.List{Technosoftware.UaServer.UaNodeHandle},System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
            Deletes the event history for one or more nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.Call(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.CallMethodRequest},System.Collections.Generic.IList{Opc.Ua.CallMethodResult},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Calls a method on the specified nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.Call(Opc.Ua.ISystemContext,Opc.Ua.CallMethodRequest,Opc.Ua.MethodState,Opc.Ua.CallMethodResult)">
            <summary>
            Calls a method on an object.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.SubscribeToEvents(Technosoftware.UaServer.UaServerOperationContext,System.Object,System.UInt32,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)">
            <summary>
            Subscribes or unsubscribes to events produced by the specified source.
            </summary>
            <remarks>
            This method is called when a event subscription is created or deletes. The node manager 
            must  start/stop reporting events for the specified object and all objects below it in 
            the notifier hierarchy.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.SubscribeToAllEvents(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)">
            <summary>
            Subscribes or unsubscribes to events produced by all event sources.
            </summary>
            <remarks>
            This method is called when a event subscription is created or deleted. The node 
            manager must start/stop reporting events for all objects that it manages.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.AddRootNotifier(Opc.Ua.NodeState)">
            <summary>
            Adds a root notifier.
            </summary>
            <param name="notifier">The notifier.</param>
            <remarks>
            A root notifier is a notifier owned by the NodeManager that is not the target of a 
            HasNotifier reference. These nodes need to be linked directly to the Server object.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.RemoveRootNotifier(Opc.Ua.NodeState)">
            <summary>
            Removes a root notifier previously added with AddRootNotifier.
            </summary>
            <param name="notifier">The notifier.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.OnReportEvent(Opc.Ua.ISystemContext,Opc.Ua.NodeState,Opc.Ua.IFilterTarget)">
            <summary>
            Reports an event for a root notifier.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.SubscribeToEvents(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeState,Technosoftware.UaServer.IUaEventMonitoredItem,System.Boolean)">
            <summary>
            Subscribes to events.
            </summary>
            <param name="context">The context.</param>
            <param name="source">The source.</param>
            <param name="monitoredItem">The monitored item.</param>
            <param name="unsubscribe">if set to <c>true</c> [unsubscribe].</param>
            <returns>Any error code.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.OnSubscribeToEvents(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.IUaMonitoredNode,System.Boolean)">
            <summary>
            Called after subscribing/unsubscribing to events.
            </summary>
            <param name="context">The context.</param>
            <param name="monitoredNode">The monitored node.</param>
            <param name="unsubscribe">if set to <c>true</c> unsubscribing.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.ConditionRefresh(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaEventMonitoredItem})">
            <summary>
            Tells the node manager to refresh any conditions associated with the specified monitored items.
            </summary>
            <remarks>
            This method is called when the condition refresh method is called for a subscription.
            The node manager must create a refresh event for each condition monitored by the subscription.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.UInt32,System.Double,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Opc.Ua.MonitoredItemCreateRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult},System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Int64@)">
            <summary>
            Creates a new set of monitored items for a set of variables.
            </summary>
            <remarks>
            This method only handles data change subscriptions. Event subscriptions are created by the SDK.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.OnCreateMonitoredItemsComplete(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem})">
            <summary>
            Called when a batch of monitored items has been created.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateMonitoredItem(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.UInt32,System.Double,Opc.Ua.DiagnosticsMasks,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoredItemCreateRequest,System.Int64@,Opc.Ua.MonitoringFilterResult@,Technosoftware.UaServer.IUaMonitoredItem@)">
            <summary>
            Creates a new set of monitored items for a set of variables.
            </summary>
            <remarks>
            This method only handles data change subscriptions. Event subscriptions are created by the SDK.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.ReadInitialValue(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Reads the initial value for a monitored item.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The item handle.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.OnMonitoredItemCreated(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Called after creating a MonitoredItem.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle for the node.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.ValidateMonitoringFilter(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.UInt32,System.Double,System.UInt32,Opc.Ua.ExtensionObject,Opc.Ua.MonitoringFilter@,Opc.Ua.Range@,Opc.Ua.MonitoringFilterResult@)">
            <summary>
            Validates the monitoring filter specified by the client.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.ReviseAggregateFilter(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.Double,System.UInt32,Technosoftware.UaServer.Aggregates.ServerAggregateFilter)">
            <summary>
            Revises an aggregate filter (may require knowledge of the variable being used). 
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle.</param>
            <param name="samplingInterval">The sampling interval for the monitored item.</param>
            <param name="queueSize">The queue size for the monitored item.</param>
            <param name="filterToUse">The filter to revise.</param>
            <returns>Good if the </returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.ModifyMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.TimestampsToReturn,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{Opc.Ua.MonitoredItemModifyRequest},System.Collections.Generic.IList{Opc.Ua.ServiceResult},System.Collections.Generic.IList{Opc.Ua.MonitoringFilterResult})">
            <summary>
            Modifies the parameters for a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.OnModifyMonitoredItemsComplete(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem})">
            <summary>
            Called when a batch of monitored items has been modified.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.ModifyMonitoredItem(Technosoftware.UaServer.UaServerContext,Opc.Ua.DiagnosticsMasks,Opc.Ua.TimestampsToReturn,Technosoftware.UaServer.IUaMonitoredItem,Opc.Ua.MonitoredItemModifyRequest,Technosoftware.UaServer.UaNodeHandle,Opc.Ua.MonitoringFilterResult@)">
            <summary>
            Modifies the parameters for a monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.OnMonitoredItemModified(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Called after modifying a MonitoredItem.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle for the node.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.DeleteMonitoredItems(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{System.Boolean},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Deletes a set of monitored items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.OnDeleteMonitoredItemsComplete(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem})">
            <summary>
            Called when a batch of monitored items has been modified.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.DeleteMonitoredItem(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.IUaMonitoredItem,Technosoftware.UaServer.UaNodeHandle)">
            <summary>
            Deletes a monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.OnMonitoredItemDeleted(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem)">
            <summary>
            Called after deleting a MonitoredItem.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle for the node.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.SetMonitoringMode(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.MonitoringMode,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem},System.Collections.Generic.IList{System.Boolean},System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Changes the monitoring mode for a set of monitored items.
            </summary>
            <param name="context">The context.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="monitoredItems">The set of monitoring items to update.</param>
            <param name="processedItems">Flags indicating which items have been processed.</param>
            <param name="errors">Any errors.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.OnSetMonitoringModeComplete(Technosoftware.UaServer.UaServerContext,System.Collections.Generic.IList{Technosoftware.UaServer.IUaMonitoredItem})">
            <summary>
            Called when a batch of monitored items has their monitoring mode changed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.SetMonitoringMode(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.IUaMonitoredItem,Opc.Ua.MonitoringMode,Technosoftware.UaServer.UaNodeHandle)">
            <summary>
            Changes the monitoring mode for an item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.OnMonitoringModeChanged(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,Technosoftware.UaServer.UaMonitoredItem,Opc.Ua.MonitoringMode,Opc.Ua.MonitoringMode)">
            <summary>
            Called after changing the MonitoringMode for a MonitoredItem.
            </summary>
            <param name="context">The context.</param>
            <param name="handle">The handle for the node.</param>
            <param name="monitoredItem">The monitored item.</param>
            <param name="previousMode">The previous monitoring mode.</param>
            <param name="monitoringMode">The current monitoring mode.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.SessionClosing(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Boolean)">
            <summary>
            Called when a session is closed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.IsNodeInView(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.NodeId,System.Object)">
            <summary>
            Returns true if a node is in a view.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateNodeId(Opc.Ua.ISystemContext,Opc.Ua.NodeState)">
            <summary>
            Creates the NodeId for the specified node.
            </summary>
            <param name="context">The context.</param>
            <param name="node">The node.</param>
            <returns>The new NodeId.</returns>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.Lock">
            <summary>
            Acquires the lock on the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.ServerData">
            <summary>
            Gets the server that the node manager belongs to.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.SystemContext">
            <summary>
            The default context to use.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.NamespaceIndex">
            <summary>
            Gets the default index for the node manager's namespace.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.NamespaceIndexes">
            <summary>
            Gets the namespace indexes owned by the node manager.
            </summary>
            <value>The namespace indexes.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.MaxQueueSize">
            <summary>
            Gets or sets the maximum size of a monitored item queue.
            </summary>
            <value>The maximum size of a monitored item queue.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.AliasRoot">
            <summary>
            The root for the alias assigned to the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.PredefinedNodes">
            <summary>
            The predefined nodes managed by the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.RootNotifiers">
            <summary>
            The root notifiers for the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.MonitoredItems">
            <summary>
            Gets the table of monitored items.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.MonitoredNodes">
            <summary>
            Gets the table of nodes being monitored.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.SetNamespaces(System.String[])">
            <summary>
            Sets the namespaces supported by the NodeManager.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.SetNamespaceIndexes(System.UInt16[])">
            <summary>
            Sets the namespace indexes supported by the NodeManager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.IsNodeIdInNamespace(Opc.Ua.NodeId)">
            <summary>
            Returns true if the namespace for the node id is one of the namespaces managed by the node manager.
            </summary>
            <param name="nodeId">The node id to check.</param>
            <returns>True if the namespace is one of the nodes.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.IsHandleInNamespace(System.Object)">
            <summary>
            Returns the node if the handle refers to a node managed by this manager.
            </summary>
            <param name="managerHandle">The handle to check.</param>
            <returns>Non-null if the handle belongs to the node manager.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.Find(Opc.Ua.NodeId)">
            <summary>
            Returns the state object for the specified node if it exists.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateNode(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeId,Opc.Ua.NodeId,Opc.Ua.QualifiedName,Opc.Ua.BaseInstanceState)">
            <summary>
            Creates a new instance and assigns unique identifiers to all children.
            </summary>
            <param name="context">The operation context.</param>
            <param name="parentId">An optional parent identifier.</param>
            <param name="referenceTypeId">The reference type from the parent.</param>
            <param name="browseName">The browse name.</param>
            <param name="instance">The instance to create.</param>
            <returns>The new node id.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.DeleteNode(Technosoftware.UaServer.UaServerContext,Opc.Ua.NodeId)">
            <summary>
            Deletes a node and all of its children.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.UaBaseNodeManager.CacheEntry">
            <summary>
            Stores a reference count for entries in the component cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.LookupNodeInComponentCache(Opc.Ua.ISystemContext,Technosoftware.UaServer.UaNodeHandle)">
            <summary>
            Looks up a component in cache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.RemoveNodeFromComponentCache(Opc.Ua.ISystemContext,Technosoftware.UaServer.UaNodeHandle)">
            <summary>
            Removes a reference to a component in thecache.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.AddNodeToComponentCache(Opc.Ua.ISystemContext,Technosoftware.UaServer.UaNodeHandle,Opc.Ua.NodeState)">
            <summary>
            Adds a node to the component cache.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseNodeManager.References">
            <summary>
                A list of references
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateFolder(Opc.Ua.NodeState,System.String,System.String)">
            <summary>
                Creates a new folder.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateObject(Opc.Ua.NodeState,System.String,System.String)">
            <summary>
                Creates a new object.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateObjectType(Opc.Ua.NodeState,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}},System.String,System.String)">
            <summary>
                Creates a new object type.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateMeshVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.NodeState[])">
            <summary>
                Creates a new variable.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateDataItemVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object,System.Double)">
            <summary>
                Creates a new variable.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateAnalogItemVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object,System.Double,Opc.Ua.Range,Opc.Ua.Range,System.String)">
            <summary>
                Creates a new variable.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateTwoStateDiscreteItemVariable(Opc.Ua.NodeState,System.String,System.String,System.Byte,System.Boolean,System.String,System.String)">
            <summary>
            Creates a new variable.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateMultiStateDiscreteItemVariable(Opc.Ua.NodeState,System.String,System.String,System.Byte,System.Object,System.String[])">
            <summary>
            Creates a new variable.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateMultiStateValueDiscreteItemVariable(Opc.Ua.NodeState,System.String,System.String,System.String[])">
            <summary>
            Creates a new variable.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object)">
            <summary>
                Creates a new variable.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.NodeId,System.Int32,System.Byte,System.Object)">
            <summary>
                Creates a new variable.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateVariableType(Opc.Ua.NodeState,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}},System.String,System.String,Opc.Ua.BuiltInType,System.Int32)">
            <summary>
                Creates a new variable type.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateDataType(Opc.Ua.NodeState,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}},System.String,System.String)">
            <summary>
                Creates a new data type.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateReferenceType(Opc.Ua.NodeState,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}},System.String,System.String)">
            <summary>
                Creates a new reference type.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateView(Opc.Ua.NodeState,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,System.Collections.Generic.IList{Opc.Ua.IReference}},System.String,System.String)">
            <summary>
                Creates a new view.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateMethod(Opc.Ua.BaseObjectState,System.String,System.String)">
            <summary>
                Creates a new method.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateProperty(Opc.Ua.BaseObjectState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object)">
            <summary>
                Creates a new property.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.CreateArgument(System.String,System.String,Opc.Ua.BuiltInType,System.Int32)">
            <summary>
                Creates a new argument
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="dataType"></param>
            <param name="valueRank"></param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.AddInputArguments(Opc.Ua.MethodState,System.Object,Opc.Ua.Argument[])">
            <summary>Adds the input arguments to a method.</summary>
            <param name="parent">The method object.</param>
            <param name="nodeId">
                The unique identifier for the variable in the Server's address space. The NodeId can be either:
                <list type="bullet">
                    <item>
                        <see cref="T:System.UInt32" />
                    </item>
                    <item>
                        <see cref="T:System.Guid" />
                    </item>
                    <item>
                        <see cref="T:System.String" />
                    </item>
                    <item><see cref="T:System.Byte" />[]</item>
                </list>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two nodes within an
                address-space share the same ID's.
            </param>
            <param name="inputArguments">The input arguments.</param>
            <returns>A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation.</returns>
            <remarks>Professional Edition feature.</remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseNodeManager.AddOutputArguments(Opc.Ua.MethodState,System.Object,Opc.Ua.Argument[])">
            <summary>Adds the output arguments to a method.</summary>
            <param name="parent">The method object.</param>
            <param name="nodeId">
                The unique identifier for the variable in the Server's address space. The NodeId can be either:
                <list type="bullet">
                    <item>
                        <see cref="T:System.UInt32" />
                    </item>
                    <item>
                        <see cref="T:System.Guid" />
                    </item>
                    <item>
                        <see cref="T:System.String" />
                    </item>
                    <item><see cref="T:System.Byte" />[]</item>
                </list>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two nodes within an
                address-space share the same ID's.
            </param>
            <param name="outputArguments">The output arguments.</param>
            <returns>A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation.</returns>
            <remarks>Professional Edition feature.</remarks>
        </member>
        <member name="T:Technosoftware.UaServer.UaBaseServer">
            <summary>
                Implements a basic OPC UA Server.
            </summary>
            <remarks>
                Each server instance must have one instance of a UaBaseServer object which is
                responsible for reading the configuration file, creating the endpoints and dispatching
                incoming requests to the appropriate handler.
                This sub-class specifies non-configurable metadata such as Product Name and initializes
                the EmptyNodeManager which provides access to the data exposed by the Server.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.#ctor">
            <summary>
                Initializes the object with default values.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.#ctor(Technosoftware.UaServer.IUaServerPlugin)">
            <summary>
                Initializes the object with default values.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.Application">
            <summary>
                The Application property is only used during beta phase of the product. It will be removed with the release of the
                product, so don't use it.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.UaServerPlugin">
            <summary>
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.NodeManager">
            <summary>
                Get the node manager.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.Licensee">
            <summary>
                The license owner of the license information provided by
                <see cref="M:Technosoftware.UaServer.IUaServerPlugin.OnGetLicenseInformation(Opc.Ua.LicenseHandler.LicenseEdition@,System.String@)" />
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.Product">
            <summary>The product the license was issued for.</summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.LicensedAt">
            <summary>The date the license was issued.</summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.ServiceExpired">
            <summary>Indicates wether the service subscription or evaluation period is expired.</summary>
            <remarks>
                <para>
                    <strong>Service Subscription:</strong>
                </para>
                <para>
                    Each product or Maintenance package includes one year of free updates. This means that it is possible to use
                    all licensed products released until
                    <see cref="P:Technosoftware.UaServer.UaBaseServer.LicensedAt" /> plus one year. A product version build after the <see cref="P:Technosoftware.UaServer.UaBaseServer.LicensedAt" /> plus one
                    year date can not be used with this license. In this case this
                    property is set to true and the product is turned into an evaluation version.
                </para>
                <para>
                    <strong>
                        <em>
                            Of course, a correct combination of license and product can be used as long as you want. It's just not
                            possible to update to a product
                            version newer than <see cref="P:Technosoftware.UaServer.UaBaseServer.LicensedAt" /> plus one year.
                        </em>
                    </strong>
                </para>
                <para>
                    <strong>Evaluation Period:</strong>
                </para>
                <para>If the evaluation period is expired this property is set to true.</para>
            </remarks>
            <value>True if either the service subscription or evaluation period expired; false otherwise</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.RestartRequired">
            <summary>
                Indicates whether the server must be restarted. This is mainly the case if the server is used in evaluation mode
                and the 90 minutes evaluation time expired.
            </summary>
            <remarks>As long as the ServiceExpired flag is false a restart of the server is possible.</remarks>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.SystemContext">
            <summary>
                The default context to use.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.NamespaceIndexes">
            <summary>
                Gets the namespace indexes owned by the node manager.
            </summary>
            <value>The namespace indexes.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.NamespaceUris">
            <summary>
                The table of namespace uris known to the server.
            </summary>
            <value>The namespace URIs.</value>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateMasterNodeManager(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
                Creates the node managers for the server.
            </summary>
            <remarks>
                This method allows the sub-class create any additional node managers which it uses. The SDK
                always creates a CoreNodeManager which handles the built-in nodes defined by the specification.
                Any additional NodeManagers are expected to handle application specific nodes.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.LoadServerProperties">
            <summary>
                Loads the non-configurable properties for the application.
            </summary>
            <remarks>
                These properties are exposed by the server but cannot be changed by administrators.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateResourceManager(Technosoftware.UaServer.IUaServerData,Opc.Ua.ApplicationConfiguration)">
            <summary>
                Creates the resource manager for the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.ValidateRequest(Opc.Ua.RequestHeader,Technosoftware.UaServer.Sessions.RequestType)">
            <summary>
                Verifies that the request header is valid.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="requestType">Type of the request.</param>
            <returns></returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.OnValidateOperationRequest(Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.RequestHeader,Technosoftware.UaServer.Sessions.RequestType)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="requestHeader"></param>
            <param name="requestType"></param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.OnRequestComplete(Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
                Verifies that the request header is valid.
            </summary>
            <param name="context">The operation context.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.OnOperationRequestComplete(Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.Shutdown">
            <summary>Requests a shutdown of the server.</summary>
            <returns>
                A <see cref="T:Opc.Ua.StatusCodes" /> code with the result of the operation. Returning an error code indicates that the
                server can't be stopped.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.GetEndpoints">
            <summary>
                Returns information about the endpoint's supported by the server.
            </summary>
            <returns>Returns a list of Endpoint information's.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.GetSessions">
            <summary>
                Returns all of the sessions known to the session manager.
            </summary>
            <returns>A list of the sessions.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.GetSubscriptions">
            <summary>
                Returns all of the subscriptions known to the server.
            </summary>
            <returns>A list of the subscriptions.</returns>
        </member>
        <member name="P:Technosoftware.UaServer.UaBaseServer.CurrentState">
            <summary>
                Returns the current state of the server.
            </summary>
            <returns>Returns the current state of the server.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.LoadNodes(System.String,System.Object)">
            <summary>
                Loads a node set from a resource and addes them to the set of predefined nodes.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.FindNode(Opc.Ua.NodeId)">
            <summary>
                Returns the state object for the specified node if it exists.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.FindNode(Opc.Ua.NodeId,System.Type)">
            <summary>
                Finds the specified node and checks if it is of the expected type.
            </summary>
            <returns>Returns null if not found or not of the correct type.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.FindNode(Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.UaNodeHandle,System.Collections.Generic.IDictionary{Opc.Ua.NodeId,Opc.Ua.NodeState})">
            <summary>
                Finds a node in the dynamic cache.
            </summary>
            <param name="context">The UA server implementation of the ISystemContext interface.</param>
            <param name="handle">The handle of the node to validate.</param>
            <param name="cache">The cached nodes</param>
            <returns>Returns null if not found or the node object.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.AddNode(Opc.Ua.NodeState)">
            <summary>
                Recursively indexes the node and its children.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.DeleteNode(Opc.Ua.NodeId)">
            <summary>
                Recursively indexes the node and its children.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)">
            <summary>Creates a new folder.</summary>
            <param name="parent">The parent folder object the new folder will be created in.</param>
            <param name="path">
                The full path of the new folder, e.g.
                <font color="#A31515" size="2" face="Consolas">
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">/Static/Simple Types</font>
                    </font>
                </font>
            </param>
            <param name="name">
                The name of the new folder, e.g. <font color="#A31515" size="2" face="Consolas">Simple Types</font>
            </param>
            <returns>The created folder object which can be used in further calls to <see cref="M:Technosoftware.UaServer.UaBaseServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" />.</returns>
            <example>
                <para>
                    <font color="blue" size="2" face="Consolas">
                        <font color="blue" size="2" face="Consolas">
                            <font color="blue" size="2" face="Consolas">object</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">root = _opcServer.CreateFolder(</font>
                    </font>
                    <font color="blue" size="2" face="Consolas">
                        <font color="blue" size="2" face="Consolas">
                            <font color="blue" size="2" face="Consolas">null</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"/DataAccess"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"DataAccess"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">);</font>
                    </font>
                </para>
                <para>
                    <font color="blue" size="2" face="Consolas">
                        <font color="blue" size="2" face="Consolas">
                            <font color="blue" size="2" face="Consolas">object</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">folder1 = _opcServer.CreateFolder(root,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"/Static"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"Static"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">);</font>
                    </font>
                </para>
            </example>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateBaseObject(Opc.Ua.NodeState,System.String,System.String)">
            <summary>
                <para>Creates a new object.</para>
            </summary>
            <param name="parent">The parent folder object the new object will be created in.</param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new object, e.g. <font color="#A31515" size="2" face="Consolas">Object1</font>
            </param>
            <remarks>Not yet fully implemented.</remarks>
            <returns>The created object.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateProperty(Opc.Ua.BaseObjectState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object)">
            <summary>
                <para>Creates a new property.</para>
            </summary>
            <param name="parent">The parent object the new property will be added to.</param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new method, e.g. <font color="#A31515" size="2" face="Consolas">Method1</font>
            </param>
            <remarks>Not yet fully implemented.</remarks>
            <param name="dataType">
                The data type of the new variable, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <returns>The created property object.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateArgument(System.String,System.String,Opc.Ua.BuiltInType,System.Int32)">
            <summary>Creates a new argument.</summary>
            <param name="name">
                The name of the new argument, e.g.
                <font color="#A31515" size="2" face="Consolas">Initial State</font>
            </param>
            <param name="description">
                The description of the new argument, e.g.
                <font color="#A31515" size="2" face="Consolas">The initialize state for the process.</font>
            </param>
            <param name="dataType">
                The data type of the new argument, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new argument, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <returns>The created argument</returns>
            <remarks>Professional Edition feature.</remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateMethod(Opc.Ua.BaseObjectState,System.String,System.String,Opc.Ua.MethodCallEventHandler)">
            <summary>
                <para>Creates a new method.</para>
                <para>
                    Nodes of the type Method represent a method, that is, something that is called by a client and returns a
                    result.
                </para>
            </summary>
            <param name="parent">The parent object the new method will be created in.</param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new method, e.g. <font color="#A31515" size="2" face="Consolas">Method1</font>
            </param>
            <param name="callingMethod">The method which will be called if the method is executed.</param>
            <returns>The created method object.</returns>
            <remarks>Professional Edition feature.</remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.AddInputArguments(Opc.Ua.MethodState,System.Object,Opc.Ua.Argument[])">
            <summary>Adds the input arguments to a method.</summary>
            <param name="parent">The method object.</param>
            <param name="nodeId">
                The unique identifier for the variable in the server's address space. The NodeId can be either:
                <list type="bullet">
                    <item>
                        <see cref="T:System.UInt32" />
                    </item>
                    <item>
                        <see cref="T:System.Guid" />
                    </item>
                    <item>
                        <see cref="T:System.String" />
                    </item>
                    <item><see cref="T:System.Byte" />[]</item>
                </list>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two nodes within an
                address-space share the same ID's.
            </param>
            <param name="inputArguments">The input arguments.</param>
            <returns>A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation.</returns>
            <remarks>Professional Edition feature.</remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.AddOutputArguments(Opc.Ua.MethodState,System.Object,Opc.Ua.Argument[])">
            <summary>Adds the output arguments to a method.</summary>
            <param name="parent">The method object.</param>
            <param name="nodeId">
                The unique identifier for the variable in the server's address space. The NodeId can be either:
                <list type="bullet">
                    <item>
                        <see cref="T:System.UInt32" />
                    </item>
                    <item>
                        <see cref="T:System.Guid" />
                    </item>
                    <item>
                        <see cref="T:System.String" />
                    </item>
                    <item><see cref="T:System.Byte" />[]</item>
                </list>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two nodes within an
                address-space share the same ID's.
            </param>
            <param name="outputArguments">The output arguments.</param>
            <returns>A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation.</returns>
            <remarks>Professional Edition feature.</remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateBaseDataVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object)">
            <summary>Creates a new variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.UaBaseServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="dataType">
                The data type of the new variable, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue"></param>
            <returns>The created <see cref="T:Opc.Ua.BaseDataVariableState" /></returns>
            <example>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">_opcServer.CreateBaseDataVariable(folder3, nodeId++,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">
                                "/Static/All
                                Profiles/Scalar/Double"
                            </font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"Double"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">, BuiltInType.Double, ValueRanks.Scalar, AccessLevels.CurrentReadOrWrite);</font>
                    </font>
                </para>
            </example>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateBaseDataVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.NodeId,System.Int32,System.Byte,System.Object)">
            <summary>Creates a new variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.UaBaseServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <remarks>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two
                nodes within an address-space share the same ID's.
            </remarks>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="nodeId">
                The Node Id of the node used as data type of the new variable.
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <returns>The created <see cref="T:Opc.Ua.BaseDataVariableState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateBaseDataVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.ExpandedNodeId,System.Int32,System.Byte,System.Object)">
            <summary>Creates a new variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.UaBaseServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <remarks>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two
                nodes within an address-space share the same ID's.
            </remarks>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="expandedNodeId">
                The Expanded Node Id of the node used as data type of the new variable.
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <returns>The created <see cref="T:Opc.Ua.BaseDataVariableState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateMeshVariable(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object,Opc.Ua.NodeState[])">
            <summary>Creates a new meshed variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.UaBaseServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="dataType">
                The data type of the new variable, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <param name="peers">
                The peers the mesh is created with. Each peer has references to the variable with
                <see cref="F:Opc.Ua.ReferenceTypes.HasCause" /> and <see cref="F:Opc.Ua.ReferenceTypes.HasEffect" />. Also each
                variable has references to wach peer with <see cref="F:Opc.Ua.ReferenceTypes.HasCause" /> and
                <see cref="F:Opc.Ua.ReferenceTypes.HasEffect" />.
            </param>
            <remarks>
                <b>Important:</b> Keep in mind that the actual ID's of nodes should be unique such that no two
                nodes within an address-space share the same ID's.
            </remarks>
            <returns>The created <see cref="T:Opc.Ua.BaseDataVariableState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.WriteBaseVariable(Opc.Ua.BaseVariableState,System.Object,Opc.Ua.StatusCode,System.DateTime)">
            <summary>Writes to a variable.</summary>
            <param name="deviceItem">The <see cref="T:Opc.Ua.BaseVariableState" /> including the identifier.</param>
            <returns>A <see cref="T:Opc.Ua.StatusCode" /> code with the result of the operation.</returns>
            <param name="newValue">Object with new item value.</param>
            <param name="statusCode">CreateNodeId status code of the item value.</param>
            <param name="timestamp">CreateNodeId timestamp of the new item value.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateDataItem(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object,System.Double)">
            <summary>Creates a new DataItem variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.UaBaseServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="dataType">
                The data type of the new variable, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <param name="valuePrecision">
                <para>
                    Specifies the maximum precision that the server can maintain for the item based on restrictions in the target
                    environment. The precision can be used for the
                    following DataTypes:
                </para>
                <list type="bullet">
                    <item>For Float and Double values it specifies the number of digits after the decimal place.</item>
                    <item>
                        For DateTime values it indicates the minimum time difference in nanoseconds. E.g., a precision of
                        20000000 defines a precision of 20 milliseconds.
                    </item>
                </list>
            </param>
            <returns>The created <see cref="T:Opc.Ua.DataItemState" /></returns>
            <example>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">_opcServer.CreateDataItem(folder111, nodeId++,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">
                                "/Static/Simple
                                Types/In/String"
                            </font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"String"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">, BuiltInType.String, ValueRanks.Scalar, AccessLevels.CurrentRead, 2);</font>
                    </font>
                </para>
                <code title="" description="" lang="neutral"></code>
            </example>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateAnalogItem(Opc.Ua.NodeState,System.String,System.String,Opc.Ua.BuiltInType,System.Int32,System.Byte,System.Object,System.Double,Opc.Ua.Range,Opc.Ua.Range,System.String)">
            <summary>Creates a new AnalogItem variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.UaBaseServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g. <font color="#A31515" size="2" face="Consolas">SByte</font>
            </param>
            <param name="dataType">
                The data type of the new variable, e.g. <see cref="F:Opc.Ua.BuiltInType.SByte" />. See
                <see cref="T:Opc.Ua.BuiltInType" /> for all possible types
            </param>
            <param name="valueRank">
                The value rank of the new variable, e.g. <see cref="F:Opc.Ua.ValueRanks.Scalar" />. See
                <see cref="T:Opc.Ua.ValueRanks" /> for all possible value ranks.
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <param name="valuePrecision">
                <para>
                    Specifies the maximum precision that the server can maintain for the item based on restrictions in the target
                    environment. The precision can be used for the
                    following DataTypes:
                </para>
                <list type="bullet">
                    <item>For Float and Double values it specifies the number of digits after the decimal place.</item>
                    <item>
                        For DateTime values it indicates the minimum time difference in nanoseconds. E.g., a precision of
                        20000000 defines a precision of 20 milliseconds.
                    </item>
                </list>
            </param>
            <param name="instrumentRange">
                The instrument range defines the value <see cref="T:Opc.Ua.Range" /> that can be returned by the
                instrument.
            </param>
            <param name="euRange">
                <para>
                    The engineering unit range defines the value <see cref="T:Opc.Ua.Range" /> likely to be obtained in normal operation. It
                    is intended for such use as automatically
                    scaling a bar graph display.
                </para>
                <para>
                    Senso or instrument failure or deactivation can result in a returned item value which is actually outside
                    this range.
                </para>
            </param>
            <param name="unitName">The engineering unit name specifies the units for the item value, e.g. hertz, seconds, litres</param>
            <returns>The created <see cref="T:Opc.Ua.AnalogItemState" /></returns>
            <example>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">_opcServer.CreateDataItem(folder111, nodeId++,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">
                                "/Static/Simple
                                Types/In/String"
                            </font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">,</font>
                    </font>
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">"String"</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">, BuiltInType.String, ValueRanks.Scalar, AccessLevels.CurrentRead);</font>
                    </font>
                </para>
                <code title="" description="" lang="neutral"></code>
            </example>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateTwoStateDiscreteItem(Opc.Ua.NodeState,System.String,System.String,System.Byte,System.Boolean,System.String,System.String)">
            <summary>Creates a new two state variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.UaBaseServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g.
                <font color="#A31515" size="2" face="Consolas">
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">TwoState1</font>
                        </font>
                    </font>
                </font>
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <param name="trueState">
                Defines the string to be associated with this variable when it is TRUE. This is typically used for a contact when
                it is in the closed (non-zero)
                state.
            </param>
            <param name="falseState">
                Defines the string to be associated with this variable when it is FALSE. This is typically
                used for a contact when it is in the open(zero) state.
            </param>
            <returns>The created <see cref="T:Opc.Ua.TwoStateDiscreteState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.CreateMultiStateDiscreteItem(Opc.Ua.NodeState,System.String,System.String,System.Byte,System.Object,System.String[])">
            <summary>Creates a new multi state variable.</summary>
            <param name="parent">
                The folder object returned by a call to <see cref="M:Technosoftware.UaServer.UaBaseServer.CreateFolder(Opc.Ua.NodeState,System.String,System.String)" /> the new variable will be added
                to.
            </param>
            <param name="path">
                The unique path name for the variable in the server's address space.
            </param>
            <param name="name">
                The name of the new variable, e.g.
                <font color="#A31515" size="2" face="Consolas">
                    <font color="#A31515" size="2" face="Consolas">
                        <font color="#A31515" size="2" face="Consolas">
                            <font color="#A31515" size="2" face="Consolas">MultiState1</font>
                        </font>
                    </font>
                </font>
            </param>
            <param name="accessLevel">
                The access level of the new variable, e.g. <see cref="F:Opc.Ua.AccessLevels.CurrentRead" />. See
                <see cref="T:Opc.Ua.AccessLevels" /> for all possible access levels.
            </param>
            <param name="initialValue">The initial value. If null a default value is used as initial value.</param>
            <param name="values">The possible values the multistate variable can have.</param>
            <returns>The created <see cref="T:Opc.Ua.MultiStateDiscreteState" /></returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.AddRootNotifier(Opc.Ua.NodeState)">
            <summary>
                Adds a root notifier.
            </summary>
            <param name="notifier">The notifier.</param>
            <remarks>
                A root notifier is a notifier owned by the NodeManager that is not the target of a
                HasNotifier reference. These nodes need to be linked directly to the Server object.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.RemoveRootNotifier(Opc.Ua.NodeState)">
            <summary>
                Removes a root notifier previously added with AddRootNotifier.
            </summary>
            <param name="notifier">The notifier.</param>
            <remarks>
                A root notifier is a notifier owned by the NodeManager that is not the target of a
                HasNotifier reference. These nodes need to be linked directly to the Server object.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.ReportEvent(Opc.Ua.IFilterTarget)">
            <summary>
                Can be called to report a global event.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaBaseServer.GetNewSimulatedValue(Opc.Ua.BaseVariableState)">
            <summary>Generates a simulated value for each of the supported data types.</summary>
            <param name="deviceItem">The <see cref="T:Opc.Ua.BaseVariableState" /> a new value should generated for.</param>
            <returns>The new value for the specified <see cref="T:Opc.Ua.BaseVariableState" /></returns>
            <example>
                <para>
                    <font color="blue" size="2" face="Consolas">
                        <font color="blue" size="2" face="Consolas">
                            <font color="blue" size="2" face="Consolas">foreach</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">(</font>
                    </font>
                    <font color="#2B91AF" size="2" face="Consolas">
                        <font color="#2B91AF" size="2" face="Consolas">
                            <font color="#2B91AF" size="2" face="Consolas">BaseVariableState</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">deviceItem</font>
                    </font>
                    <font color="blue" size="2" face="Consolas">
                        <font color="blue" size="2" face="Consolas">
                            <font color="blue" size="2" face="Consolas">in</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">_dynamicNodes)</font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">{</font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">
                            deviceItem.Value =
                            _opcServer.GetNewSimulatedValue(deviceItem);
                        </font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">    deviceItem.StatusCode =</font>
                    </font>
                    <font color="#2B91AF" size="2" face="Consolas">
                        <font color="#2B91AF" size="2" face="Consolas">
                            <font color="#2B91AF" size="2" face="Consolas">StatusCodes</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">.Good;</font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">    deviceItem.Timestamp =</font>
                    </font>
                    <font color="#2B91AF" size="2" face="Consolas">
                        <font color="#2B91AF" size="2" face="Consolas">
                            <font color="#2B91AF" size="2" face="Consolas">DateTime</font>
                        </font>
                    </font>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">.UtcNow;</font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">    _opcServer.WriteVariable(deviceItem);</font>
                    </font>
                </para>
                <para>
                    <font size="2" face="Consolas">
                        <font size="2" face="Consolas">}</font>
                    </font>
                </para>
            </example>
        </member>
        <member name="T:Technosoftware.UaServer.UaContinuationPoint">
            <summary>
            The table of all reference types known to the server.
            </summary>
            <remarks>This class is thread safe.</remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaContinuationPoint.#ctor">
            <summary>
            Initializes the object with default values.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaContinuationPoint.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaContinuationPoint.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.Id">
            <summary>
            A unique identifier for the continuation point.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.Manager">
            <summary>
            The node manager that created the continuation point.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.View">
            <summary>
            The view being browsed.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.NodeToBrowse">
            <summary>
            The node being browsed.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.MaxResultsToReturn">
            <summary>
            The maximum number of results to return.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.BrowseDirection">
            <summary>
            What direction to follow the references.
            </summary>                
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.ReferenceTypeId">
            <summary>
            The reference type of the references to return.
            </summary>                
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.IncludeSubtypes">
            <summary>
            Whether subtypes of the reference type should be return as well.
            </summary>        
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.NodeClassMask">
            <summary>
            The node class of the target nodes for the references to return.
            </summary>  
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.ResultMask">
            <summary>
            The values to return.
            </summary>  
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.Index">
            <summary>
            The index where browsing halted.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.Data">
            <summary>
            Node manager specific data that is necessary to continue the browse.
            </summary>
            <remarks>
            A node manager needs to hold onto unmanaged resources to continue the browse.
            If this is the case then the object stored here must implement the Idispose 
            interface. This will ensure the unmanaged resources are freed if the continuation
            point expires.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.ReferenceTypeIdRequired">
            <summary>
            Whether the ReferenceTypeId should be returned in the result.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.IsForwardRequired">
            <summary>
            Whether the IsForward flag should be returned in the result.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.NodeClassRequired">
            <summary>
            Whether the NodeClass should be returned in the result.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.BrowseNameRequired">
            <summary>
            Whether the BrowseName should be returned in the result.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.DisplayNameRequired">
            <summary>
            Whether the DisplayName should be returned in the result.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.TypeDefinitionRequired">
            <summary>
            Whether the TypeDefinition should be returned in the result.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaContinuationPoint.TargetAttributesRequired">
            <summary>
            False if it is not necessary to read the attributes a target node.
            </summary>
            <remarks>
            This flag is true if the NodeClass filter is set or the target node attributes are returned in the result.
            </remarks>
        </member>
        <member name="T:Technosoftware.UaServer.UaImpersonateUserEventArgs">
            <summary>
                A class which provides the event arguments for session related event.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaImpersonateUserEventArgs.#ctor(Opc.Ua.UserIdentityToken,Opc.Ua.UserTokenPolicy)">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaImpersonateUserEventArgs.NewIdentity">
            <summary>
                The new user identity for the session.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaImpersonateUserEventArgs.UserTokenPolicy">
            <summary>
                The user token policy selected by the client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaImpersonateUserEventArgs.Identity">
            <summary>
                An application defined handle that can be used for access control operations.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaImpersonateUserEventArgs.EffectiveIdentity">
            <summary>
                An application defined handle that can be used for access control operations.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaImpersonateUserEventArgs.IdentityValidationError">
            <summary>
                Set to indicate that an error occurred validating the identity and that it should be rejected.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.UaMonitoredItem">
            <summary>
            A handle that describes how to access a node/attribute via an i/o manager.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.#ctor(Technosoftware.UaServer.IUaServerData,Technosoftware.UaServer.UaServerContext,Technosoftware.UaServer.IUaNodeManager,System.Object,System.UInt32,System.UInt32,Technosoftware.UaServer.Sessions.Session,Opc.Ua.ReadValueId,Opc.Ua.DiagnosticsMasks,Opc.Ua.TimestampsToReturn,Opc.Ua.MonitoringMode,System.UInt32,Opc.Ua.MonitoringFilter,Opc.Ua.MonitoringFilter,Opc.Ua.Range,System.Double,System.UInt32,System.Boolean,System.Double)">
            <summary>
            Initializes the object with its node type.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.Initialize">
            <summary>
            Sets private members to default values.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.NodeManager">
            <summary>
            The node manager that created the item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.ManagerHandle">
            <summary>
            The handle assigned by the node manager when it created the item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.SubscriptionId">
            <summary>
            The identifier for the subscription that owns the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.MonitoredItemType">
            <summary>
            A bit mask that indicates what the monitored item is.
            </summary>
            <remarks>
            Predefined bits are defined by the MonitoredItemTypeMasks class.
            NodeManagers may use the remaining bits.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.IsReadyToPublish">
            <summary>
            Returns true if the item is ready to publish.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.IsReadyToTrigger">
            <summary>
            Gets or Sets a value indicating whether the item is ready to trigger in case it has some linked items.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.SetTriggered">
            <summary>
            Sets a flag indicating that the item has been triggered and should publish.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.SetSemanticsChanged">
            <summary>
            Sets a flag indicating that the semantics for the monitored node have changed.
            </summary>
            <remarks>
            The StatusCode for next value reported by the monitored item will have the SemanticsChanged bit set.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.SetStructureChanged">
            <summary>
            Sets a flag indicating that the structure of the monitored node has changed.
            </summary>
            <remarks>
            The StatusCode for next value reported by the monitored item will have the StructureChanged bit set.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.Filter">
            <summary>
            The filter used by the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.EventFilter">
            <summary>
            The event filter used by the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.DataChangeFilter">
            <summary>
            The data change filter used by the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.Session">
            <summary>
            The session that owns the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.Id">
            <summary>
            The identifier for the item that is unique within the server.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.ClientHandle">
            <summary>
            The identifier for the client handle assigned to the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.NodeId">
            <summary>
            The node id being monitored.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.AttributeId">
            <summary>
            The attribute being monitored.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.MonitoringMode">
            <summary>
            The current monitoring mode for the item
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.SamplingInterval">
            <summary>
            The sampling interval for the item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.MinimumSamplingInterval">
            <summary>
            The minimum sampling interval for the item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.QueueSize">
            <summary>
            The queue size for the item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.ItemsInQueue">
            <summary>
            Gets number of elements actually contained in value queue.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.DiagnosticsMasks">
            <summary>
            The diagnostics masks to use when collecting notifications for the item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.IndexRange">
            <summary>
            The index range requested by the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.DataEncoding">
            <summary>
            The data encoding requested by the monitored item.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.AlwaysReportUpdates">
            <summary>
            Whether the monitored item should report a value without checking if it was changed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.GetReadValueId">
            <summary>
            Returns a description of the item being monitored. 
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.SetSamplingError(Opc.Ua.ServiceResult)">
            <summary>
            Sets an error that occured in the sampling group.
            </summary>
            <remarks>
            The sampling group or node manager that owns the item may call this to indicate that
            a fatal error occurred which means the item will no longer receive any data updates.
            This error state can be cleared by calling this method and passing in ServiceResult.Good.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.GetCreateResult(Opc.Ua.MonitoredItemCreateResult@)">
            <summary>
            Returns the result after creating the monitor item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.GetModifyResult(Opc.Ua.MonitoredItemModifyResult@)">
            <summary>
            Returns the result after modifying the monitor item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.ModifyAttributes(Opc.Ua.DiagnosticsMasks,Opc.Ua.TimestampsToReturn,System.UInt32,Opc.Ua.MonitoringFilter,Opc.Ua.MonitoringFilter,Opc.Ua.Range,System.Double,System.UInt32,System.Boolean)">
            <summary>
            Modifies the attributes for monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.SetSamplingInterval(System.Double)">
            <summary>
            Updates the sampling interval for an item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.Technosoftware#UaServer#IUaSampledDataChangeMonitoredItem#SetMonitoringMode(Opc.Ua.MonitoringMode)">
            <summary>
            Changes the monitoring mode for the item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.Technosoftware#UaServer#IUaEventMonitoredItem#SetMonitoringMode(Opc.Ua.MonitoringMode)">
            <summary>
            Changes the monitoring mode for the item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.SetMonitoringMode(Opc.Ua.MonitoringMode)">
            <summary>
            Changes the monitoring mode for the item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.QueueValue(Opc.Ua.DataValue,Opc.Ua.ServiceResult)">
            <summary>
            Adds an event to the queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.QueueValue(Opc.Ua.NodeState,Opc.Ua.DataValue,Opc.Ua.ServiceResult)">
            <summary>
            Adds an event to the queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.QueueValue(Opc.Ua.NodeState,Opc.Ua.DataValue,Opc.Ua.ServiceResult,System.Boolean)">
            <summary>
            Updates the queue with a data value or an error.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.SetOverflowBit(System.Object,Opc.Ua.ServiceResult)">
            <summary>
            Sets the overflow bit.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.AddValueToQueue(Opc.Ua.DataValue,Opc.Ua.ServiceResult)">
            <summary>
            Adds a value to the queue.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.MonitoringAllEvents">
            <summary>
            Whether the item is monitoring all events produced by the server.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.GetEventFields(Opc.Ua.FilterContext,Opc.Ua.EventFilter,Opc.Ua.IFilterTarget)">
            <summary>
            Fetches the event fields from the event.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.QueueEvent(Opc.Ua.IFilterTarget)">
            <summary>
            Adds an event to the queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.QueueEvent(Opc.Ua.IFilterTarget,System.Boolean)">
            <summary>
            Adds an event to the queue.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.QueueEvent(Opc.Ua.EventFieldList)">
            <summary>
            Adds an event to the queue.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.ReadyToPublish">
            <summary>
            Whether the item has notifications that are ready to publish.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.SamplingIntervalExpired">
            <summary>
            Used to check whether the item is ready to sample.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.IncrementSampleTime">
            <summary>
            Increments the sample time to the next interval.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.Publish(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.Queue{Opc.Ua.EventFieldList})">
            <summary>
            Publishes all available event notifications.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.Publish(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.Queue{Opc.Ua.MonitoredItemNotification},System.Collections.Generic.Queue{Opc.Ua.DiagnosticInfo})">
            <summary>
            Publishes all available data change notifications.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.Publish(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.Queue{Opc.Ua.MonitoredItemNotification},System.Collections.Generic.Queue{Opc.Ua.DiagnosticInfo},Opc.Ua.DataValue,Opc.Ua.ServiceResult)">
            <summary>
            Publishes a single data change notifications.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.SubscriptionCallback">
            <summary>
            The object to call when item is ready to publish.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaMonitoredItem.TimeToNextSample">
            <summary>
            The number of milliseconds until the next sample.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.ApplyFilter(Opc.Ua.DataValue,Opc.Ua.ServiceResult)">
            <summary>
            Applies the filter to value to determine if the new value should be kept.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.ValueChanged(Opc.Ua.DataValue,Opc.Ua.ServiceResult,Opc.Ua.DataValue,Opc.Ua.ServiceResult,Opc.Ua.DataChangeFilter,System.Double)">
            <summary>
            Applies the filter to value to determine if the new value should be kept.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.Equals(System.Object,System.Object,Opc.Ua.DeadbandType,System.Double,System.Double)">
            <summary>
            Checks if the two values are equal.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.ExceedsDeadband(System.Object,System.Object,Opc.Ua.DeadbandType,System.Double,System.Double)">
            <summary>
            Returns true if the deadband was exceeded.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.ExceedsDeadband(System.Double,System.Double,Opc.Ua.DeadbandType,System.Double,System.Double)">
            <summary>
            Returns true if the deadband was exceeded.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.InitializeQueue">
            <summary>
            Clears and re-initializes the queue if the monitoring parameters changed.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaMonitoredItem.QueueOverflowHandler">
            <summary>
            Update the overflow count.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.UaNodeHandle">
            <summary>
            Stores information about a NodeId specified by the client.
            </summary>
            <remarks>
            A UaNodeHandle is created when GetManagerHandle is called and will only contain
            information found by parsing the NodeId. The ValidateNode method is used to 
            verify that the NodeId refers to a real Node and find a NodeState object that 
            can be used to access the Node.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaNodeHandle.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Technosoftware.UaServer.UaNodeHandle" /> class.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaNodeHandle.#ctor(Opc.Ua.NodeId,Opc.Ua.NodeState)">
            <summary>
                Initializes a new instance of the <see cref="T:Technosoftware.UaServer.UaNodeHandle" /> class.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="node">The node.</param>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeHandle.NodeId">
            <summary>
            The NodeId provided by the client.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeHandle.ParsedNodeId">
            <summary>
            The parsed identifier (must not be null if Validated == False).
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeHandle.RootId">
            <summary>
            A unique string identifier for the root of a complex object tree.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeHandle.ComponentPath">
            <summary>
            A path to a component within the tree identified by the root id.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeHandle.Index">
            <summary>
            An index associated with the handle.
            </summary>
            <remarks>
            This is used to keep track of the position in the complete list of Nodes provided by the Client.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeHandle.Validated">
            <summary>
            Whether the handle has been validated.
            </summary>
            <remarks>
            When validation is complete the Node property must have a valid object.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeHandle.Node">
            <summary>
            An object that can be used to access the Node identified by the NodeId.
            </summary>
            <remarks>
            Not set until after the handle is validated.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.UaNodeHandle.MonitoredNode">
            <summary>
            An object that can be used to manage the items which are monitoring the node.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.UaPublishingState">
            <summary>
            The current publishing state for a subscription.
            </summary>  
        </member>
        <member name="F:Technosoftware.UaServer.UaPublishingState.Idle">
            <summary>
            The subscription is not ready to publish.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.UaPublishingState.NotificationsAvailable">
            <summary>
            The subscription has notifications that are ready to publish.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.UaPublishingState.WaitingForPublish">
            <summary>
            The has already indicated that it is waiting for a publish request.
            </summary>
        </member>
        <member name="F:Technosoftware.UaServer.UaPublishingState.Expired">
            <summary>
            The subscription has expired.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.UaServer">
            <summary>
                Main class for starting up the UA server
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServer.#ctor">
            <summary>
                Initializes the object with default values.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServer.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServer.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaServer.UseWindowsServiceHandling">
            <summary>
                <para>
                    Use the intregrated windows service handling based on the Environment.UserInteractive property. The default is
                    set to true.
                </para>
                <para>If set to false the integrated Windows Service handling is not used.  </para>
            </summary>
            <remarks>
                <strong>Important:</strong> If set to false the service handling must be done outside the UA server in the application speciifc code.
            </remarks>
        </member>
        <member name="M:Technosoftware.UaServer.UaServer.Start(System.String,System.String[])">
            <summary>
                Starts the OPC UA Server.
            </summary>
            <param name="driverPath">The path to the UAServerPlugin.dll to be loaded.</param>
            <param name="args">The command line arguments</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaServer.StartAsync(System.String,System.String[])">
            <summary>
                Starts the OPC UA Server.
            </summary>
            <param name="driverPath">The path to the UAServerPlugin.dll to be loaded.</param>
            <param name="args">The command line arguments</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaServer.Start(Technosoftware.UaServer.IUaServerPlugin,System.String,System.String[])">
            <summary>
                Starts the OPC UA Server.
            </summary>
            <param name="uaServerPlugin">The UA server plugin to use</param>
            <param name="configurationSection">The configuration section to use.</param>
            <param name="args">The command line arguments</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaServer.StartAsync(Technosoftware.UaServer.IUaServerPlugin,System.String,System.String[])">
            <summary>
                Starts the OPC UA Server.
            </summary>
            <param name="uaServerPlugin">The UA server plugin to use</param>
            <param name="configurationSection">The configuration section to use.</param>
            <param name="args">The command line arguments</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaServer.Stop">
            <summary>
                Stops the UA server.
            </summary>
        </member>
        <member name="T:Technosoftware.UaServer.UaServerContext">
            <summary>
            A generic implementation for ISystemContext interface.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerContext.#ctor(Technosoftware.UaServer.IUaServerData)">
            <summary>
            Initializes a new instance of the <see cref="!:SystemContext"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerContext.#ctor(Technosoftware.UaServer.IUaServerData,Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            Initializes a new instance of the <see cref="!:SystemContext"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerContext.#ctor(Technosoftware.UaServer.IUaServerData,Technosoftware.UaServer.Sessions.Session)">
            <summary>
            Initializes a new instance of the <see cref="!:SystemContext"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="session">The session.</param>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerContext.OperationContext">
            <summary>
            The operation context associated with system context.
            </summary>
            <value>The operation context.</value>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerContext.Copy">
            <summary>
            Creates a copy of the context that can be used with the specified operation context.
            </summary>
            <returns>A copy of the system context.</returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerContext.Copy(Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            Creates a copy of the context that can be used with the specified operation context.
            </summary>
            <param name="context">The operation context to use.</param>
            <returns>
            A copy of the system context that references the new operation context.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerContext.Copy(Technosoftware.UaServer.Sessions.Session)">
            <summary>
            Creates a copy of the context that can be used with the specified session.
            </summary>
            <param name="session">The session to use.</param>
            <returns>
            A copy of the system context that references the new session.
            </returns>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerContext.Copy(Technosoftware.UaServer.UaServerContext)">
            <summary>
            Creates a copy of the context that can be used with the specified server context.
            </summary>
            <param name="context">The server context to use.</param>
            <returns>
            A copy of the system context that references the new server context.
            </returns>
        </member>
        <member name="T:Technosoftware.UaServer.UaServerOperationContext">
            <summary>
            Stores information used while a thread is completing an operation on behalf of a client.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerOperationContext.#ctor(Opc.Ua.RequestHeader,Technosoftware.UaServer.Sessions.RequestType,Opc.Ua.IUserIdentity)">
            <summary>
            Initializes the context with a session.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="requestType">Type of the request.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerOperationContext.#ctor(Opc.Ua.RequestHeader,Technosoftware.UaServer.Sessions.RequestType,Technosoftware.UaServer.Sessions.Session)">
            <summary>
            Initializes the context with a session.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="requestType">Type of the request.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerOperationContext.#ctor(Technosoftware.UaServer.Sessions.Session,Opc.Ua.DiagnosticsMasks)">
            <summary>
            Initializes the context with a session.
            </summary>
            <param name="session">The session.</param>
            <param name="diagnosticsMasks">The diagnostics masks.</param>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerOperationContext.#ctor(Technosoftware.UaServer.IUaMonitoredItem)">
            <summary>
            Initializes the context with a monitored item.
            </summary>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.ChannelContext">
            <summary>
            The context for the secure channel used to send the request.
            </summary>
            <value>The channel context.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.Session">
            <summary>
            The session associated with the context.
            </summary>
            <value>The session.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.SecurityPolicyUri">
            <summary>
            The security policy used for the secure channel.
            </summary>
            <value>The security policy URI.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.RequestType">
            <summary>
            The type of request.
            </summary>
            <value>The type of the request.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.RequestId">
            <summary>
            A unique identifier assigned to the request by the server.
            </summary>
            <value>The request id.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.ClientHandle">
            <summary>
            The handle assigned by the client to the request.
            </summary>
            <value>The client handle.</value>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerOperationContext.SetStatusCode(Opc.Ua.StatusCode)">
            <summary>
            Updates the status code (thread safe).
            </summary>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.SessionId">
            <summary>
            The identifier for the session (null if multiple sessions are associated with the operation).
            </summary>
            <value>The session id.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.UserIdentity">
            <summary>
            The identity context to use when processing the request.
            </summary>
            <value>The user identity.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.PreferredLocales">
            <summary>
            The locales to use for the operation.
            </summary>
            <value>The preferred locales.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.DiagnosticsMask">
            <summary>
            The diagnostics mask specified with the request.
            </summary>
            <value>The diagnostics mask.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.StringTable">
            <summary>
            A table of diagnostics strings to return in the response.
            </summary>
            <value>The string table.</value>
            <remarks>
            This object is thread safe.
            </remarks>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.OperationDeadline">
            <summary>
            When the request times out.
            </summary>
            <value>The operation deadline.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.OperationStatus">
            <summary>
            The current status of the request (used to check for timeouts/client cancel requests).
            </summary>
            <value>The operation status.</value>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerOperationContext.AuditEntryId">
            <summary>
            The audit log entry id provided by the client which must be included in an audit events generated by the server.
            </summary>
            <value>The audit entry id.</value>
        </member>
        <member name="T:Technosoftware.UaServer.UaServerUtils">
            <summary>
            The interface that a server exposes to objects that it contains.
            </summary>
        </member>
        <member name="P:Technosoftware.UaServer.UaServerUtils.EventsEnabled">
            <summary>
            Whether event queuing is enabled.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.ReportWriteValue(Opc.Ua.NodeId,Opc.Ua.DataValue,Opc.Ua.StatusCode)">
            <summary>
            Reports a value written.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.ReportQueuedValue(Opc.Ua.NodeId,System.UInt32,Opc.Ua.DataValue)">
            <summary>
            Reports a value queued.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.ReportFilteredValue(Opc.Ua.NodeId,System.UInt32,Opc.Ua.DataValue)">
            <summary>
            Reports a value excluded by the filter.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.ReportDiscardedValue(Opc.Ua.NodeId,System.UInt32,Opc.Ua.DataValue)">
            <summary>
            Reports a value discarded because of queue overflow.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.ReportPublishValue(Opc.Ua.NodeId,System.UInt32,Opc.Ua.DataValue)">
            <summary>
            Reports a value published.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.ReportCreateMonitoredItem(Opc.Ua.NodeId,System.UInt32,System.Double,System.UInt32,System.Boolean,Opc.Ua.MonitoringFilter,Opc.Ua.MonitoringMode)">
            <summary>
            Reports a new monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.ReportModifyMonitoredItem(Opc.Ua.NodeId,System.UInt32,System.Double,System.UInt32,System.Boolean,Opc.Ua.MonitoringFilter,Opc.Ua.MonitoringMode)">
            <summary>
            Reports a modified monitored item.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.CreateError(System.UInt32,Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.DiagnosticInfoCollection,System.Int32)">
            <summary>
            Fills in the diagnostic information after an error.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.CreateError(System.UInt32,Opc.Ua.StatusCodeCollection,Opc.Ua.DiagnosticInfoCollection,Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            Fills in the diagnostic information after an error.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.CreateError(System.UInt32,Opc.Ua.StatusCodeCollection,Opc.Ua.DiagnosticInfoCollection,System.Int32,Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            Fills in the diagnostic information after an error.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.CreateSuccess(Opc.Ua.StatusCodeCollection,Opc.Ua.DiagnosticInfoCollection,Technosoftware.UaServer.UaServerOperationContext)">
            <summary>
            Creates a place holder in the lists for the results.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.CreateDiagnosticInfoCollection(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.ServiceResult})">
            <summary>
            Creates a collection of diagnostics from a set of errors.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.CreateStatusCodeCollection(Technosoftware.UaServer.UaServerOperationContext,System.Collections.Generic.IList{Opc.Ua.ServiceResult},Opc.Ua.DiagnosticInfoCollection@)">
            <summary>
            Creates a collection of status codes and diagnostics from a set of errors.
            </summary>
        </member>
        <member name="M:Technosoftware.UaServer.UaServerUtils.CreateDiagnosticInfo(Technosoftware.UaServer.IUaServerData,Technosoftware.UaServer.UaServerOperationContext,Opc.Ua.ServiceResult)">
            <summary>
            Creates the diagnostic info and translates any strings.
            </summary>
            <param name="server">The server.</param>
            <param name="context">The context containing the string stable.</param>
            <param name="error">The error to translate.</param>
            <returns>The diagnostics with references to the strings in the context string table.</returns>
        </member>
    </members>
</doc>
